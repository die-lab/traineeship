%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Mar  1 10:23:59 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUAUAGAGGUUCAAGCCCUCUUAUUUCUAGGACAAUAGGAAUUGAACCUACACUUAAGAAUUCAAAAU\
) } def
/len { sequence length } bind def

/coor [
[156.67279053 386.59976196]
[147.09654236 374.98596191]
[140.05445862 361.68206787]
[135.83493042 347.23281860]
[134.61071777 332.22994995]
[136.43196106 317.28778076]
[141.22409058 303.01821899]
[148.79086304 290.00558472]
[158.82243347 278.78274536]
[170.90800476 269.80923462]
[164.56872559 256.21459961]
[158.22946167 242.61999512]
[151.89018250 229.02537537]
[145.55090332 215.43075562]
[139.21163940 201.83613586]
[132.87236023 188.24151611]
[126.53308868 174.64691162]
[112.49249268 169.80984497]
[105.86990356 156.11326599]
[111.03865814 141.41899109]
[104.69938660 127.82437897]
[98.36011505 114.22976685]
[87.01809692 106.05355835]
[88.04527283 92.10951233]
[81.70599365 78.51489258]
[68.86141205 69.27761078]
[70.49501038 54.47286606]
[64.15573883 40.87824631]
[57.81646729 27.28363037]
[45.64271545 15.48379517]
[53.61137772 0.51927930]
[70.19702148 4.03393412]
[71.41107941 20.94435692]
[77.75035858 34.53897476]
[84.08963013 48.13359070]
[96.48078156 56.39849091]
[95.30061340 72.17562103]
[101.63988495 85.77023315]
[112.98190308 93.94644165]
[111.95472717 107.89048767]
[118.29400635 121.48510742]
[124.63327789 135.07972717]
[139.21215820 140.56552124]
[145.44741821 154.44270325]
[140.12770081 168.30763245]
[146.46697998 181.90225220]
[152.80625916 195.49685669]
[159.14552307 209.09147644]
[165.48480225 222.68609619]
[171.82408142 236.28071594]
[178.16334534 249.87533569]
[184.50262451 263.46994019]
[199.14518738 259.97991943]
[214.19056702 259.50921631]
[229.02264404 262.07708740]
[243.03408813 267.57839966]
[255.65112305 275.78787231]
[266.35708618 286.36932373]
[274.71356201 298.88949585]
[280.37838745 312.83560181]
[283.11956787 327.63665771]
[282.82489014 342.68649292]
[279.50637817 357.36889648]
[273.29992676 371.08258057]
[264.45971680 383.26596069]
[253.34771729 393.42019653]
[240.41897583 401.12945557]
[226.20291138 406.07803345]
[211.28166199 408.06329346]
[196.26625061 407.00396729]
[181.77153015 402.94338989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[20 42]
[21 41]
[22 40]
[24 38]
[25 37]
[27 35]
[28 34]
[29 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
