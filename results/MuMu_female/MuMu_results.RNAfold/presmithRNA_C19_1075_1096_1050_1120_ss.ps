%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Mar  1 10:23:59 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGCCUACACCCAGAAGAUUUCAUGACCAAUGAACACUCUGAACUAAUCCUAGCCCUAGCCCUACACAA\
) } def
/len { sequence length } bind def

/coor [
[94.88111877 115.72547913]
[84.27452087 126.33208466]
[73.66791534 136.93869019]
[63.06131363 147.54528809]
[52.45471191 158.15188599]
[53.99776840 173.71315002]
[45.13459396 186.59640503]
[30.05010223 190.71855164]
[15.86673355 184.13327026]
[9.28144073 169.94990540]
[13.40359688 154.86540222]
[26.28684616 146.00222778]
[41.84811020 147.54528809]
[52.45471191 136.93869019]
[63.06131363 126.33208466]
[73.66791534 115.72547913]
[84.27452087 105.11888123]
[86.23241425 90.24720764]
[78.73241425 77.25682831]
[71.23241425 64.26644897]
[53.38779068 55.36185837]
[53.44935608 36.21792603]
[44.84571075 23.93064499]
[36.24206543 11.64336395]
[27.63841629 -0.64391702]
[19.03477097 -12.93119812]
[3.54871511 -17.12185860]
[-2.69782615 -31.89887810]
[5.08695841 -45.92658997]
[20.93124771 -48.44413376]
[32.68066025 -37.52026749]
[31.32205200 -21.53484344]
[39.92569733 -9.24756336]
[48.52934265 3.03971720]
[57.13299179 15.32699776]
[65.73664093 27.61427879]
[76.29492950 28.56394958]
[84.65047455 35.44533157]
[87.73158264 46.05497742]
[84.22279358 56.76644516]
[91.72279358 69.75682831]
[99.22279358 82.74720764]
[93.35746765 68.94149017]
[93.66410828 53.94462204]
[100.08887482 40.39019775]
[111.50351715 30.65850067]
[125.90351868 26.45850372]
[140.76010132 28.52776527]
[153.46432495 36.50290298]
[161.78520203 48.98340988]
[164.26150513 63.77759552]
[160.45837402 78.28746033]
[151.04368591 89.96494293]
[137.67074585 96.75936890]
[122.68904114 97.47776031]
[136.54722595 103.21800995]
[152.72660828 100.54219818]
[162.92308044 113.38603210]
[156.64739990 128.53686523]
[140.35543823 130.40882874]
[130.80697632 117.07620239]
[116.94879150 111.33595276]
[130.54437256 117.67315674]
[139.41543579 129.76878357]
[141.37455750 144.64028931]
[135.93867493 158.62068176]
[124.44814301 168.26264954]
[109.73630524 171.18870544]
[95.43080139 166.67733765]
[85.05906677 155.84095764]
[81.17857361 141.35159302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[18 42]
[19 41]
[20 40]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
