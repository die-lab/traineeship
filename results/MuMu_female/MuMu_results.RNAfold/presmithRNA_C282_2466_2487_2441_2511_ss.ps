%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Mar  1 10:23:59 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACAUCCCAAUGGUGUAGAAGCUAUUAAUGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGA\
) } def
/len { sequence length } bind def

/coor [
[48.68219757 267.07812500]
[45.74216461 269.13232422]
[42.69258118 269.74551392]
[34.63308716 282.39639282]
[34.45872879 298.79461670]
[20.03942680 306.60586548]
[6.20852518 297.79461670]
[7.19407034 281.42510986]
[21.98221779 274.33691406]
[30.04171181 261.68603516]
[36.96794128 248.38087463]
[42.70819092 234.52267456]
[48.14476395 220.54255676]
[53.27506638 206.44717407]
[50.35736465 191.84114075]
[62.34798431 181.51953125]
[67.47828674 167.42413330]
[72.60858917 153.32875061]
[77.73889160 139.23336792]
[82.86919403 125.13796997]
[87.99949646 111.04257965]
[83.69200897 100.01133728]
[87.98414612 88.97412109]
[98.61255646 83.75112915]
[104.35281372 69.89293671]
[110.09306335 56.03474426]
[110.53374481 46.58757019]
[116.39784241 41.70605087]
[122.73711395 28.11143494]
[129.07638550 14.51681709]
[135.41566467 0.92220056]
[141.75492859 -12.67241669]
[140.57476807 -28.44954491]
[152.96591187 -36.71444702]
[159.30519104 -50.30906296]
[165.64447021 -63.90367889]
[166.49681091 -73.32263947]
[172.56825256 -77.94372559]
[167.57737732 -92.93928528]
[174.72636414 -107.03422546]
[189.77384949 -111.86628723]
[203.79241943 -104.56867218]
[208.46511841 -89.47094727]
[201.01969910 -75.53030396]
[185.87341309 -71.01749420]
[179.23908997 -57.56440353]
[172.89981079 -43.96978760]
[166.56053162 -30.37517166]
[168.19413757 -15.57042122]
[155.34954834 -6.33314228]
[149.01028442 7.26147461]
[142.67100525 20.85609055]
[136.33172607 34.45070648]
[129.99246216 48.04532623]
[123.95125580 61.77499771]
[118.21100616 75.63318634]
[112.47075653 89.49138641]
[115.19918060 105.91063690]
[102.09488678 116.17288208]
[96.96458435 130.26828003]
[91.83428192 144.36366272]
[86.70397949 158.45904541]
[81.57367706 172.55444336]
[76.44337463 186.64982605]
[78.99411774 202.26406860]
[67.37045288 211.57746887]
[62.24015045 225.67286682]
[62.21197128 235.13026428]
[56.56638336 240.26292419]
[50.82613373 254.12112427]
[51.74124908 259.13674927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 10]
[4 9]
[11 70]
[12 69]
[13 67]
[14 66]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[24 57]
[25 56]
[26 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[34 48]
[35 47]
[36 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
