%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Feb 15 21:29:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAUAUCUGAUUUGCAUUUAGAAGAUGCGGAGUAACGUCUGUAAGUCCUAUCAGAGACUAGAAGAUUUU\
) } def
/len { sequence length } bind def

/coor [
[4.49844265 152.59846497]
[-5.23825502 156.61172485]
[-15.56520176 158.64546204]
[-26.08442307 158.62373352]
[-36.39099884 156.54971313]
[-46.08866501 152.50558472]
[-54.80503464 146.64918518]
[-62.20590210 139.20791626]
[-68.00805664 130.46989441]
[-71.99013519 120.77276611]
[-74.00102997 110.49071503]
[-73.96566772 100.01999664]
[-71.88776398 89.76364136]
[-85.48237610 83.42436981]
[-99.07699585 77.08509064]
[-112.67160797 70.74581909]
[-126.26622772 64.40654755]
[-139.86083984 58.06727219]
[-153.45545959 51.72799683]
[-167.05007935 45.38872147]
[-180.64469910 39.04944992]
[-197.55511475 37.83538818]
[-201.06977844 21.24974442]
[-186.10525513 13.28108025]
[-174.30541992 25.45483208]
[-160.71080017 31.79410553]
[-147.11619568 38.13338089]
[-133.52157593 44.47265244]
[-119.92695618 50.81192780]
[-106.33233643 57.15120316]
[-92.73772430 63.49047470]
[-79.14310455 69.82975006]
[-65.54848480 76.16902161]
[-50.87712097 61.09235382]
[-31.48727798 52.84366226]
[-10.38163185 52.72929001]
[9.16022110 60.79366302]
[24.09138489 75.80825043]
[32.07270813 95.45862579]
[47.05843353 94.80433655]
[62.04415512 94.15003967]
[77.02987671 93.49575043]
[85.18916321 81.27645874]
[98.95866394 76.14948273]
[113.12261200 80.05686188]
[122.31582642 91.51852417]
[137.30155945 90.86423492]
[152.28727722 90.20994568]
[167.27299500 89.55564880]
[182.24089050 88.57460785]
[197.18380737 87.26727295]
[212.43568420 79.86346436]
[223.77229309 92.46972656]
[214.79696655 106.85305023]
[198.49113464 102.21018982]
[183.54821777 103.51752472]
[176.95544434 107.35839081]
[167.92729187 104.54137421]
[152.94157410 105.19566345]
[137.95584106 105.84996033]
[122.97012329 106.50424957]
[114.81083679 118.72354126]
[101.04133606 123.85051727]
[86.87738800 119.94313812]
[77.68417358 108.48147583]
[62.69844818 109.13576508]
[47.71272278 109.79005432]
[32.72700119 110.44435120]
[30.65700722 120.80115509]
[26.60699844 130.54885864]
[20.73506165 139.31317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[39 68]
[40 67]
[41 66]
[42 65]
[46 61]
[47 60]
[48 59]
[49 58]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
