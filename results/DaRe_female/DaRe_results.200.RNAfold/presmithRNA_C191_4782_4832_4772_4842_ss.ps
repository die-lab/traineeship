%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Feb 15 21:29:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAACUCAAGAACCGUGCCCGAAUGCUAAGGGGUCACUUUGAUGGAGUGAACCAUAGGGGUUAAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[89.44376373 239.11625671]
[87.48677063 223.88255310]
[93.42361450 209.71746826]
[105.65731812 200.43135071]
[103.69942474 185.55967712]
[101.74153900 170.68800354]
[99.78364563 155.81632996]
[97.82575226 140.94465637]
[95.86785889 126.07298279]
[86.13836670 123.42817688]
[77.83486938 117.18244934]
[72.27454376 108.04299164]
[70.44129944 97.19097137]
[72.81904602 86.13004303]
[79.29189301 76.47803497]
[66.30151367 68.97803497]
[49.66039658 73.85592651]
[34.85241699 65.49005127]
[30.61199570 49.36400604]
[17.30683327 42.43777847]
[2.31127810 47.42865372]
[-11.78366852 40.27966690]
[-16.61572456 25.23218155]
[-9.31811523 11.21360588]
[5.77961493 6.54091120]
[19.72025299 13.98632431]
[24.23306274 29.13261414]
[37.53822708 36.05884171]
[49.34658051 30.46453476]
[62.39783478 32.82513046]
[71.77230072 42.48320389]
[73.80151367 55.98765182]
[86.79189301 63.48765182]
[101.61731720 61.20579910]
[111.75117493 50.14664078]
[121.88502502 39.08747864]
[131.77520752 27.80988312]
[141.41702271 16.31921577]
[151.05883789 4.82854986]
[160.70065308 -6.66211653]
[170.34246826 -18.15278244]
[179.98428345 -29.64344978]
[185.53372192 -45.66344070]
[202.46388245 -44.76565552]
[206.28791809 -28.24860382]
[191.47494507 -20.00163651]
[181.83312988 -8.51096916]
[172.19131470 2.97969747]
[162.54949951 14.47036457]
[152.90769958 25.96103096]
[143.26588440 37.45169830]
[141.31999207 44.82939148]
[132.94418335 49.22133255]
[122.81033325 60.28049469]
[112.67647552 71.33965302]
[123.34722900 80.60763550]
[128.57659912 93.25197601]
[127.63150024 106.45069122]
[121.11150360 117.44480896]
[110.73953247 124.11509705]
[112.69742584 138.98677063]
[114.65531158 153.85844421]
[116.61320496 168.73011780]
[118.57109833 183.60179138]
[120.52899170 198.47346497]
[134.74926758 204.27684021]
[144.15002441 216.42268372]
[146.20246887 231.64382935]
[140.35455322 245.84584045]
[128.17929077 255.20846558]
[112.95179749 257.21319580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[15 33]
[16 32]
[19 28]
[20 27]
[34 55]
[35 54]
[36 53]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
