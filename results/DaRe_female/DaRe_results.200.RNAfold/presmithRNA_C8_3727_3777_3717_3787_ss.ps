%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Feb 15 21:29:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAGGGUUGCUGGGAUGGCAGAGCUCGGUAAUUGCAAAAGGCCUAAGCCCUUUCACCCAAAGGUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[75.80693817 351.56973267]
[61.44379807 345.93911743]
[52.42342377 333.42367554]
[51.62417603 318.01702881]
[59.30109787 304.63537598]
[73.00450897 297.54876709]
[74.31185150 282.60583496]
[75.61918640 267.66293335]
[76.92652130 252.72000122]
[78.23385620 237.77708435]
[68.49287415 226.56776428]
[69.60582733 211.39489746]
[81.42924500 201.25366211]
[82.73657990 186.31074524]
[84.04391479 171.36781311]
[85.35124969 156.42489624]
[82.71355438 149.26533508]
[87.05550385 140.86349487]
[89.01339722 125.99182129]
[90.97129059 111.12014771]
[85.79859924 98.13034821]
[94.15704346 86.92195892]
[96.11492920 72.05028534]
[90.24510956 57.35825348]
[99.57746124 45.74978638]
[101.53535461 30.87811279]
[103.49324799 16.00643921]
[95.99154663 -0.64874232]
[106.84835052 -14.26270199]
[108.15568542 -29.20562172]
[109.46302032 -44.14854431]
[101.69843292 -54.70262909]
[103.29057312 -67.29991150]
[112.81013489 -75.07691956]
[114.76802826 -89.94859314]
[107.99586487 -104.88411713]
[117.76300812 -118.05738068]
[134.02186584 -115.91686249]
[140.04670715 -100.66454315]
[129.63969421 -87.99069977]
[127.68180847 -73.11902618]
[135.33465576 -57.47793198]
[124.40593719 -42.84120560]
[123.09860229 -27.89828682]
[121.79126740 -12.95536613]
[129.40193176 -3.30229235]
[128.22976685 9.34098434]
[118.36491394 17.96433258]
[116.40702820 32.83600616]
[114.44913483 47.70767975]
[120.45899963 61.33598709]
[110.98660278 74.00817871]
[109.02870941 88.87985229]
[114.20140076 101.86965179]
[105.84295654 113.07804108]
[103.88507080 127.94971466]
[101.92717743 142.82139587]
[100.29417419 157.73223877]
[98.98683167 172.67515564]
[97.67949677 187.61807251]
[96.37216187 202.56098938]
[106.25494385 214.60127258]
[104.71624756 229.73690796]
[93.17678070 239.08442688]
[91.86943817 254.02734375]
[90.56210327 268.97027588]
[89.25476837 283.91317749]
[87.94743347 298.85610962]
[100.21208191 308.21463013]
[105.44867706 322.72604370]
[101.98623657 337.75985718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[13 61]
[14 60]
[15 59]
[16 58]
[18 57]
[19 56]
[20 55]
[22 53]
[23 52]
[25 50]
[26 49]
[27 48]
[29 45]
[30 44]
[31 43]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
