%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Feb 15 21:29:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACGGCACUGAAGCUGCCAAGAUGGGCCCUAAUAAGCUCCGCAUGCACAAAGGCAUGGUCCCGACCUU\
) } def
/len { sequence length } bind def

/coor [
[102.72388458 263.70935059]
[102.72388458 248.70935059]
[102.72388458 233.70935059]
[92.04301453 223.39166260]
[91.82933044 208.17953491]
[102.72388458 197.04640198]
[102.72388458 182.04640198]
[102.72388458 167.04640198]
[94.98658752 154.31913757]
[102.72388458 140.51896667]
[102.72388458 125.51895905]
[81.70365143 112.69428253]
[83.12184906 91.55332947]
[68.32415009 85.95522308]
[66.07033539 71.23212433]
[56.42852020 59.74146271]
[46.78670502 48.25079346]
[37.14489365 36.76012802]
[25.86729431 26.86993980]
[13.21642303 18.81044579]
[0.56555128 10.75095177]
[-14.80792522 14.41588783]
[-28.22616196 6.06564903]
[-31.72835541 -9.34571648]
[-23.23671722 -22.67491913]
[-7.78918505 -26.01397896]
[5.44949341 -17.38188934]
[8.62504578 -1.89991951]
[21.27591705 6.15957451]
[33.92678833 14.21906853]
[32.90702057 -0.74622685]
[41.44952774 -13.07608986]
[55.81904984 -17.37921143]
[69.73242188 -11.77402306]
[77.10593414 1.28857028]
[74.71546936 16.09686852]
[63.60627747 26.17584801]
[48.63555908 27.11831284]
[58.27737427 38.60897827]
[67.91918945 50.09964752]
[77.56099701 61.59031296]
[91.66905212 66.36653137]
[94.61251068 81.91151428]
[113.09039307 81.98493195]
[125.65618134 99.36968994]
[140.52784729 97.41179657]
[155.39952087 95.45390320]
[170.27119446 93.49600983]
[185.14286804 91.53811646]
[194.56385803 78.84873199]
[210.21026611 76.62031555]
[222.79933167 86.17493439]
[224.86219788 101.84401703]
[215.17501831 114.33136749]
[199.48500061 116.22846222]
[187.10076904 106.40979004]
[172.22909546 108.36768341]
[157.35742188 110.32557678]
[142.48574829 112.28347015]
[127.61407471 114.24136353]
[117.72388458 125.51895905]
[117.72388458 140.51896667]
[125.46118927 154.31913757]
[117.72388458 167.04640198]
[117.72388458 182.04640198]
[117.72388458 197.04640198]
[128.61843872 208.17953491]
[128.40475464 223.39166260]
[117.72388458 233.70935059]
[117.72388458 248.70935059]
[117.72388458 263.70935059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[6 66]
[7 65]
[8 64]
[10 62]
[11 61]
[13 43]
[15 41]
[16 40]
[17 39]
[18 38]
[19 30]
[20 29]
[21 28]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
