%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Feb 15 21:29:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCAUGCACAAAGGCAUGGUCCCGACCUUUUGAUCAGCUUUUACCUAAUUUACACAUGCAAGUCUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[113.71552277 217.58688354]
[119.56037140 203.55455017]
[130.33377075 192.83064270]
[124.59352112 178.97244263]
[118.85326385 165.11425781]
[113.11301422 151.25605774]
[107.37276459 137.39787292]
[85.38303375 135.20373535]
[68.30629730 121.17705536]
[61.88232040 100.03243256]
[68.27030945 78.87690735]
[57.66370392 68.27030945]
[47.05710220 57.66370392]
[36.45050049 47.05710220]
[25.84390068 36.45050049]
[15.23729801 25.84390068]
[6.67788887 21.82148552]
[4.41204405 14.53569221]
[-5.72180891 3.47653198]
[-15.85566235 -7.58262825]
[-25.98951530 -18.64178848]
[-36.12336731 -29.70094872]
[-51.10062408 -26.29838562]
[-65.76782990 -30.85563469]
[-76.17959595 -42.14681625]
[-79.53519440 -57.13466263]
[-74.93199158 -71.78751373]
[-63.60823059 -82.16383362]
[-48.60993958 -85.47243500]
[-33.97158813 -80.82332611]
[-23.63081551 -69.46709442]
[-20.36923981 -54.45851135]
[-25.06420898 -39.83480072]
[-14.93035507 -28.77564049]
[-4.79650211 -17.71648216]
[5.33735085 -6.65732145]
[15.47120380 4.40183878]
[25.84390068 15.23729801]
[36.45050049 25.84390068]
[47.05710220 36.45050049]
[57.66370392 47.05710220]
[68.27030945 57.66370392]
[78.87690735 68.27030945]
[87.07472992 64.14060974]
[96.02210236 62.09043884]
[105.20016479 62.23868561]
[114.07665253 64.57675934]
[122.13682556 68.96905518]
[128.91325378 75.16088104]
[134.01298523 82.79315186]
[137.14024353 91.42326355]
[138.11370850 100.55075836]
[136.87692261 109.64630890]
[133.50158691 118.18245697]
[128.18347168 125.66418457]
[121.23095703 131.65762329]
[126.97120667 145.51580811]
[132.71145630 159.37400818]
[138.45170593 173.23219299]
[144.19195557 187.09039307]
[159.39285278 187.05540466]
[173.44813538 192.84481812]
[184.21449280 203.57582092]
[190.05009460 217.61198425]
[190.06509399 232.81291199]
[184.25718689 246.86056519]
[173.51203918 257.61279297]
[159.46821594 263.42993164]
[144.26727295 263.42492676]
[130.22726440 257.59854126]
[119.48919678 246.83926392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
