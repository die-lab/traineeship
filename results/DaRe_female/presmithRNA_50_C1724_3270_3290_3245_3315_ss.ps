%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Feb 10 10:47:47 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAACUAGUAAAAGAUAAACCUCUACCUUCGGUUGGGGCGACCACGGAGUAAAAAACAACCUCCAAGCG\
) } def
/len { sequence length } bind def

/coor [
[121.22310638 179.79466248]
[110.13726044 181.94416809]
[98.86180115 182.56097412]
[87.60763550 181.63356018]
[76.58525085 179.17929077]
[66.00081635 175.24403381]
[56.05230331 169.90142822]
[46.92578888 163.25138855]
[38.79196930 155.41828918]
[31.80298424 146.54864502]
[26.08955574 136.80836487]
[21.75854492 126.37961578]
[18.89096069 115.45746613]
[17.54043770 104.24620056]
[17.73223686 92.95552063]
[19.46277046 81.79659271]
[22.69966888 70.97814178]
[27.38239098 60.70251083]
[33.42335129 51.16190338]
[40.70956039 42.53476334]
[49.10473633 34.98245239]
[58.45185471 28.64622498]
[52.11257935 15.05160809]
[45.77330780 1.45699155]
[39.43403244 -12.13762569]
[26.58945274 -21.37490463]
[28.22304916 -36.17965317]
[21.88377571 -49.77427292]
[15.54450226 -63.36888885]
[3.37075067 -75.16872406]
[11.33941460 -90.13323975]
[27.92505646 -86.61858368]
[29.13911819 -69.70816040]
[35.47839355 -56.11354446]
[41.81766510 -42.51892853]
[54.20882034 -34.25402832]
[53.02864838 -18.47690010]
[59.36792374 -4.88228226]
[65.70719910 8.71233463]
[72.04647064 22.30695152]
[93.03145599 17.72576904]
[114.48801422 18.71219635]
[134.96415710 25.19948006]
[153.07421875 36.74861526]
[167.59266663 52.57806015]
[177.53704834 71.61660767]
[182.23437500 92.57590485]
[181.36679077 114.03759766]
[195.85568237 117.91988373]
[210.34457397 121.80216980]
[224.83346558 125.68445587]
[235.16455078 114.39167023]
[249.56423950 109.20441437]
[264.72357178 111.31468201]
[277.15905762 120.23754883]
[284.01309204 133.92260742]
[283.71066284 149.22512817]
[276.32131958 162.62870789]
[263.54299927 171.05329895]
[248.31214905 172.56298828]
[234.12864685 166.81086731]
[224.25177002 155.11872864]
[220.95117188 140.17333984]
[206.46228027 136.29106140]
[191.97340393 132.40876770]
[177.48451233 128.52648926]
[172.86766052 138.83187866]
[166.88789368 148.41094971]
[159.65704346 157.08454895]
[151.31037903 164.69044495]
[142.00401306 171.08638000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 40]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[29 33]
[48 66]
[49 65]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
