%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCGAUCCUACAAAAUCUUAGUUAACAGCUAAGCGCCCAAGCCAGCGAGCAUCCAUCUACUUUUCCCG\
) } def
/len { sequence length } bind def

/coor [
[111.70543671 129.79295349]
[103.10179138 117.50566864]
[85.89549255 110.82276917]
[83.89362335 92.47309875]
[74.25180817 80.98242950]
[64.61000061 69.49176788]
[54.96818161 58.00109863]
[41.55518723 64.84927368]
[26.96155548 68.53902435]
[11.91998577 68.88843536]
[-2.81507444 65.88318634]
[-16.50526810 59.67715073]
[-28.46532440 50.58450699]
[-38.09736252 39.06383896]
[-44.92078018 25.69499016]
[-48.59622955 11.14991188]
[-48.94249344 -3.84113884]
[-45.94542313 -18.52624893]
[-39.75848007 -32.16956329]
[-30.69488144 -44.08816528]
[-40.33669662 -55.57883072]
[-49.97850800 -67.06949615]
[-59.62032318 -78.56016541]
[-69.26213837 -90.05083466]
[-78.90395355 -101.54149628]
[-88.54576874 -113.03216553]
[-103.35872650 -121.27913666]
[-99.53469086 -137.79618835]
[-82.60453033 -138.69396973]
[-77.05509949 -122.67398071]
[-67.41328430 -111.18331146]
[-57.77147293 -99.69264984]
[-48.12965775 -88.20198059]
[-38.48784256 -76.71131134]
[-28.84602928 -65.22064972]
[-19.20421410 -53.72998047]
[-5.89280510 -60.58623886]
[8.61758900 -64.31005096]
[23.60003471 -64.71154785]
[38.30320740 -61.76737595]
[51.98907852 -55.62203598]
[63.96995163 -46.58080673]
[73.64301300 -35.09455872]
[80.52067566 -21.73727989]
[84.25514984 -7.17740536]
[84.65602112 7.85565233]
[81.69998169 22.60803223]
[75.53212738 36.33923340]
[66.45884705 48.35928345]
[76.10066223 59.84995270]
[85.74247742 71.34061432]
[95.38429260 82.83128357]
[105.70763397 83.16276550]
[114.10450745 89.17723083]
[117.74076080 98.84464264]
[115.38906860 108.90202332]
[123.99272156 121.18930054]
[138.72383118 117.53437042]
[153.78001404 119.45161438]
[167.12503052 126.68175507]
[176.95408630 138.24697876]
[181.93786621 152.58316040]
[181.40237427 167.75148010]
[175.42001343 181.70051575]
[164.79986572 192.54380798]
[150.97821045 198.81486511]
[135.82431030 199.66558838]
[121.38760376 194.98091125]
[109.62055206 185.39442444]
[102.11453247 172.20260620]
[99.88468933 157.18952942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[4 52]
[5 51]
[6 50]
[7 49]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
