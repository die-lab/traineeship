%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCACAAACAUAACUCAAGAACCGUGCCCGAAUGCUAAGGGGUCACUUUGAUGGAGUGAACCAUAGG\
) } def
/len { sequence length } bind def

/coor [
[106.82053375 215.29664612]
[95.85991669 225.53700256]
[83.21578217 233.60705566]
[69.31210327 239.23623657]
[54.61507416 242.23577881]
[39.61749268 242.50511169]
[24.82223701 240.03520203]
[10.72540569 234.90885925]
[-2.20032930 227.29798889]
[-13.52155876 217.45777893]
[-22.85867500 205.71818542]
[-29.89859962 192.47282410]
[-34.40528107 178.16583252]
[-36.22760391 163.27694702]
[-35.30446625 148.30537415]
[-31.66682053 133.75314331]
[-25.43664169 120.10818481]
[-16.82283020 107.82802582]
[-6.11421204 97.32443237]
[6.33014631 88.94959259]
[20.09297752 82.98432159]
[34.71280670 79.62863159]
[49.69942093 78.99505615]
[64.55030823 81.10482025]
[78.76750946 85.88719940]
[91.87487030 93.18220520]
[90.56753540 78.23928833]
[77.02684021 67.40553284]
[75.38626099 50.47706985]
[86.16374207 37.75400162]
[84.20584869 22.88232994]
[71.51646423 13.46133804]
[69.28804016 -2.18505740]
[78.84266663 -14.77412796]
[94.51174927 -16.83700180]
[106.99909210 -7.14981222]
[108.89619446 8.54020309]
[99.07752228 20.92443657]
[101.03540802 35.79610825]
[112.39099121 42.26018524]
[117.94319916 54.30512619]
[115.40874481 67.52388763]
[105.51045227 76.93195343]
[106.81779480 91.87487030]
[117.19049072 102.71032715]
[132.06216431 104.66822052]
[146.93383789 106.62611389]
[161.84468079 108.25911713]
[176.78759766 109.56645203]
[191.73051453 110.87379456]
[206.67344666 112.18112946]
[221.61636353 113.48846436]
[236.55928040 114.79579926]
[252.86511230 110.15293884]
[261.84042358 124.53626251]
[250.50382996 137.14251709]
[235.25193787 129.73872375]
[220.30902100 128.43138123]
[205.36610413 127.12404633]
[190.42318726 125.81671143]
[175.48027039 124.50937653]
[160.53733826 123.20204163]
[153.37777710 125.83973694]
[144.97593689 121.49778748]
[130.10426331 119.53989410]
[115.23259735 117.58200073]
[121.94867706 130.99446106]
[126.10647583 145.40670776]
[127.56657410 160.33547974]
[126.28001404 175.28019714]
[122.28993225 189.73977661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 44]
[27 43]
[30 39]
[31 38]
[45 66]
[46 65]
[47 64]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
