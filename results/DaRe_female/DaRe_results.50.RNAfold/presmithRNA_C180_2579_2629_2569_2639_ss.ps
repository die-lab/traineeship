%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCAGGAGAAUAAAGAUCAUAAUUUACAAAACACGUUGUCGUAGUGGGCCUGGAAGCAGCCACCUAAAA\
) } def
/len { sequence length } bind def

/coor [
[89.38713837 223.96160889]
[89.38713837 208.96160889]
[89.38713837 193.96160889]
[89.38713837 178.96160889]
[86.13548279 172.05918884]
[89.72864532 163.31089783]
[90.38293457 148.32516479]
[91.03722382 133.33944702]
[82.72360229 129.88940430]
[75.58439636 124.40754700]
[70.10489655 117.26652527]
[66.65759277 108.95176697]
[65.47682953 100.02849579]
[50.83238983 96.78189850]
[36.18795013 93.53530884]
[21.54350853 90.28871155]
[10.01157665 100.67110443]
[-5.42405367 102.25885773]
[-18.82806587 94.44143677]
[-25.04634666 80.22480011]
[-21.68783569 65.07554626]
[-10.04395294 54.81885910]
[5.40799284 53.39865112]
[18.72641373 61.36101913]
[24.79010391 75.64427185]
[39.43454361 78.89086151]
[54.07898331 82.13745880]
[68.72342682 85.38405609]
[73.46916199 76.60955811]
[80.67668915 69.37014771]
[89.85072327 64.35476685]
[100.30427551 62.09297562]
[111.20973206 62.90209961]
[121.66437531 66.85069275]
[128.00364685 53.25607681]
[134.34292603 39.66145706]
[126.01872253 26.67256927]
[126.06113434 11.24526405]
[134.45661926 -1.69766021]
[148.52622986 -8.02616310]
[163.78036499 -5.72084332]
[175.35153198 4.48268127]
[179.54737854 19.32850266]
[175.02903748 34.07937241]
[163.23829651 44.02834320]
[147.93754578 46.00073242]
[141.59826660 59.59534836]
[135.25898743 73.18996429]
[142.18522644 86.49512482]
[156.95733643 89.09985352]
[171.72944641 91.70457458]
[181.04808044 90.09006500]
[187.08309937 94.75860596]
[201.72753906 98.00519562]
[217.19647217 92.56052399]
[229.46833801 103.43862915]
[225.91891479 119.44905090]
[210.19953918 124.12164307]
[198.48095703 112.64963531]
[183.83651733 109.40304565]
[169.12472534 106.47669220]
[154.35261536 103.87197113]
[139.58050537 101.26724243]
[128.01628113 124.26269531]
[106.02294922 133.99374390]
[105.36865234 148.97946167]
[104.71436310 163.96517944]
[104.38713837 178.96160889]
[104.38713837 193.96160889]
[104.38713837 208.96160889]
[104.38713837 223.96160889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[6 67]
[7 66]
[8 65]
[13 28]
[14 27]
[15 26]
[16 25]
[34 48]
[35 47]
[36 46]
[49 63]
[50 62]
[51 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
