%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGACAUUAUCCAAGACGUGGCUGAACAGUUAAGCAUCUCACUUACACCGAGAAAACAUCCGUGCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[93.20993805 119.76000977]
[83.56812286 131.25067139]
[73.92631531 142.74133301]
[64.28450012 154.23200989]
[54.64268494 165.72267151]
[54.60290146 181.76567078]
[41.94612122 191.62394714]
[26.38154221 187.73506165]
[19.84897614 173.08224487]
[27.35964966 158.90586853]
[43.15201569 156.08085632]
[52.79383087 144.59019470]
[62.43564606 133.09953308]
[72.07746124 121.60885620]
[81.71927643 110.11819458]
[82.04649353 95.12176514]
[72.91507721 83.22146606]
[58.37564850 76.98322296]
[56.76618958 62.17582703]
[47.63476944 50.27552414]
[38.50334930 38.37522507]
[30.54219627 33.26999664]
[29.24672318 25.75078201]
[20.64307594 13.46350098]
[5.23226786 14.17802525]
[-8.10696411 6.42764235]
[-15.11812019 -7.31452751]
[-13.56396580 -22.66340828]
[-3.94042587 -34.72122955]
[10.68166351 -39.64038086]
[25.63644600 -35.85118103]
[36.15190506 -24.56275177]
[38.87259674 -9.37718678]
[32.93035507 4.85985422]
[41.53400421 17.14713478]
[50.40364838 29.24380493]
[59.53506851 41.14410400]
[68.66648865 53.04440308]
[82.55277252 58.43145752]
[84.81537628 74.09004211]
[93.94680023 85.99034119]
[98.37545776 84.50496674]
[103.14178467 84.41504669]
[107.80770111 85.78624725]
[111.92727661 88.54735565]
[115.08924103 92.49180603]
[116.95774841 97.29243469]
[131.72985840 99.89716339]
[146.50198364 102.50188446]
[161.43606567 97.27850342]
[172.62641907 107.10832214]
[187.39852905 109.71305084]
[199.26051331 99.52347565]
[214.89755249 99.39423370]
[226.92634583 109.38635254]
[229.66723633 124.78186035]
[221.82606506 138.31146240]
[207.10519409 143.58689880]
[192.45538330 138.11726379]
[184.79380798 124.48516083]
[170.02168274 121.88043976]
[156.14421082 127.29013062]
[143.89726257 117.27400208]
[129.12513733 114.66927338]
[114.35302734 112.06455231]
[127.61000824 119.08255005]
[133.79716492 132.74707031]
[130.32525635 147.33973694]
[118.64723206 156.75375366]
[103.65015411 157.04949951]
[91.61004639 148.10322571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[16 41]
[17 40]
[19 38]
[20 37]
[21 36]
[23 35]
[24 34]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
