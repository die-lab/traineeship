%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUAAAAGUGAUUAAACUAGUAAAAGAUAAACCUCUACCUUCGGUUGGGGCGACCACGGAGUAAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[105.16652679 159.42022705]
[96.03530884 159.51251221]
[86.99703217 158.20979309]
[78.26354218 155.54263306]
[70.03955841 151.57353210]
[62.51785660 146.39553833]
[55.87474442 140.13002014]
[50.26593781 132.92385864]
[45.82290649 124.94593811]
[31.51715469 129.45652771]
[17.21139908 133.96711731]
[10.13702297 148.09965515]
[-4.88470697 153.01118469]
[-18.94166374 145.78779602]
[-23.69410515 130.71496582]
[-16.32249260 116.73516846]
[-1.20027053 112.14235687]
[12.70081234 119.66136169]
[27.00656700 115.15077209]
[41.31232071 110.64018250]
[40.35800552 99.46182251]
[41.51388550 88.30249786]
[44.73906708 77.55704498]
[49.91943741 67.60564423]
[56.87170792 58.80039215]
[65.34990692 51.45282364]
[75.05406189 45.82290649]
[70.54347229 31.51715469]
[66.03288269 17.21139908]
[51.90034485 10.13702297]
[46.98880768 -4.88470697]
[54.21220779 -18.94166374]
[69.28502655 -23.69410515]
[83.26483154 -16.32249260]
[87.85764313 -1.20027053]
[80.33863831 12.70081234]
[84.84922791 27.00656700]
[89.35981750 41.31232071]
[117.84399414 43.08735657]
[142.24269104 57.89284897]
[156.96969604 82.33900452]
[171.74182129 79.73428345]
[186.51393127 77.12956238]
[201.28604126 74.52484131]
[216.05816650 71.92011261]
[221.77301025 67.65900421]
[227.84533691 67.24630737]
[232.22721863 69.79141998]
[247.17013550 68.48408508]
[262.11306763 67.17674255]
[273.48532104 55.86075974]
[289.40585327 57.83960342]
[297.66180420 71.59528351]
[291.91992188 86.57561493]
[276.58486938 91.28897095]
[263.42041016 82.11966705]
[248.47747803 83.42700195]
[233.53456116 84.73433685]
[218.66288757 86.69223022]
[203.89076233 89.29695129]
[189.11865234 91.90167999]
[174.34654236 94.50640106]
[159.57441711 97.11112213]
[159.31719971 106.23918152]
[157.66957092 115.22099304]
[154.67015076 123.84601593]
[150.38923645 131.91209412]
[144.92720032 139.23013306]
[138.41206360 145.62861633]
[130.99653625 150.95755005]
[122.85444641 155.09202576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 20]
[10 19]
[11 18]
[27 38]
[28 37]
[29 36]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
