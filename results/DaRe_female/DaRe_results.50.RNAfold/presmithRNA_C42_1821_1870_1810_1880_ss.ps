%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAGCAGAGUGUCUCUUUGAACCCGGCUCUAAGGCGCGUACACACCGCCCGUCACUCCCUCCGGUCAA\
) } def
/len { sequence length } bind def

/coor [
[55.76164246 150.45765686]
[44.27097321 160.09947205]
[32.78030777 169.74128723]
[21.28964043 179.38310242]
[9.79897499 189.02491760]
[4.20087004 203.82261658]
[-10.52222633 206.07643127]
[-22.01289368 215.71824646]
[-30.25986099 230.53120422]
[-46.77691650 226.70716858]
[-47.67469788 209.77700806]
[-31.65470695 204.22758484]
[-20.16404152 194.58576965]
[-15.38782597 180.47772217]
[0.15716040 177.53425598]
[11.64782715 167.89244080]
[23.13849449 158.25062561]
[34.62916183 148.60881042]
[46.11982727 138.96699524]
[57.39742279 129.07681274]
[68.45658112 118.94295502]
[79.51574707 108.80910492]
[90.57490540 98.67524719]
[92.04624939 93.28118896]
[96.57715607 89.22482300]
[103.06800079 88.19229889]
[114.96829987 79.06087494]
[126.86860657 69.92945099]
[138.76890564 60.79803085]
[134.51402283 45.44691467]
[136.40721130 29.66832161]
[144.13568115 15.82603550]
[156.51467896 5.98266506]
[171.66896057 1.59232247]
[187.31689453 3.28586268]
[201.11398315 10.78041172]
[212.60466003 1.13859737]
[224.09532166 -8.50321674]
[235.58598328 -18.14503098]
[241.18409729 -32.94272614]
[255.90718079 -35.19654465]
[267.39785767 -44.83835602]
[267.21691895 -60.47489548]
[277.16921997 -72.53664398]
[292.55557251 -75.32841492]
[306.11102295 -67.53201294]
[311.43508911 -52.82867432]
[306.01394653 -38.16085434]
[292.40722656 -30.45425224]
[277.03967285 -33.34769058]
[265.54901123 -23.70587730]
[260.77279663 -9.59782791]
[245.22779846 -6.65436411]
[233.73713684 2.98744988]
[222.24647522 12.62926388]
[210.75579834 22.27107811]
[215.51292419 35.64247894]
[215.36819458 49.86430359]
[210.31857300 63.19250488]
[200.96377563 73.98545837]
[188.43516541 80.90615845]
[174.25891113 83.08780670]
[160.17007446 80.24235535]
[147.90032959 72.69833374]
[136.00003052 81.82975006]
[124.09972382 90.96117401]
[112.19942474 100.09259796]
[100.70875549 109.73441315]
[89.64959717 119.86826324]
[78.59043884 130.00212097]
[67.53128052 140.13597107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[7 13]
[8 12]
[20 71]
[21 70]
[22 69]
[23 68]
[26 67]
[27 66]
[28 65]
[29 64]
[36 56]
[37 55]
[38 54]
[39 53]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
