%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCUCAUAGCCUUUCUAGUAUAACCAGUAUAAAUGACUUCCAAUCAUUUGGUCUUGGUGAAAAAUCCAG\
) } def
/len { sequence length } bind def

/coor [
[7.45203543 244.82916260]
[-2.18977880 256.31982422]
[-11.83159256 267.81048584]
[-21.47340775 279.30114746]
[-31.11522102 290.79183960]
[-40.75703430 302.28250122]
[-46.30646896 318.30249023]
[-63.23662949 317.40469360]
[-67.06066132 300.88763428]
[-52.24770355 292.64068604]
[-42.60588837 281.15002441]
[-32.96407318 269.65936279]
[-23.32225990 258.16867065]
[-13.68044567 246.67800903]
[-4.03863144 235.18734741]
[-13.38604259 221.83456421]
[-18.74836731 206.42871094]
[-19.71363068 190.13186646]
[-16.20180893 174.17535400]
[-8.47142220 159.76669312]
[2.89949346 147.99829102]
[17.05659676 139.76449585]
[32.93342972 135.69378662]
[49.33176041 136.10067749]
[65.01199341 140.96147156]
[73.07149506 128.31059265]
[81.13098907 115.65972900]
[89.19048309 103.00885773]
[96.97207642 90.18518066]
[93.10368347 75.09632874]
[100.89479828 62.02907944]
[115.30355072 58.43413925]
[122.80355072 45.44375992]
[130.30354309 32.45338058]
[137.80354309 19.46299744]
[145.30354309 6.47261667]
[152.80354309 -6.51776457]
[160.30354309 -19.50814629]
[154.78552246 -34.13980103]
[160.01225281 -48.87802505]
[173.51586914 -56.76387405]
[188.92034912 -54.07389450]
[198.95217896 -42.07821274]
[198.87463379 -26.44082069]
[188.72433472 -14.54521942]
[173.29393005 -12.00814533]
[165.79393005 0.98223555]
[158.29393005 13.97261620]
[150.79393005 26.96299744]
[143.29393005 39.95338058]
[135.79393005 52.94375992]
[128.29393005 65.93414307]
[132.38499451 80.20995331]
[124.96398163 93.49088287]
[109.96245575 97.68518066]
[108.91817474 105.95599365]
[101.84135437 111.06835175]
[93.78186035 123.71922302]
[85.72236633 136.37008667]
[77.66287231 149.02096558]
[87.18728638 159.06341553]
[94.13985443 171.02142334]
[98.15045929 184.25071716]
[99.00738525 198.03955078]
[96.66847992 211.64701843]
[91.26319122 224.34283447]
[83.08544922 235.44656372]
[72.57763672 244.36405945]
[60.30670166 250.61929321]
[46.93354034 253.87971497]
[33.17741776 253.97393799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[25 60]
[26 59]
[27 58]
[28 57]
[29 55]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
