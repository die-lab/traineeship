%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUCGAACCCAUGCCCAAGAGAUCAAAACUCUUAGUGCUUCCACUACACCACUUUCUAGGAUGAGGUC\
) } def
/len { sequence length } bind def

/coor [
[97.19079590 135.42861938]
[84.80211639 132.12635803]
[75.67070007 144.02665710]
[66.53927612 155.92695618]
[68.85037994 171.56135559]
[59.36243820 184.20075989]
[43.70447922 186.34643555]
[31.16609573 176.72540283]
[29.18608284 161.04563904]
[38.93915176 148.60966492]
[54.63897705 146.79554749]
[63.77039719 134.89524841]
[72.90181732 122.99494171]
[65.43334961 108.25985718]
[65.43334961 91.74014282]
[72.90181732 77.00505829]
[63.77039719 65.10475922]
[54.38154602 53.40649033]
[39.58384705 47.80838776]
[37.33003235 33.08528900]
[27.68821716 21.59462357]
[18.04640388 10.10395718]
[8.40458965 -1.38670957]
[-1.23722458 -12.87737656]
[-16.87376022 -12.69644451]
[-28.93550873 -22.64874458]
[-31.72727776 -38.03510284]
[-23.93088150 -51.59055328]
[-9.22754002 -56.91462708]
[5.44027948 -51.49345398]
[13.14688110 -37.88675308]
[10.25344181 -22.51918983]
[19.89525604 -11.02852345]
[29.53707123 0.46214291]
[39.17888641 11.95280933]
[48.82069778 23.44347572]
[62.92874908 28.21969223]
[65.87220764 43.76467896]
[72.79991913 46.96212387]
[75.67070007 55.97333908]
[84.80211639 67.87363434]
[99.57180023 64.46276093]
[114.41938782 67.51676941]
[126.64381409 76.48009491]
[134.02122498 89.72212219]
[135.20954895 104.83389282]
[149.30493164 109.96419525]
[163.40032959 115.09449768]
[179.01455688 112.54375458]
[188.32797241 124.16741943]
[202.42335510 129.29771423]
[216.62730408 134.11930847]
[230.93305969 138.62989807]
[243.32600403 129.29208374]
[258.84127808 129.05567932]
[271.51293945 138.01159668]
[276.46850586 152.71607971]
[271.80242920 167.51498413]
[259.30892944 176.71780396]
[243.79200745 176.78588867]
[231.21823120 167.69303894]
[226.42248535 152.93565369]
[212.11672974 148.42506409]
[204.55596924 149.45062256]
[197.29306030 143.39311218]
[183.19766235 138.26280212]
[168.59162903 141.18051147]
[158.27001953 129.18988037]
[144.17463684 124.05958557]
[130.07923889 118.92928314]
[121.40504456 128.37080383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[16 41]
[17 40]
[18 38]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
