%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAGCCAUAAACAAAGACAUUUAAUCACAACAAUGUUCGCCCGGACACUACAAGCAUAAGCUUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[142.76585388 230.53840637]
[137.63555908 216.44300842]
[132.50524902 202.34762573]
[127.37494659 188.25222778]
[122.24464417 174.15684509]
[116.80807495 160.17672729]
[111.06782532 146.31852722]
[85.92792511 145.49592590]
[64.71379852 131.98104858]
[53.34368896 109.54420471]
[38.35796356 110.19849396]
[23.37224197 110.85278320]
[8.38651848 111.50707245]
[-0.06531157 124.52038574]
[-14.56404591 130.04907227]
[-29.53462601 125.96723175]
[-39.22055817 113.84442902]
[-39.89740372 98.34212494]
[-31.30490112 85.42126465]
[-16.74704361 80.05019379]
[-1.82162523 84.29418945]
[7.73222733 96.52135468]
[22.71795082 95.86706543]
[37.70367432 95.21276855]
[52.68939590 94.55847931]
[54.28637314 86.65205383]
[57.19478989 79.12855530]
[61.33121109 72.20381165]
[66.57696533 66.07649994]
[72.78156281 60.92238617]
[79.76701355 56.88933563]
[87.33290100 54.09305191]
[95.26219177 52.61375427]
[103.32740021 52.49387741]
[111.29714966 53.73686600]
[118.94281006 56.30705643]
[127.00230408 43.65618515]
[135.06179810 31.00531387]
[143.12129211 18.35444069]
[151.18078613 5.70356941]
[151.35514832 -10.69465065]
[165.77444458 -18.50591087]
[179.60534668 -9.69465542]
[178.61979675 6.67485142]
[163.83164978 13.76306343]
[155.77215576 26.41393471]
[147.71266174 39.06480789]
[139.65316772 51.71567917]
[131.59367371 64.36655426]
[139.86218262 73.94411469]
[145.31671143 85.36103821]
[147.57218933 97.81137085]
[146.46940613 110.41620636]
[142.08621216 122.28572845]
[134.73204041 132.58203125]
[124.92601776 140.57827759]
[130.66627502 154.43647766]
[137.03482056 161.42823792]
[136.34004211 169.02653503]
[141.47033691 183.12193298]
[146.60063171 197.21731567]
[151.73094177 211.31271362]
[156.86123657 225.40809631]
[171.93186951 228.70652771]
[182.81063843 239.64527893]
[186.02615356 254.73381042]
[180.55238342 269.15744019]
[168.13595581 278.31365967]
[152.73893738 279.28070068]
[139.27444458 271.75006104]
[132.03894043 258.12466431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 57]
[7 56]
[10 25]
[11 24]
[12 23]
[13 22]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
