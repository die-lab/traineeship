%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACUCACCGAGGAAGAGUAGGAAAACAGUAAAUGCUGCUAAUAUUUACCAACCAUGGUUAAACUCCA\
) } def
/len { sequence length } bind def

/coor [
[50.32165909 185.63848877]
[38.81713486 183.13742065]
[28.21053314 193.74403381]
[17.60393143 204.35063171]
[6.99732876 214.95722961]
[8.54038525 230.51849365]
[-0.32279170 243.40174866]
[-15.40728188 247.52391052]
[-29.59065056 240.93861389]
[-36.17594147 226.75524902]
[-32.05378723 211.67074585]
[-19.17053795 202.80757141]
[-3.60927272 204.35063171]
[6.99732876 193.74403381]
[17.60393143 183.13742065]
[28.21053314 172.53082275]
[26.91382408 154.50737000]
[39.17618942 140.81477356]
[57.85398865 140.09930420]
[67.49580383 128.60864258]
[77.13761902 117.11797333]
[86.77943420 105.62730408]
[75.15963745 115.11310577]
[60.17530823 115.79853821]
[47.73803329 107.41317749]
[42.75455093 93.26521301]
[47.19093323 78.93627930]
[59.29695129 70.07939148]
[74.29655457 70.18877411]
[86.27220154 79.22137451]
[85.61790466 64.23565674]
[84.96361542 49.24993134]
[84.30932617 34.26420593]
[75.04652405 20.73156166]
[82.37776947 6.06238079]
[98.76130676 5.34706020]
[107.34316254 19.32146072]
[99.29505157 33.60991669]
[99.94934082 48.59563828]
[100.60363007 63.58136368]
[101.25791931 78.56708527]
[104.80149841 63.99166107]
[117.20410156 55.55510330]
[132.06224060 57.61322784]
[141.70460510 69.10342407]
[141.15286255 84.09326935]
[130.69183350 94.84348297]
[115.72064209 95.80308533]
[130.36508179 99.04968262]
[145.51280212 94.48268890]
[156.26371765 104.79126740]
[170.90815735 108.03786469]
[185.55259705 111.28446198]
[200.19703674 114.53105164]
[215.66596985 109.08638000]
[227.93783569 119.96447754]
[224.38841248 135.97489929]
[208.66903687 140.64749146]
[196.95045471 129.17549133]
[182.30601501 125.92890167]
[167.66156006 122.68230438]
[153.01712036 119.43570709]
[138.91688538 124.23491669]
[127.11849213 113.69412231]
[112.47405243 110.44752502]
[98.27009583 115.26911926]
[88.62828064 126.75978851]
[78.98646545 138.25045776]
[69.34465790 149.74111938]
[72.73219299 161.52467346]
[69.89083862 173.32637024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[19 69]
[20 68]
[21 67]
[22 66]
[30 41]
[31 40]
[32 39]
[33 38]
[48 65]
[49 64]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
