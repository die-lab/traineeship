%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Feb 10 10:25:29 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAGGUACAAGAUUUAAUUUACAUCAAGCAAACCAAUAAAAGUGAUUAAACUAGUAAAAGAUAAACCUCUACCUUCGGUUGGGGCGACCACGGAGUAAAAAACAACCUCCAAGCGGAACGGGCACAGCCCUAAAACCAAGAGAAACAUCUCUAAGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[70.06105804 234.01824951]
[59.16490936 222.57055664]
[59.63842010 206.77337646]
[71.20066833 195.99885559]
[71.49153900 181.00167847]
[71.78240204 166.00450134]
[72.07327271 151.00732422]
[59.95514297 142.16702271]
[45.76292038 147.02304077]
[35.21073914 158.81124878]
[20.66402626 155.61087036]
[6.47180414 160.46687317]
[-0.67707348 166.23355103]
[-8.04295444 165.27655029]
[-22.32667351 169.85643005]
[-36.61038971 174.43632507]
[-50.89410782 179.01622009]
[-65.17782593 183.59609985]
[-79.46154785 188.17599487]
[-93.74526215 192.75588989]
[-101.00462341 198.38284302]
[-108.35056305 197.28318787]
[-122.72040558 201.58523560]
[-122.83021545 216.70077515]
[-127.39212036 231.11189270]
[-136.00047302 243.53717041]
[-147.88983154 252.87176514]
[-162.00299072 258.28564453]
[-177.08502197 259.29742432]
[-191.79484558 255.81712341]
[-204.82446289 248.15420532]
[-215.01530457 236.99006653]
[-221.46121216 223.31739807]
[-223.58898926 208.35197449]
[-221.20947266 193.42449951]
[-214.53421021 179.86233521]
[-204.15679932 168.87139893]
[-190.99995422 161.42901611]
[-176.23361206 158.19694519]
[-161.17076111 159.46258545]
[-147.15077209 165.11338806]
[-135.42031860 174.64689636]
[-127.02245331 187.21539307]
[-112.65261078 182.91334534]
[-98.32515717 178.47216797]
[-84.04143524 173.89227295]
[-69.75772095 169.31239319]
[-55.47399902 164.73249817]
[-41.19028091 160.15260315]
[-26.90656281 155.57272339]
[-12.62284470 150.99282837]
[1.61579490 146.27465820]
[15.80801678 141.41864014]
[25.34507561 129.97776794]
[40.90690994 132.83081055]
[55.09913254 127.97480011]
[51.49968719 120.23818970]
[49.21162415 112.07628632]
[48.27746964 103.70811462]
[48.70365906 95.35521698]
[50.46085739 87.23583221]
[53.48519516 79.55912018]
[57.68040848 72.51985931]
[62.92079926 66.29344177]
[69.05494690 61.03155518]
[75.91004181 56.85847855]
[83.29673767 53.86820984]
[80.40605927 39.14937973]
[77.51537323 24.43054962]
[74.62468719 9.71171951]
[64.37296295 -2.33870053]
[69.51252747 -16.31847572]
[66.62184143 -31.03730583]
[63.73115921 -45.75613403]
[54.74575806 -60.13316345]
[66.07352448 -72.74736786]
[81.33059692 -65.35425568]
[78.44998932 -48.64682007]
[81.34066772 -33.92798996]
[84.23135376 -19.20915985]
[94.27632141 -8.21152973]
[89.34352112 6.82103539]
[92.23419952 21.53986549]
[95.12488556 36.25869370]
[98.01557159 50.97752380]
[107.07012939 51.44946671]
[115.88323975 53.57948685]
[124.15390015 57.29484558]
[131.59967041 62.46865845]
[142.90121460 52.60583496]
[148.21131897 37.70236969]
[162.88793945 35.16347504]
[173.99610901 25.08335686]
[184.90670776 14.78973293]
[195.81730652 4.49610806]
[206.72792053 -5.79751635]
[202.54002380 -20.51893425]
[205.68455505 -35.49793625]
[215.43893433 -47.29245377]
[229.56167603 -53.19219589]
[244.80746460 -51.84144592]
[257.67294312 -43.55059433]
[265.20169067 -30.22481918]
[265.66369629 -14.92628479]
[258.95278931 -1.17048359]
[246.61103821 7.88160229]
[231.47454834 10.14986992]
[217.02154541 5.11308813]
[206.11093140 15.40671253]
[195.20033264 25.70033646]
[184.28971863 35.99396133]
[183.26033020 40.70347595]
[179.23109436 44.79878616]
[172.75076294 46.46501541]
[168.24902344 60.66302490]
[152.76403809 63.90737534]
[141.46249390 73.77019501]
[146.73680115 79.52876282]
[151.18147278 86.29570770]
[154.61082458 93.94610596]
[156.85887146 102.32186890]
[171.63098145 104.92658997]
[186.40309143 107.53131866]
[201.17521667 110.13603973]
[217.82365417 106.93199158]
[225.51123047 122.04283142]
[213.11904907 133.61306763]
[198.57049561 124.90815735]
[183.79837036 122.30342865]
[169.02626038 119.69870758]
[154.25413513 117.09398651]
[150.19377136 123.39981079]
[162.80541992 131.52053833]
[175.41706848 139.64128113]
[188.02859497 147.76220703]
[179.90747070 160.37359619]
[167.29634094 152.25292969]
[154.68469238 144.13218689]
[142.07304382 136.01145935]
[138.01268005 142.31729126]
[146.49678040 154.68740845]
[154.98088074 167.05754089]
[163.46498108 179.42765808]
[171.94909668 191.79779053]
[186.96922302 198.38014221]
[188.50962830 214.70678711]
[174.98565674 223.98225403]
[160.30963135 216.66474915]
[159.57896423 200.28189087]
[151.09486389 187.91175842]
[142.61076355 175.54164124]
[134.12664795 163.17150879]
[125.64255524 150.80139160]
[112.63291168 154.11672974]
[99.52345276 154.23501587]
[87.07045746 151.29818726]
[86.77958679 166.29536438]
[86.48871613 181.29255676]
[86.19784546 196.28973389]
[97.33361053 207.50447083]
[97.19422150 223.30813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 159]
[5 158]
[6 157]
[7 156]
[8 56]
[9 55]
[11 53]
[12 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[22 44]
[23 43]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
[89 117]
[90 116]
[92 114]
[93 111]
[94 110]
[95 109]
[96 108]
[121 131]
[122 130]
[123 129]
[124 128]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
