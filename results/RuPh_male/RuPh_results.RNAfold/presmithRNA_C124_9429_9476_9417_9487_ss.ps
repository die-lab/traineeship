%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar 25 17:24:30 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAUAAGGUAGUUUAUGAAAAUAUAAGAUUGUCAAUCUUAAGAUGUCUAGAGGACGCUUAUUUAGAUAG\
) } def
/len { sequence length } bind def

/coor [
[102.92643738 262.06466675]
[106.87835693 247.15205383]
[118.28068542 236.76020813]
[115.67596436 221.98809814]
[113.07124329 207.21598816]
[110.46651459 192.44386292]
[107.86179352 177.67175293]
[105.25707245 162.89962769]
[102.65235138 148.12751770]
[99.72599792 133.41574097]
[96.47940063 118.77130127]
[84.31577301 110.89776611]
[81.17967224 96.75170898]
[88.87615967 84.47529602]
[85.62956238 69.83085632]
[82.38297272 55.18641663]
[79.13637543 40.54197693]
[74.07868958 32.55054092]
[76.08234406 25.18832397]
[73.47762299 10.41620827]
[58.84521484 6.21454334]
[47.53421021 -3.88239503]
[41.75241089 -17.83198166]
[42.59712219 -32.84688950]
[49.84732437 -45.95200348]
[62.01810837 -54.57392120]
[59.41338730 -69.34603882]
[56.80866241 -84.11815643]
[54.20394135 -98.89027405]
[51.59922028 -113.66239166]
[48.99449539 -128.43450928]
[46.38977432 -143.20661926]
[37.68485641 -157.75518799]
[49.25509644 -170.14735413]
[64.36593628 -162.45977783]
[61.16188812 -145.81134033]
[63.76661301 -131.03923035]
[66.37133789 -116.26711273]
[68.97605896 -101.49499512]
[71.58078003 -86.72287750]
[74.18550110 -71.95075989]
[76.79022217 -57.17864609]
[91.17589569 -53.23934555]
[102.47106934 -43.40428162]
[108.40023804 -29.58379173]
[107.73815918 -14.49797630]
[100.56265259 -1.14136660]
[88.24974060 7.81148577]
[90.85446167 22.58360291]
[93.78081512 37.29537964]
[97.02741241 51.93982315]
[100.27400208 66.58425903]
[103.52059937 81.22869873]
[115.68422699 89.10223389]
[118.82032776 103.24829102]
[111.12384033 115.52470398]
[114.37043762 130.16914368]
[119.42812347 138.16058350]
[117.42446899 145.52279663]
[120.02919006 160.29490662]
[122.63391113 175.06703186]
[125.23863220 189.83914185]
[127.84335327 204.61126709]
[130.44807434 219.38337708]
[133.05279541 234.15548706]
[147.32170105 240.02079773]
[156.13571167 252.68243408]
[156.68228149 268.10012817]
[148.78701782 281.35412598]
[134.96926880 288.21511841]
[119.63823700 286.49383545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 57]
[11 56]
[14 53]
[15 52]
[16 51]
[17 50]
[19 49]
[20 48]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
