%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGUAAGCAAGAUGGGCAUAGCCCAGAAAGUCAGGUCGAGGUGUAGCACAUGAAAUGGGAAGAAAUGG\
) } def
/len { sequence length } bind def

/coor [
[87.31187439 210.38056946]
[74.50998688 202.56317139]
[64.17966461 191.68730164]
[57.03086090 178.50039673]
[53.55486298 163.90870667]
[53.99055862 148.91503906]
[58.30800247 134.54980469]
[66.21048737 121.80027008]
[77.15491486 111.54261780]
[90.38715363 104.48254395]
[76.29176331 99.35224152]
[64.50912476 109.10501099]
[49.52575684 111.63395691]
[35.38230133 106.35863495]
[25.84217453 94.78962708]
[23.39025879 80.09766388]
[9.29486847 74.96736908]
[-4.80052042 69.83706665]
[-18.89591026 64.70676422]
[-32.99129868 59.57645798]
[-49.94318390 59.84085846]
[-54.88999939 43.62464905]
[-40.67694473 34.38206482]
[-27.86099625 45.48107147]
[-13.76560783 50.61137009]
[0.32978156 55.74167252]
[14.42517090 60.87197495]
[28.52055931 66.00228119]
[39.84264755 56.32364655]
[54.58722305 53.59354782]
[68.81265259 58.64365387]
[78.66500092 70.21205902]
[81.42206573 85.25685120]
[95.51745605 90.38715363]
[110.42829895 88.75415039]
[123.07917023 80.69465637]
[126.61511230 65.52445984]
[139.55970764 57.53120422]
[154.00038147 60.99567413]
[166.65126038 52.93618011]
[179.30212402 44.87668610]
[182.94847107 32.29170609]
[193.91178894 25.88609123]
[205.87684631 28.70412827]
[218.86723328 21.20412827]
[231.85762024 13.70412827]
[242.55152893 0.54827809]
[258.15362549 7.18237495]
[256.09786987 24.01122665]
[239.35762024 26.69450951]
[226.36723328 34.19450760]
[213.37684631 41.69450760]
[205.62669373 57.28762054]
[187.36161804 57.52755737]
[174.71075439 65.58705139]
[162.05987549 73.64654541]
[159.09686279 88.19838715]
[146.38188171 96.55207825]
[131.13867188 93.34552765]
[118.48779297 101.40502167]
[132.93641663 105.43460083]
[145.84129333 113.08078003]
[156.31556702 123.81807709]
[163.63938904 136.90859985]
[167.30943298 151.45269775]
[167.07350159 166.45083618]
[162.94778442 180.87229919]
[155.21582031 193.72596741]
[144.40899658 204.12849426]
[131.26998901 211.36495972]
[116.70177460 214.93806458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[35 60]
[36 59]
[39 56]
[40 55]
[41 54]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
