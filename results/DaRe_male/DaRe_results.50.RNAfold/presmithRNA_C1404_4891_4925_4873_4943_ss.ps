%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGCCCAAGAGAUCAAAACUCUUAGUGCUUCCACUACACCACUUUCUAGGAUGAGGUCAGCUAAUUAAG\
) } def
/len { sequence length } bind def

/coor [
[70.79567719 140.92535400]
[63.61262131 134.69488525]
[57.73108673 127.22343445]
[53.36145020 118.77824402]
[50.66001129 109.66137695]
[35.67428970 110.31566620]
[20.70640564 111.29671478]
[7.63309669 120.20733643]
[-5.72009468 113.60873413]
[-20.66301537 114.91606903]
[-35.60593414 116.22340393]
[-50.54885483 117.53073883]
[-65.49177551 118.83807373]
[-74.31231689 131.75054932]
[-89.38309479 135.92256165]
[-103.58815765 129.38418579]
[-110.22029877 115.22266388]
[-106.14803314 100.12463379]
[-93.29415894 91.21891022]
[-77.72787476 92.71051788]
[-66.79911041 103.89515686]
[-51.85619354 102.58782196]
[-36.91327286 101.28048706]
[-21.97035027 99.97314453]
[-7.02743053 98.66580963]
[4.97705984 89.84870148]
[19.39906883 96.35379028]
[25.99183655 92.51292419]
[35.01999664 95.32994080]
[50.00572205 94.67565155]
[57.43138123 73.24763489]
[73.51803589 57.26263809]
[94.99269867 49.97297287]
[117.48614502 52.86178589]
[136.42187500 65.34132385]
[148.70915222 56.73767471]
[160.99642944 48.13402939]
[167.86294556 33.88055038]
[182.72644043 32.91851044]
[195.01371765 24.31486511]
[207.11039734 15.44522095]
[219.01069641 6.31379938]
[218.46989441 -9.19384956]
[227.17544556 -22.03881264]
[241.77986145 -27.28194237]
[256.66748047 -22.90714455]
[266.11367798 -10.59662151]
[266.48620605 4.91598129]
[257.64181519 17.66575050]
[242.98138428 22.75014114]
[228.14212036 18.21409988]
[216.24180603 27.34552193]
[212.74522400 34.12716675]
[203.61737061 36.60214615]
[191.33009338 45.20579147]
[185.34245300 58.84387970]
[169.60008240 60.42131042]
[157.31280518 69.02495575]
[145.02551270 77.62860107]
[148.43231201 86.50602722]
[150.10676575 95.86611938]
[149.98895264 105.37406921]
[148.08311462 114.68979645]
[144.45741272 123.48009491]
[139.24153137 131.43054199]
[132.62203979 138.25675964]
[124.83569336 143.71458435]
[116.16101074 147.60881042]
[106.90827179 149.80012512]
[97.40843964 150.21015930]
[88.00129700 148.82424927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 27]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
