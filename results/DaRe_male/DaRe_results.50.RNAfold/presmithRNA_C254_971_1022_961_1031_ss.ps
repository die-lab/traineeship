%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAAAUAAAGCACGGCACUGAAGCUGCCAAGAUGGGCCCUAAUAAGCUCCGCAUGCACAAAGGCAUGGU\
) } def
/len { sequence length } bind def

/coor [
[114.31014252 161.28936768]
[105.50050354 162.69697571]
[96.58033752 162.84483337]
[87.72888184 161.72994995]
[79.12399292 159.37472534]
[70.93856049 155.82650757]
[63.33705521 151.15657043]
[56.47221375 145.45875549]
[50.48197174 138.84753418]
[45.48668671 131.45576477]
[41.58673096 123.43195343]
[38.86046600 114.93732452]
[37.36267090 106.14256287]
[37.12343597 97.22438812]
[38.14757538 88.36197662]
[23.84181976 83.85138702]
[9.53606510 79.34079742]
[-4.76968861 74.83021545]
[-18.67077255 82.34922028]
[-33.79299164 77.75640106]
[-41.16460800 63.77659988]
[-36.41216660 48.70378113]
[-22.35520935 41.48038101]
[-7.33347845 46.39191437]
[-0.25910175 60.52445984]
[14.04665279 65.03504181]
[28.35240746 69.54563141]
[42.65816116 74.05622101]
[49.33064651 62.66659927]
[58.23199463 52.91921997]
[68.97064972 45.24284744]
[81.07424164 39.97515488]
[94.01034546 37.34786224]
[107.20992279 37.47653961]
[120.09234619 40.35552216]
[132.09094238 45.85816956]
[141.22236633 33.95787048]
[150.35379028 22.05757141]
[159.48521423 10.15727139]
[154.94917297 -4.68199968]
[160.03355408 -19.34244347]
[172.78332520 -28.18681908]
[188.29592896 -27.81428719]
[200.60644531 -18.36808968]
[204.98124695 -3.48048449]
[199.73811340 11.12394047]
[186.89315796 19.82948685]
[171.38551331 19.28869247]
[162.25408936 31.18899155]
[153.12266541 43.08929443]
[143.99124146 54.98959351]
[159.05958557 78.24842834]
[162.67691040 105.72466278]
[154.14183044 132.09094238]
[166.04212952 141.22236633]
[177.94242859 150.35379028]
[189.84272766 159.48521423]
[201.74302673 168.61662292]
[217.37742615 166.30552673]
[230.01683044 175.79347229]
[232.16250610 191.45141602]
[222.54145813 203.98980713]
[206.86169434 205.96981812]
[194.42573547 196.21675110]
[192.61160278 180.51692200]
[180.71130371 171.38551331]
[168.81100464 162.25408936]
[156.91070557 153.12266541]
[145.01040649 143.99124146]
[138.33816528 149.91343689]
[130.89559937 154.83273315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 28]
[16 27]
[17 26]
[18 25]
[36 51]
[37 50]
[38 49]
[39 48]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
