%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCACCGAGGAAGAGUAGGAAAACAGUAAAUGCUGCUAAUAUUUACCAACCAUGGUUAAACUCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[89.39668274 126.13861084]
[80.26525879 138.03890991]
[77.39448547 147.05012512]
[70.46677399 150.24757385]
[60.82495880 161.73823547]
[51.18314743 173.22891235]
[45.63371277 189.24890137]
[28.70355225 188.35110474]
[24.87951660 171.83406067]
[39.69247818 163.58709717]
[49.33429337 152.09642029]
[58.97610855 140.60575867]
[68.36495972 128.90748596]
[77.49638367 117.00718689]
[72.03392029 96.31819916]
[82.66495514 77.74794769]
[76.92470551 63.88975906]
[71.18445587 50.03156662]
[65.44420624 36.17337036]
[59.70395279 22.31517792]
[45.37823486 16.19867706]
[39.75421906 2.06272721]
[45.67365265 -11.55696106]
[35.03966141 -15.29398060]
[28.49811745 -24.19712830]
[28.12528610 -35.01514816]
[33.79934311 -43.96972656]
[29.28875351 -58.27548218]
[24.77816772 -72.58123779]
[20.26758003 -86.88699341]
[7.81789207 -97.56113434]
[11.10266876 -113.62793732]
[26.74281311 -118.55925751]
[38.64908600 -107.28217316]
[34.57333374 -91.39757538]
[39.08392334 -77.09181976]
[43.59450912 -62.78606796]
[48.10509491 -48.48031616]
[63.33047867 -36.87507248]
[59.53184509 -17.29721260]
[73.34809113 -11.85231018]
[79.36693573 2.12009621]
[73.56214142 16.57492638]
[79.30239868 30.43312073]
[85.04264832 44.29131317]
[90.78289795 58.14950562]
[96.52314758 72.00769806]
[106.43949127 72.53747559]
[115.55771637 76.47097778]
[122.74770355 83.32069397]
[127.11832428 92.23765564]
[128.12786865 102.11668396]
[125.65122223 111.73337555]
[137.14189148 121.37519073]
[148.63255310 131.01699829]
[160.12322998 140.65881348]
[171.61389160 150.30062866]
[183.10455322 159.94244385]
[198.47212219 157.04901123]
[212.07882690 164.75561523]
[217.49998474 179.42343140]
[212.17591858 194.12677002]
[198.62046814 201.92317200]
[183.23411560 199.13139343]
[173.28181458 187.06965637]
[173.46273804 171.43312073]
[161.97207642 161.79130554]
[150.48141479 152.14949036]
[138.99073792 142.50767517]
[127.50007629 132.86585999]
[116.00940704 123.22404480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[4 12]
[5 11]
[6 10]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[23 40]
[27 38]
[28 37]
[29 36]
[30 35]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
