%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAAAGAAAGACCCUUGAUUUCGGCUCAAAUAAUUGCGGUGUAAACCCGUAACUCCCUUAUGACACCCA\
) } def
/len { sequence length } bind def

/coor [
[81.60528564 114.67646027]
[67.50989532 119.80676270]
[53.41450500 124.93706512]
[43.09289551 136.92768860]
[28.48686028 134.00999451]
[14.39147091 139.14028931]
[0.29608136 144.27059937]
[-6.43947744 158.31587219]
[-20.80728912 163.31793213]
[-34.15581131 156.81005859]
[-48.25120163 161.94035339]
[-62.34659195 167.07066345]
[-75.16253662 178.16966248]
[-89.37559509 168.92707825]
[-84.42877960 152.71087646]
[-67.47689056 152.97526550]
[-53.38150406 147.84497070]
[-39.28611374 142.71466064]
[-33.24374008 129.14907837]
[-19.02209282 123.74542236]
[-4.83422089 130.17520142]
[9.26116848 125.04489899]
[23.35655785 119.91459656]
[32.66996765 108.29093170]
[48.28420258 110.84167480]
[62.37958908 105.71137238]
[76.47498322 100.58106995]
[77.25567627 93.96178436]
[79.86099243 87.82688904]
[84.08190918 82.66856384]
[89.57982635 78.90061188]
[95.91367340 76.82530975]
[102.57534027 76.60915375]
[109.03041077 78.26947021]
[114.76103210 81.67307281]
[119.30747986 86.54691315]
[122.30502319 92.50000000]
[137.30502319 92.50000000]
[146.20172119 89.29186249]
[152.95574951 92.84149933]
[167.94146729 93.49578857]
[182.92720032 94.15007782]
[197.91291809 94.80437469]
[212.89863586 95.45866394]
[216.78021240 93.01526642]
[220.84017944 92.01568604]
[224.60771179 92.34111786]
[227.69824219 93.73333740]
[229.85124207 95.83470917]
[230.95205688 98.23735046]
[245.44094849 102.11963654]
[259.92984009 106.00192261]
[274.41873169 109.88420868]
[288.90762329 113.76649475]
[303.46432495 107.02248383]
[317.74792480 114.32713318]
[320.80126953 130.07695007]
[310.28210449 142.19001770]
[294.25979614 141.37422180]
[285.02532959 128.25538635]
[270.53643799 124.37309265]
[256.04754639 120.49080658]
[241.55865479 116.60852051]
[227.06977844 112.72623444]
[212.24435425 110.44438934]
[197.25862122 109.79009247]
[182.27290344 109.13580322]
[167.28718567 108.48151398]
[152.30145264 107.82722473]
[137.30502319 107.50000000]
[122.30502319 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[10 18]
[11 17]
[12 16]
[37 71]
[38 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
