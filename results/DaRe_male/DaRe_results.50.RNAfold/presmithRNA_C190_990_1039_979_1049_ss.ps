%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAAGCUGCCAAGAUGGGCCCUAAUAAGCUCCGCAUGCACAAAGGCAUGGUCCCGACCUUUUGAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[73.32341003 372.90246582]
[62.32093430 384.01461792]
[46.74513245 385.40325928]
[33.95041656 376.41275024]
[29.97806168 361.28811646]
[36.70369339 347.17077637]
[50.95167542 340.72647095]
[54.83396149 326.23757935]
[58.71624374 311.74868774]
[62.59852982 297.25979614]
[57.05272675 280.75363159]
[69.79842377 267.66860962]
[73.04501343 253.02415466]
[76.29161072 238.37971497]
[79.53820801 223.73527527]
[82.78479767 209.09083557]
[85.06665039 194.26541138]
[86.37398529 179.32249451]
[87.68132019 164.37957764]
[88.98865509 149.43666077]
[82.39005280 136.08346558]
[91.30067444 123.01015472]
[92.60800934 108.06723785]
[88.34902191 122.44989777]
[75.90546417 130.82592773]
[60.97741699 129.35847473]
[50.40304184 118.71974182]
[49.02619553 103.78306580]
[57.47757339 91.39055634]
[71.88653564 87.21896362]
[68.00424957 72.73007202]
[58.06446838 58.99555588]
[68.51062775 45.64212799]
[84.23398590 51.98345566]
[82.49314117 68.84778595]
[86.37542725 83.33667755]
[101.08720398 86.26303101]
[110.21862793 74.36273193]
[119.35004425 62.46242905]
[128.48147583 50.56212997]
[126.17036438 34.92773438]
[135.65830994 22.28833008]
[151.31626892 20.14265251]
[163.85464478 29.76369476]
[165.83465576 45.44346237]
[156.08158875 57.87942505]
[140.38177490 59.69355392]
[131.25035095 71.59384918]
[122.11892700 83.49415588]
[112.98750305 95.39445496]
[107.55093384 109.37457275]
[106.24359894 124.31748962]
[112.74868774 138.73950195]
[103.93157959 150.74398804]
[102.62424469 165.68690491]
[101.31690216 180.62983704]
[100.00956726 195.57275391]
[102.52761078 200.87661743]
[102.51773834 206.05206299]
[100.52094269 210.07667542]
[97.42923737 212.33743286]
[94.18264771 226.98187256]
[90.93605042 241.62631226]
[87.68945312 256.27075195]
[84.44286346 270.91519165]
[90.76343536 282.39245605]
[87.54064941 294.67416382]
[77.08741760 301.14208984]
[73.20513153 315.63098145]
[69.32284546 330.11987305]
[65.44055939 344.60873413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 71]
[8 70]
[9 69]
[10 68]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[17 57]
[18 56]
[19 55]
[20 54]
[22 52]
[23 51]
[30 36]
[31 35]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
