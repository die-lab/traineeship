%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAGCAUCGGUCUUGUAAUCCGAAGAUCGGAGGUUAGACCCCUCCCUAGCGCUAAAUUACCAGAAAAGA\
) } def
/len { sequence length } bind def

/coor [
[62.39604568 184.65437317]
[59.53619003 169.92953491]
[59.89874649 154.93391418]
[63.46686554 140.36447144]
[70.07470703 126.89835358]
[79.41516876 115.16141510]
[91.05448151 105.69892120]
[75.90676880 110.26591492]
[65.15584564 99.95733643]
[50.51140594 96.71073914]
[35.86696243 93.46414185]
[21.22252464 90.21755219]
[6.57808399 86.97095490]
[-8.06635571 83.72436523]
[-22.71079636 80.47776794]
[-37.35523605 77.23117065]
[-48.88716888 87.61357117]
[-64.32279968 89.20131683]
[-77.72681427 81.38389587]
[-83.94509125 67.16726685]
[-80.58657837 52.01800919]
[-68.94269562 41.76132202]
[-53.49075317 40.34111404]
[-40.17233276 48.30348206]
[-34.10864258 62.58673477]
[-19.46420097 65.83332825]
[-4.81976175 69.07992554]
[9.82467842 72.32651520]
[24.46911812 75.57311249]
[39.11355972 78.81970215]
[53.75799942 82.06629944]
[68.40243530 85.31289673]
[82.50268555 80.51368713]
[94.30107880 91.05448151]
[108.39646912 85.92417908]
[117.52788544 74.02388000]
[126.65930939 62.12358093]
[135.79072571 50.22328186]
[144.92214966 38.32297897]
[140.38610840 23.48370934]
[145.47050476 8.82326603]
[158.22027588 -0.02111058]
[173.73287964 0.35142294]
[186.04339600 9.79761982]
[190.41819763 24.68522453]
[185.17506409 39.28964996]
[172.33009338 47.99519348]
[156.82244873 47.45440292]
[147.69102478 59.35470200]
[138.55961609 71.25500488]
[129.42819214 83.15530396]
[120.29676819 95.05560303]
[135.29495239 94.82264709]
[149.99453735 97.80964661]
[163.71234131 103.87776947]
[175.81077576 112.74499512]
[185.72758484 123.99919891]
[193.00183105 137.11732483]
[197.29545593 151.48968506]
[198.40888977 166.44830322]
[196.29040527 181.29795837]
[191.03845215 195.34846497]
[182.89710999 207.94682312]
[172.24478149 218.50749207]
[159.57653809 226.53965759]
[145.48115540 231.66999817]
[130.61375427 233.66007996]
[115.66532135 232.41741943]
[101.33059692 227.99975586]
[88.27582550 220.61241150]
[77.10774231 210.59872437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
