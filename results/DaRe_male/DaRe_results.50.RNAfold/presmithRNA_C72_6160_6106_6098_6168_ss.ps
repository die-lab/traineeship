%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUCUCUGAUAGGACUUACAGACGUUACUCCGCAUCUUCUAAAUGCAAAUCAGAUAUUUUAAUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[134.17347717 266.97674561]
[140.01831055 252.94441223]
[150.79171753 242.22050476]
[145.05146790 228.36230469]
[139.31121826 214.50411987]
[127.29236603 205.70658875]
[129.15960693 189.99595642]
[123.41934967 176.13775635]
[117.67910004 162.27957153]
[111.93885040 148.42137146]
[106.19859314 134.56317139]
[100.45834351 120.70498657]
[79.21916962 112.37260437]
[75.98056793 86.28276062]
[62.67540741 79.35652924]
[49.37024689 72.43030548]
[35.52585602 79.18596649]
[20.53337479 76.52534485]
[10.10569954 65.67510986]
[8.09072399 50.94154358]
[-5.21443844 44.01531601]
[-21.56545448 45.27081680]
[-30.60371590 31.58718109]
[-23.03143120 17.04096031]
[-6.63832092 16.59605789]
[1.71179080 30.71015358]
[15.01695347 37.63638306]
[28.24172401 30.83612823]
[43.11078262 33.15454102]
[53.88957596 43.90958786]
[56.29647446 59.12514114]
[69.60163879 66.05136871]
[82.90679932 72.97760010]
[97.11074829 68.15600586]
[103.45002747 54.56138992]
[109.78929901 40.96677399]
[116.12857056 27.37215805]
[109.35630798 13.27710724]
[113.27864075 -1.86057198]
[126.04356384 -10.89333057]
[141.62387085 -9.55617714]
[152.66302490 1.51952636]
[153.94866943 17.10417175]
[144.87374878 29.83916473]
[129.72319031 33.71142960]
[123.38391876 47.30604935]
[117.04463959 60.90066528]
[110.70536804 74.49528503]
[122.08024597 87.55972290]
[122.77772522 103.37788391]
[114.31653595 114.96473694]
[120.05678558 128.82292175]
[125.79704285 142.68112183]
[131.53729248 156.53930664]
[137.27754211 170.39750671]
[143.01779175 184.25570679]
[155.44721985 194.04446411]
[153.16940308 208.76385498]
[158.90965271 222.62205505]
[164.64991760 236.48025513]
[179.85079956 236.44525146]
[193.90609741 242.23468018]
[204.67243958 252.96566772]
[210.50805664 267.00183105]
[210.52304077 282.20275879]
[204.71513367 296.25042725]
[193.96998596 307.00265503]
[179.92616272 312.81979370]
[164.72521973 312.81478882]
[150.68521118 306.98840332]
[139.94714355 296.22912598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[14 33]
[15 32]
[16 31]
[20 27]
[21 26]
[34 48]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
