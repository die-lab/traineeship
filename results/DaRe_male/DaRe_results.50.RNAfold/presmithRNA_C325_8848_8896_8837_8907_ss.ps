%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGAUAGCGUUGACCUUUUAAGUCAAAACUUGGUGCUUACCGACCACCCUUAGUGAAUGCCUCAGCUUAA\
) } def
/len { sequence length } bind def

/coor [
[74.08094788 97.38191986]
[60.22275162 91.64166260]
[46.36455917 85.90141296]
[32.50636673 80.16116333]
[18.05153465 85.96595764]
[4.07912874 79.94710541]
[-1.36577308 66.13086700]
[-15.22396564 60.39061356]
[-29.08215904 54.65036011]
[-42.94035339 48.91011047]
[-57.51048279 45.34482193]
[-72.45340729 44.03748322]
[-87.39632416 42.73014832]
[-102.33924103 41.42281342]
[-117.28216553 40.11547470]
[-128.21092224 51.30011368]
[-143.77720642 52.79172134]
[-156.63108826 43.88600159]
[-160.70335388 28.78796577]
[-154.07121277 14.62644482]
[-139.86614990 8.08807659]
[-124.79536438 12.26007652]
[-115.97483063 25.17255592]
[-101.03190613 26.47989273]
[-86.08898926 27.78722763]
[-71.14606476 29.09456444]
[-56.20314789 30.40189934]
[-64.01789856 17.59839821]
[-62.13389587 2.71718335]
[-51.37493515 -7.73483849]
[-36.44543839 -9.18745518]
[-23.87341881 -1.00550115]
[-19.15607643 13.23341274]
[-24.35609436 27.30323219]
[-37.20009995 35.05191422]
[-23.34190750 40.79216766]
[-9.48371506 46.53241730]
[4.37447834 52.27267075]
[17.99416542 46.35323715]
[32.13011551 51.97725296]
[38.24661636 66.30297089]
[52.10481262 72.04322052]
[65.96300507 77.78347015]
[79.82119751 83.52372742]
[102.40486908 68.00691986]
[132.79608154 80.57769012]
[147.28497314 76.69540405]
[161.77384949 72.81311798]
[171.00833130 59.69427872]
[187.03062439 58.87849045]
[197.54980469 70.99155426]
[194.49645996 86.74136353]
[180.21284485 94.04602051]
[165.65614319 87.30200958]
[151.16725159 91.18429565]
[136.67835999 95.06658173]
[134.57965088 102.26695251]
[144.95256042 113.10219574]
[130.38221741 116.66770172]
[128.28349304 123.86807251]
[138.41734314 134.92723083]
[154.21168518 139.33982849]
[158.02479553 155.28950500]
[145.93406677 166.36860657]
[130.37742615 161.17990112]
[127.35818481 145.06108093]
[117.22433472 134.00192261]
[104.04117584 135.87805176]
[91.74473572 133.07960510]
[81.85030365 126.45616913]
[75.39913940 117.29610443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[7 38]
[8 37]
[9 36]
[10 35]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[46 56]
[47 55]
[48 54]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
