%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGGAAAAGCCCCGGCAGGAGGUUUACCUGCGUCUUCAGAUUUGCAAUCUGAUAUGUAUCAUCACCA\
) } def
/len { sequence length } bind def

/coor [
[108.63145447 127.31665802]
[93.85127258 127.98025513]
[80.71105194 121.18108368]
[73.22935486 135.12147522]
[58.33803558 135.43426514]
[45.68716431 143.49375916]
[33.03629303 151.55325317]
[20.38541985 159.61274719]
[17.20986748 175.09472656]
[3.97118998 183.72680664]
[-11.47634125 180.38774109]
[-19.96797943 167.05854797]
[-16.46578598 151.64718628]
[-3.04755044 143.29693604]
[12.32592678 146.96188354]
[24.97679710 138.90238953]
[37.62767029 130.84289551]
[50.27854156 122.78339386]
[56.85536575 109.41946411]
[72.65155792 108.53021240]
[72.04270935 93.74767303]
[78.89051056 80.63272858]
[91.36854553 72.68334198]
[106.14872742 72.01974487]
[119.28894806 78.81891632]
[131.93981934 70.75942230]
[144.59068298 62.69993210]
[142.87294006 47.57344055]
[147.87275696 33.25950241]
[158.54789734 22.57954216]
[172.74311829 17.61399841]
[187.62519836 19.29720116]
[200.24836731 27.24207306]
[212.89924622 19.18257904]
[225.55012512 11.12308598]
[238.20098877 3.06359148]
[250.85186768 -4.99590254]
[254.49819946 -17.58088112]
[265.46151733 -23.98649597]
[277.42657471 -21.16846085]
[290.41696167 -28.66846085]
[303.40734863 -36.16846085]
[316.39773560 -43.66846085]
[329.38812256 -51.16846085]
[342.37847900 -58.66846085]
[355.36886597 -66.16845703]
[366.06280518 -79.32431030]
[381.66488647 -72.69021606]
[379.60913086 -55.86136246]
[362.86886597 -53.17807770]
[349.87847900 -45.67807770]
[336.88812256 -38.17807770]
[323.89773560 -30.67807961]
[310.90734863 -23.17807961]
[297.91696167 -15.67807865]
[284.92657471 -8.17807865]
[277.17642212 7.41503048]
[258.91134644 7.65496922]
[246.26048279 15.71446323]
[233.60961914 23.77395821]
[220.95874023 31.83345222]
[208.30786133 39.89294434]
[210.17358398 54.69107437]
[205.40965271 68.89016724]
[194.91017151 79.65688324]
[180.71932983 84.81829834]
[165.63348389 83.30033875]
[152.65017700 75.35079956]
[139.99931335 83.41029358]
[127.34844208 91.46978760]
[127.95729065 106.25232697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[5 18]
[6 17]
[7 16]
[8 15]
[25 70]
[26 69]
[27 68]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
