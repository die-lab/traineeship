%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCCUCACUAAGAUGCUAAAAUUGGAUAGCGUUGACCUUUUAAGUCAAAACUUGGUGCUUACCGACCA\
) } def
/len { sequence length } bind def

/coor [
[76.59012604 110.81810760]
[75.85913086 90.92960358]
[63.95883179 81.79817963]
[52.05852890 72.66676331]
[40.07385635 81.82114410]
[26.13874626 87.55683899]
[11.20539570 89.48839569]
[-3.70747018 87.49012756]
[-17.58408928 81.70417786]
[-29.48084831 72.53051758]
[-38.59045792 60.59923172]
[-44.29671478 46.72728348]
[-46.21620178 31.86255836]
[-44.22402954 17.01910591]
[-38.46194839 3.20795465]
[-50.36224747 -5.92346668]
[-62.26254654 -15.05488777]
[-74.16284943 -24.18630981]
[-86.06314850 -33.31772995]
[-97.96344757 -42.44915390]
[-109.86374664 -51.58057404]
[-124.70301819 -47.04453278]
[-139.36346436 -52.12892151]
[-148.20783997 -64.87869263]
[-147.83531189 -80.39129639]
[-138.38911438 -92.70182037]
[-123.50150299 -97.07661438]
[-108.89707947 -91.83348846]
[-100.19153595 -78.98852539]
[-100.73232269 -63.48087311]
[-88.83202362 -54.34945297]
[-76.93172455 -45.21803284]
[-65.03142548 -36.08660889]
[-53.13112640 -26.95518875]
[-41.23082352 -17.82376671]
[-29.33052444 -8.69234562]
[-17.48131371 -17.83267784]
[-3.65925217 -23.59873772]
[11.19576931 -25.59193039]
[26.07193184 -23.67043304]
[39.95441055 -17.95927048]
[51.89459229 -8.84220123]
[61.07492065 3.06406999]
[66.86483765 16.95160103]
[68.86412811 31.87603569]
[66.93054962 46.82082367]
[61.18995285 60.76646042]
[73.09025574 69.89788055]
[84.99055481 79.02930450]
[94.07590485 74.90102386]
[104.04833984 74.53110504]
[113.41457367 77.97494507]
[120.77207947 84.71686554]
[125.01914215 93.74729919]
[125.51979065 103.71403503]
[122.19905853 113.12461853]
[132.33291626 124.18377686]
[142.46676636 135.24293518]
[152.60061646 146.30209351]
[168.00212097 144.41177368]
[181.55694580 151.96469116]
[188.05297852 166.05656433]
[184.99237061 181.26881409]
[173.55198669 191.75199890]
[158.13087463 193.47512817]
[144.65878296 185.77561951]
[138.31600952 171.61408997]
[141.54145813 156.43594360]
[131.40760803 145.37678528]
[121.27375031 134.31762695]
[111.13990021 123.25846863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[56 71]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
