%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAAAGGUGGAGACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUA\
) } def
/len { sequence length } bind def

/coor [
[59.77569580 256.14892578]
[53.44799042 269.94473267]
[42.56122589 280.52032471]
[28.58775711 286.44540405]
[13.41737652 286.91867065]
[-0.89824599 281.87609863]
[-12.42304039 271.99969482]
[-19.59837151 258.62512207]
[-21.45383644 243.56120300]
[-17.73849678 228.84519958]
[-8.95482445 216.46734619]
[3.70926380 208.10162354]
[18.54105186 204.87944031]
[33.53466415 207.23655701]
[41.03466415 194.24617004]
[35.94648361 178.36723328]
[43.94042206 163.35519409]
[60.59629059 158.52790833]
[67.52252197 145.22274780]
[74.44874573 131.91758728]
[81.37497711 118.61242676]
[88.30120850 105.30725861]
[73.59836578 108.27819824]
[59.82241821 102.34326935]
[51.88210678 89.61725616]
[52.60676956 74.63477325]
[61.73818970 62.73447418]
[76.02260590 58.15675354]
[90.37009430 62.53277588]
[99.66826630 74.30324554]
[100.60393524 89.27403259]
[111.66310120 79.14017487]
[122.72225952 69.00632477]
[133.78141785 58.87247086]
[144.84057617 48.73861694]
[149.78788757 33.71081924]
[164.39866638 30.81693649]
[175.45782471 20.68308258]
[180.40513611 5.65528584]
[195.01589966 2.76140189]
[206.07505798 -7.37245131]
[204.18475342 -22.77395630]
[211.73765564 -36.32877731]
[225.82952881 -42.82481384]
[241.04177856 -39.76420593]
[251.52496338 -28.32381821]
[253.24809265 -12.90271378]
[245.54858398 0.56937724]
[231.38706970 6.91216135]
[216.20892334 3.68670869]
[205.14976501 13.82056236]
[200.99346924 28.12351799]
[185.59167480 31.74224281]
[174.53251648 41.87609482]
[170.37623596 56.17905426]
[154.97442627 59.79777908]
[143.91526794 69.93163300]
[132.85610962 80.06548309]
[121.79695129 90.19934082]
[110.73779297 100.33319092]
[101.60636902 112.23348999]
[94.68013763 125.53865051]
[87.75391388 138.84381104]
[80.82768250 152.14897156]
[73.90145111 165.45414734]
[79.44596863 177.93397522]
[76.72889709 191.11640930]
[66.98992920 200.11975098]
[54.02504349 201.74617004]
[46.52504349 214.73655701]
[56.06318283 226.54284668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 70]
[15 69]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[37 54]
[38 53]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
