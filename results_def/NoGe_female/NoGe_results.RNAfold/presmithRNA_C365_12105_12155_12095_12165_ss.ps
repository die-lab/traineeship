%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGGAGAGGUUACUUUAUUAGUAUAAUGGAGUAUGCUUGCCUUCCAAGUAAGAGGUUUAACGAUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[172.57521057 181.77377319]
[174.46980286 166.59623718]
[162.56950378 157.46481323]
[150.66920471 148.33338928]
[138.76890564 139.20196533]
[126.86860657 130.07054138]
[114.96829987 120.93912506]
[103.06800079 111.80770111]
[90.78072357 103.20405579]
[78.12985229 95.14456177]
[65.47898102 87.08506775]
[52.82810593 79.02557373]
[40.00442886 71.24397278]
[27.01404762 63.74397659]
[14.02366638 56.24397659]
[1.03328562 48.74397659]
[-11.95709515 41.24397659]
[-24.94747734 33.74397659]
[-37.93785858 26.24397659]
[-50.92823792 18.74397659]
[-63.91862106 11.24397659]
[-76.90900421 3.74397659]
[-93.64926147 1.06069398]
[-95.70500946 -15.76815796]
[-80.10292053 -22.40225410]
[-69.40900421 -9.24640465]
[-56.41862106 -1.74640453]
[-43.42823792 5.75359535]
[-30.43785667 13.25359535]
[-17.44747734 20.75359535]
[-4.45709562 28.25359535]
[8.53328609 35.75359726]
[21.52366638 43.25359726]
[34.51404953 50.75359726]
[47.50442886 58.25359726]
[55.10794067 58.88879776]
[60.88759995 66.37470245]
[73.53847504 74.43419647]
[86.18934631 82.49369049]
[98.84021759 90.55318451]
[104.43128967 90.57830811]
[109.52212524 93.90496826]
[112.19942474 99.90740204]
[124.09972382 109.03882599]
[136.00003052 118.17024994]
[147.90032959 127.30166626]
[159.80062866 136.43309021]
[171.70092773 145.56451416]
[183.60122681 154.69593811]
[197.77124023 148.93765259]
[212.82160950 151.03134155]
[224.72413635 160.31552124]
[230.34385681 174.21786499]
[228.26432800 188.96713257]
[240.16462708 198.09855652]
[252.06492615 207.22998047]
[263.96524048 216.36140442]
[275.86553955 225.49282837]
[287.76583862 234.62423706]
[304.08645630 236.22714233]
[310.61126709 251.27236938]
[300.62808228 264.28268433]
[284.40676880 261.87420654]
[278.63439941 246.52453613]
[266.73410034 237.39312744]
[254.83380127 228.26170349]
[242.93350220 219.13027954]
[231.03320312 209.99885559]
[219.13290405 200.86743164]
[205.42442322 206.69349670]
[190.54130554 204.86346436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 40]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
