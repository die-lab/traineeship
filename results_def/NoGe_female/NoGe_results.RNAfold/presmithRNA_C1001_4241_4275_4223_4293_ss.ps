%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGAUAAGUCGUAACAUAGUAAGGGUAGUGGAAGCUGCUCUUGGUUUCAAGAGGAAGCAUUUGUAGAUG\
) } def
/len { sequence length } bind def

/coor [
[81.47934723 251.66069031]
[70.03454590 241.49824524]
[64.63426208 227.17709351]
[66.51941681 211.98812866]
[75.25683594 199.42166138]
[88.83871460 192.36537170]
[88.83871460 177.36537170]
[88.83871460 162.36537170]
[88.83871460 147.36537170]
[88.83871460 132.36537170]
[88.83871460 117.36536407]
[79.53591919 129.13218689]
[65.87450409 135.32618713]
[50.89360046 134.56942749]
[37.92590332 127.03028107]
[29.85622597 114.38590240]
[28.47976685 99.44919586]
[34.10273361 85.54299927]
[45.47423172 75.76091766]
[60.06453323 72.27909851]
[74.62785339 75.87210846]
[85.92411804 85.74023438]
[82.67752838 71.09579468]
[79.43093109 56.45135498]
[76.18434143 41.80691528]
[72.93774414 27.16247559]
[69.69115448 12.51803589]
[66.44455719 -2.12640405]
[63.19796371 -16.77084351]
[59.95136642 -31.41528511]
[56.70477295 -46.05972290]
[45.23277283 -57.77830887]
[49.90536499 -73.49768829]
[65.91578674 -77.04711151]
[76.79389191 -64.77523804]
[71.34921265 -49.30632019]
[74.59580994 -34.66187668]
[77.84239960 -20.01743889]
[81.08899689 -5.37299824]
[84.33559418 9.27144146]
[87.58218384 23.91588211]
[90.82878113 38.56032181]
[94.07537079 53.20476151]
[97.32196808 67.84920502]
[100.56856537 82.49364471]
[112.66522980 91.36328888]
[127.60815430 90.05595398]
[142.55107117 88.74861145]
[157.49398804 87.44127655]
[172.43692017 86.13394165]
[183.80915833 74.81795502]
[199.72970581 76.79679871]
[207.98567200 90.55247498]
[202.24377441 105.53280640]
[186.90872192 110.24616241]
[173.74424744 101.07686615]
[158.80133057 102.38420105]
[143.85841370 103.69153595]
[128.91548157 104.99887085]
[113.97256470 106.30620575]
[103.83871460 117.36536407]
[103.83871460 132.36537170]
[103.83871460 147.36537170]
[103.83871460 162.36537170]
[103.83871460 177.36537170]
[103.83871460 192.36537170]
[117.42059326 199.42166138]
[126.15800476 211.98812866]
[128.04316711 227.17709351]
[122.64287567 241.49824524]
[111.19808197 251.66069031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
