%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUAAAAUAGCGGGAGCUUGACUUAGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUGCGG\
) } def
/len { sequence length } bind def

/coor [
[86.14291382 207.63905334]
[79.95368958 203.28146362]
[74.83343506 197.69117737]
[71.02330017 191.12423706]
[68.70429230 183.88282776]
[67.98865509 176.30142212]
[68.91446686 168.73127747]
[71.44364929 161.52420044]
[75.46347046 155.01615906]
[80.79162598 149.51164246]
[87.18443298 145.26945496]
[94.34803009 142.49047852]
[93.69374084 127.50475311]
[93.03944397 112.51902771]
[85.68968964 100.62480164]
[91.97483063 88.13526154]
[91.32054138 73.14953613]
[90.66624451 58.16381454]
[90.01195526 43.17809296]
[89.35766602 28.19236755]
[88.70337677 13.20664406]
[88.04908752 -1.77907884]
[87.39479065 -16.76480293]
[86.74050140 -31.75052643]
[86.08621216 -46.73624802]
[85.43192291 -61.72197342]
[76.35617828 -71.17228699]
[76.29041290 -83.86961365]
[84.71343994 -92.82263947]
[84.71343994 -107.82263947]
[76.97613525 -121.62281036]
[84.71343994 -134.35008240]
[84.71343994 -149.35008240]
[74.43167114 -161.66531372]
[77.79055023 -177.35279846]
[92.21343994 -184.37846375]
[106.63632202 -177.35279846]
[109.99520874 -161.66531372]
[99.71343994 -149.35008240]
[99.71343994 -134.35008240]
[107.45073700 -121.62281036]
[99.71343994 -107.82263947]
[99.71343994 -92.82263947]
[109.34239197 -78.31425476]
[100.41764069 -62.37626266]
[101.07193756 -47.39054108]
[101.72622681 -32.40481567]
[102.38051605 -17.41909218]
[103.03480530 -2.43336964]
[103.68910217 12.55235386]
[104.34339142 27.53807640]
[104.99768066 42.52379990]
[105.65196991 57.50952530]
[106.30625916 72.49524689]
[106.96055603 87.48097229]
[114.31031036 99.37519836]
[108.02516937 111.86473846]
[108.67945862 126.85046387]
[109.33375549 141.83618164]
[131.07566833 154.95048523]
[138.47601318 179.04072571]
[128.00485229 201.75508118]
[136.06434631 214.40596008]
[150.85249329 221.49417114]
[151.83804321 237.86367798]
[138.00714111 246.67492676]
[123.58783722 238.86367798]
[123.41347504 222.46545410]
[115.35398102 209.81457520]
[108.06388855 211.67440796]
[100.53320312 211.93040466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 59]
[13 58]
[14 57]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[29 43]
[30 42]
[32 40]
[33 39]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
