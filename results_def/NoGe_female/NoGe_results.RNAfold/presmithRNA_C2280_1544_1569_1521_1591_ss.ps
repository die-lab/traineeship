%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGUUGUUUAGGGGUCUUUAGGUUAAUGUCCAAACUUGGGGCCUUCAAAGUCUCAGAUGUCUUUUUGUC\
) } def
/len { sequence length } bind def

/coor [
[71.96541595 189.07099915]
[56.99568176 188.11854553]
[43.01035690 182.69538879]
[31.31201553 173.30662537]
[22.99023438 160.82672119]
[18.82009315 146.41804504]
[19.18999672 131.42260742]
[24.06549263 117.23707581]
[32.99248123 105.18266296]
[45.13951111 96.38211060]
[59.37522125 91.65509796]
[74.37370300 91.44190216]
[88.73871613 95.76269531]
[81.23871613 82.77231598]
[73.73871613 69.78192902]
[66.23871613 56.79154968]
[59.01203537 50.69086075]
[58.70909882 43.06687927]
[51.78287125 29.76171684]
[44.85663986 16.45655441]
[37.93041229 3.15139151]
[31.00418282 -10.15377140]
[24.07795334 -23.45893288]
[17.15172386 -36.76409531]
[10.22549534 -50.06925964]
[3.29926634 -63.37442017]
[-12.06669426 -65.53472137]
[-23.20481300 -76.33850861]
[-25.83225441 -91.63152313]
[-18.93871498 -105.53327179]
[-5.17490101 -112.69826508]
[10.16672039 -110.37139893]
[21.18698311 -99.44741821]
[23.64836884 -84.12680054]
[16.60442924 -70.30065155]
[23.53065872 -56.99548721]
[30.45688629 -43.69032669]
[37.38311768 -30.38516235]
[44.30934525 -17.07999992]
[51.23557663 -3.77483773]
[58.16180420 9.53032494]
[65.08803558 22.83548737]
[72.01425934 36.14065170]
[79.22909546 49.29154968]
[86.72909546 62.28193283]
[94.22909546 75.27231598]
[101.72909546 88.26269531]
[107.24288177 90.71891022]
[110.79669952 95.54021454]
[125.10245514 100.05080414]
[139.40820312 104.56139374]
[153.71395874 109.07197571]
[169.20207214 105.84257507]
[179.01364136 117.04893494]
[192.91471863 109.52993011]
[208.03694153 114.12274933]
[215.40855408 128.10255432]
[210.65611267 143.17536926]
[196.59915161 150.39877319]
[181.57742310 145.48722839]
[174.50305176 131.35469055]
[160.03817749 134.90672302]
[149.20336914 123.37773132]
[134.89762878 118.86714935]
[120.59186554 114.35655975]
[106.28610992 109.84597015]
[113.61338043 122.93456268]
[116.65172577 137.62362671]
[115.11816406 152.54502869]
[109.15554047 166.30900574]
[99.31919861 177.63359070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 47]
[14 46]
[15 45]
[16 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[49 66]
[50 65]
[51 64]
[52 63]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
