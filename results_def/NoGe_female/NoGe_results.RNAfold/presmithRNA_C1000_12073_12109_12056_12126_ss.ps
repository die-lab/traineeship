%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACCUCAGUUUUUCGUGCUGGUGAUACAACUGUUUUUGUUGGGAGAGGUUACUUUAUUAGUAUAAUGGA\
) } def
/len { sequence length } bind def

/coor [
[1.63878214 318.06130981]
[-6.42071199 330.71218872]
[-14.48020649 343.36303711]
[-10.81527042 358.73654175]
[-19.16551018 372.15475464]
[-34.57687378 375.65695190]
[-47.90607834 367.16531372]
[-51.24513626 351.71777344]
[-42.61304855 338.47909546]
[-27.13107681 335.30355835]
[-19.07158279 322.65267944]
[-11.01208973 310.00180054]
[-20.08995438 294.73760986]
[-20.45470238 276.90002441]
[-11.93067932 261.13369751]
[3.33274651 251.58378601]
[21.40256310 250.80622864]
[27.74183846 237.21162415]
[34.08111191 223.61700439]
[40.42038727 210.02238464]
[46.75965881 196.42776489]
[53.09893417 182.83314514]
[59.43820572 169.23852539]
[65.77748108 155.64392090]
[72.11675262 142.04930115]
[78.45603180 128.45468140]
[68.29328156 116.38583374]
[64.32691193 101.11472321]
[67.33207703 85.62577057]
[76.72147369 72.94594574]
[90.66014862 65.55324554]
[106.42409515 64.89241028]
[112.16434479 51.03422165]
[110.29711151 35.32358551]
[122.31596375 26.52605820]
[128.05621338 12.66786480]
[133.79646301 -1.19032800]
[139.53671265 -15.04852104]
[136.86090088 -31.22789383]
[149.70474243 -41.42436600]
[164.85557556 -35.14868546]
[166.72753906 -18.85673141]
[153.39491272 -9.30826950]
[147.65466309 4.54992342]
[141.91441345 18.40811729]
[136.17414856 32.26630783]
[138.45196533 46.98571396]
[126.02254486 56.77447128]
[120.28228760 70.63266754]
[130.01242065 80.68507385]
[135.13101196 93.70530701]
[134.85159302 107.69273376]
[129.21707153 120.49815369]
[119.09323120 130.15394592]
[106.03564453 135.17645264]
[92.05064392 134.79396057]
[85.71137238 148.38858032]
[79.37210083 161.98318481]
[73.03282166 175.57780457]
[66.69355011 189.17242432]
[60.35427475 202.76704407]
[54.01500320 216.36166382]
[47.67572784 229.95626831]
[41.33645630 243.55088806]
[34.99718094 257.14550781]
[43.41419220 266.43383789]
[48.06151199 278.03713989]
[48.38155746 290.49700928]
[44.35894775 302.25662231]
[36.51938629 311.85525513]
[25.86106110 318.10955811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
