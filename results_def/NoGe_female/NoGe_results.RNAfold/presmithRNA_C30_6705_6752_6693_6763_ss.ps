%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGUUUGUAAGGCGGUGGAUUGUAGCUCUAUUUACGGGGGUUCCUCCCUCCUGAUUUUCAGGCAAUGG\
) } def
/len { sequence length } bind def

/coor [
[95.87468719 136.92626953]
[85.74083710 147.98542786]
[75.60698700 159.04458618]
[80.30195618 173.66828918]
[77.04037476 188.67687988]
[66.69960785 200.03311157]
[52.06125259 204.68222046]
[37.06296158 201.37361145]
[25.73919868 190.99729919]
[21.13599968 176.34445190]
[24.49159813 161.35659790]
[34.90335846 150.06541443]
[49.57056808 145.50816345]
[64.54782104 148.91073608]
[74.68167877 137.85157776]
[84.81552887 126.79241180]
[69.75030518 101.71185303]
[82.47550201 75.89739227]
[72.83368683 64.40672302]
[63.19187164 52.91605759]
[53.55006027 41.42539215]
[43.90824509 29.93472672]
[34.26642990 18.44405937]
[19.46873474 12.84595490]
[17.21491814 -1.87714183]
[1.42255187 -4.70215797]
[-6.08812189 -18.87852287]
[0.44444367 -33.53134537]
[16.00902367 -37.42023087]
[28.66580200 -27.56196022]
[28.70558548 -11.51895618]
[42.81363297 -6.74274063]
[45.75709915 8.80224514]
[55.39891052 20.29291153]
[65.04072571 31.78357887]
[74.68254089 43.27424622]
[84.32435608 54.76491165]
[93.96617126 66.25557709]
[108.95188904 66.90986633]
[119.55849457 56.30326843]
[130.16510010 45.69666672]
[140.77169800 35.09006500]
[151.37829590 24.48346329]
[158.30284119 9.00809669]
[175.09033203 11.37802505]
[177.46026611 28.16551399]
[161.98489380 35.09006500]
[151.37829590 45.69666672]
[140.77169800 56.30326843]
[130.16510010 66.90986633]
[119.55849457 77.51647186]
[130.15805054 97.09024811]
[124.28163147 118.94211578]
[137.87625122 125.28138733]
[151.47087097 131.62066650]
[165.06549072 137.95993042]
[178.66009521 144.29920959]
[195.57052612 145.51327515]
[199.08517456 162.09890747]
[184.12066650 170.06758118]
[172.32083130 157.89382935]
[158.72621155 151.55455017]
[145.13159180 145.21528625]
[131.53697205 138.87600708]
[117.94235992 132.53672791]
[129.97744751 141.48974609]
[134.01390076 155.93644714]
[128.36251831 169.83111572]
[115.38832092 177.35906982]
[100.52079010 175.36996460]
[89.98175049 164.69622803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[25 31]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
