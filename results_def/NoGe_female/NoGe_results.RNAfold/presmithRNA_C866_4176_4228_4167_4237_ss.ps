%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUGAAGGUUGUUUUGUGGUGUGUACAAAUCGCCCGUCGCUCUUUCCGUGCGAGGAAAGAUAAGUCGUA\
) } def
/len { sequence length } bind def

/coor [
[119.11047363 158.99888611]
[106.28997040 166.78570557]
[91.33809662 167.98623657]
[77.43939972 162.34475708]
[67.55413055 151.06285095]
[63.78774261 136.54339600]
[66.94241333 121.87888336]
[76.34623718 110.19264984]
[89.99541473 103.97390747]
[76.13722229 98.23365784]
[62.27902985 92.49340057]
[52.83185577 92.05271912]
[47.95033646 86.18862915]
[32.17320633 87.36879730]
[23.90830612 74.97764587]
[10.31368923 68.63837433]
[-3.28092718 62.29909897]
[-16.87554359 55.95982361]
[-30.47016144 49.62054825]
[-44.06477737 43.28127670]
[-59.57142639 47.39508438]
[-72.36959839 37.72108078]
[-72.64163208 21.68033409]
[-60.17884827 11.57793236]
[-44.54162598 15.16357231]
[-37.72550201 29.68665886]
[-24.13088608 36.02593231]
[-10.53627014 42.36520767]
[3.05834675 48.70447922]
[16.65296364 55.04375458]
[30.24757957 61.38302994]
[45.05233002 59.74943161]
[54.28960800 72.59400940]
[68.01927948 78.63520813]
[81.87747192 84.37546539]
[95.73566437 90.11571503]
[110.56108856 92.39756775]
[125.50401306 91.09022522]
[138.57731628 82.17960358]
[151.93051147 88.77821350]
[162.76426697 75.23751831]
[179.69273376 73.59693909]
[192.41580200 84.37441254]
[207.28747559 82.41651917]
[222.15913391 80.45862579]
[237.03080750 78.50073242]
[251.90248108 76.54283905]
[266.77416992 74.58494568]
[281.64584351 72.62705231]
[291.06683350 59.93767166]
[306.71322632 57.70925140]
[319.30227661 67.26387787]
[321.36517334 82.93295288]
[311.67797852 95.42030334]
[295.98794556 97.31739807]
[283.60372925 87.49872589]
[268.73205566 89.45661926]
[253.86038208 91.41451263]
[238.98870850 93.37240601]
[224.11703491 95.33029938]
[209.24536133 97.28819275]
[194.37368774 99.24608612]
[187.90960693 110.60166931]
[175.86466980 116.15387726]
[162.64590454 113.61941528]
[153.23783875 103.72113037]
[141.23335266 112.53824615]
[126.81134796 106.03314972]
[111.86842346 107.34048462]
[123.01639557 117.37656403]
[128.47047424 131.34985352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[13 33]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[37 69]
[38 68]
[40 66]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
