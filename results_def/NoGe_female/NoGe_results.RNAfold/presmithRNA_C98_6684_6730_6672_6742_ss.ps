%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUGUUGUCUCAGGAGGUGGCUGAGUUUGUAAGGCGGUGGAUUGUAGCUCUAUUUACGGGGGUUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[13.93380451 229.88140869]
[4.80238247 241.78170776]
[-4.32903862 253.68200684]
[-13.46046066 265.58230591]
[-11.14935684 281.21670532]
[-20.63729858 293.85610962]
[-36.29525375 296.00177002]
[-48.83364105 286.38073730]
[-50.81365204 270.70098877]
[-41.06058502 258.26501465]
[-25.36075974 256.45089722]
[-16.22933960 244.55058289]
[-7.09791756 232.65028381]
[2.03350401 220.74998474]
[10.90314865 208.65332031]
[19.50679588 196.36602783]
[28.11044121 184.07875061]
[36.71408844 171.79147339]
[45.31773376 159.50419617]
[46.61320877 151.98497009]
[54.57435989 146.87974548]
[63.70578003 134.97944641]
[72.83720398 123.07914734]
[81.96862793 111.17884827]
[79.37654114 95.02304840]
[89.05179596 81.82765961]
[105.23931885 79.44162750]
[113.84296417 67.15434265]
[111.30436707 51.78576660]
[120.20472717 39.44727707]
[134.87196350 37.12182617]
[143.47561646 24.83454323]
[152.07925415 12.54726315]
[153.65667725 -3.19510937]
[167.29476929 -9.18274689]
[175.89842224 -21.47002792]
[184.50205994 -33.75730896]
[177.42376709 -47.32772446]
[177.47431946 -62.63315201]
[184.64212036 -76.15650940]
[197.28005981 -84.79022980]
[212.48402405 -86.55035400]
[226.76025391 -81.03240967]
[236.82818604 -69.50438690]
[240.37428284 -54.61533356]
[236.58366394 -39.78665161]
[226.32739258 -28.42586136]
[211.96229553 -23.14358902]
[196.78935242 -25.15366173]
[188.18569946 -12.86638165]
[179.58204651 -0.57910061]
[178.62001038 14.28440380]
[164.36653137 21.15090942]
[155.76289368 33.43819046]
[147.15924072 45.72547150]
[149.99052429 60.30351639]
[141.44024658 72.88713074]
[126.13024902 75.75799561]
[117.52659607 88.04527283]
[121.21241760 100.36146545]
[117.10912323 112.54492950]
[106.72342682 120.12194824]
[93.86892700 120.31027222]
[84.73750305 132.21057129]
[75.60607910 144.11087036]
[66.47466278 156.01116943]
[57.60501480 168.10783386]
[49.00136948 180.39512634]
[40.39772415 192.68240356]
[31.79407501 204.96968079]
[23.19042969 217.25695801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[21 66]
[22 65]
[23 64]
[24 63]
[27 59]
[28 58]
[31 55]
[32 54]
[33 53]
[35 51]
[36 50]
[37 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
