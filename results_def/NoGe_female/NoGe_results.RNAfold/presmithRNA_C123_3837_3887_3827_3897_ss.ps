%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGGCUUAAAACCCAAAGGACUUGG\
) } def
/len { sequence length } bind def

/coor [
[80.43639374 115.85527802]
[77.14558411 110.57355499]
[62.27391052 112.53144836]
[47.40223694 114.48934174]
[32.53056335 116.44723511]
[17.65888977 118.40512848]
[4.98670101 127.87751770]
[-8.64160824 121.86765289]
[-23.51328087 123.82554626]
[-36.18547058 133.29794312]
[-49.81377792 127.28807831]
[-64.68545532 129.24597168]
[-71.97093201 142.94638062]
[-85.93264008 149.71768188]
[-101.20201111 146.95614624]
[-111.90765381 135.72366333]
[-113.93303680 120.33933258]
[-106.49935913 106.71875763]
[-92.46501923 100.09931946]
[-77.22650909 103.02633667]
[-66.64334106 114.37429810]
[-51.77167130 112.41640472]
[-40.16320419 103.08405304]
[-25.47117424 108.95387268]
[-10.59950066 106.99598694]
[1.00896728 97.66363525]
[15.70099735 103.53345490]
[30.57266998 101.57556152]
[45.44434357 99.61766815]
[60.31601715 97.65977478]
[75.18769073 95.70188904]
[91.38730621 76.33682251]
[116.24456024 80.75840759]
[128.89543152 72.69891357]
[141.54629517 64.63941956]
[154.19717407 56.57992554]
[166.84803772 48.52043152]
[179.49891663 40.46093750]
[186.98062134 26.52053642]
[201.87193298 26.20775223]
[214.52281189 18.14825630]
[227.17367554 10.08876324]
[239.82455444 2.02926898]
[240.63739014 -13.46650124]
[250.42932129 -25.50384903]
[265.43515015 -29.45416641]
[279.88479614 -23.79847717]
[288.22213745 -10.71150780]
[287.24124146 4.77453327]
[277.31930542 16.70494843]
[262.27151489 20.49224854]
[247.88404846 14.68014050]
[235.23316956 22.73963547]
[222.58230591 30.79912949]
[209.93142700 38.85862350]
[203.35459900 52.22255325]
[187.55841064 53.11180878]
[174.90753174 61.17130280]
[162.25666809 69.23079681]
[149.60578918 77.29029083]
[136.95492554 85.34978485]
[124.30405426 93.40927887]
[125.17816925 99.57060242]
[124.51465607 105.75814819]
[122.35402679 111.59404755]
[118.82824707 116.72189331]
[114.15261841 120.82853699]
[108.61269379 123.66317749]
[102.54679108 125.05271149]
[96.32535553 124.91227722]
[90.32833099 123.25045013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[8 25]
[9 24]
[11 22]
[12 21]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[40 55]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
