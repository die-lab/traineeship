%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUCCGUGCGAGGAAAGAUAAGUCGUAACAUAGUAAGGGUAGUGGAAGCUGCUCUUGGUUUCAAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[50.74415970 139.65121460]
[38.84386063 148.78263855]
[26.94355965 157.91404724]
[15.04325962 167.04547119]
[3.14295983 176.17689514]
[-8.75734043 185.30831909]
[-20.65764046 194.43974304]
[-22.47176552 210.13955688]
[-34.90773010 219.89262390]
[-50.58749771 217.91261292]
[-60.20853806 205.37423706]
[-58.06286240 189.71627808]
[-45.42345810 180.22833252]
[-29.78906250 182.53944397]
[-17.88876152 173.40802002]
[-5.98846149 164.27659607]
[5.91183853 155.14517212]
[17.81213951 146.01374817]
[29.71243858 136.88232422]
[41.61273956 127.75090790]
[41.34344482 118.32842255]
[45.67465973 109.79792786]
[53.67253494 104.29563141]
[63.46759796 103.27084351]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[105.44419098 71.34040070]
[111.12099457 56.31309128]
[122.68917847 45.25061798]
[137.84573364 40.28657150]
[153.60278320 42.34725189]
[166.87661743 50.97925949]
[174.35830688 37.03886032]
[189.24963379 36.72607422]
[201.90051270 28.66658211]
[214.55137634 20.60708809]
[227.20225525 12.54759312]
[239.85311890 4.48809910]
[252.50399780 -3.57139516]
[265.15487671 -11.63088894]
[277.80572510 -19.69038391]
[290.45660400 -27.74987793]
[303.10748291 -35.80937195]
[310.19567871 -50.59751892]
[326.56518555 -51.58306503]
[335.37646484 -37.75216293]
[327.56518555 -23.33286095]
[311.16696167 -23.15850067]
[298.51611328 -15.09900570]
[285.86523438 -7.03951168]
[273.21435547 1.01998258]
[260.56347656 9.07947636]
[247.91261292 17.13897133]
[235.26174927 25.19846535]
[222.61087036 33.25795746]
[209.96000671 41.31745148]
[197.30912781 49.37694550]
[190.73229980 62.74087906]
[174.93611145 63.63013458]
[177.25108337 77.47337341]
[174.04783630 91.18331909]
[165.78744507 102.63856506]
[153.71617126 110.05326843]
[139.67752075 112.25557709]
[125.83068848 108.87268066]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[25 71]
[26 70]
[28 68]
[34 61]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
