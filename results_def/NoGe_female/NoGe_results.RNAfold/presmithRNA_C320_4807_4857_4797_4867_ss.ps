%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUAUUUCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[114.58531189 248.76353455]
[120.11293030 234.53651428]
[131.27186584 224.12301636]
[126.76128387 209.81726074]
[122.25069427 195.51150513]
[117.74010468 181.20574951]
[104.45098877 174.57740784]
[99.67282104 160.13359070]
[106.71534729 146.23968506]
[102.20476532 131.93392944]
[97.69417572 117.62818146]
[88.28350067 113.37136078]
[82.82743835 104.60137177]
[83.16753387 94.27831268]
[89.18901062 85.88645935]
[85.94241333 71.24201965]
[82.69581604 56.59757996]
[72.15502167 44.79918671]
[76.95423126 30.69894218]
[73.70763397 16.05450249]
[70.46104431 1.41006267]
[67.21444702 -13.23437786]
[63.96785355 -27.87881660]
[49.41163635 -32.57603455]
[39.22819138 -43.85407639]
[36.07807922 -58.61697769]
[40.70937729 -72.87905884]
[51.78303528 -82.84097290]
[48.53644180 -97.48541260]
[45.28984833 -112.12985229]
[31.82765770 -120.40904236]
[28.24404335 -135.80168152]
[36.66510010 -149.17558289]
[52.09476471 -152.59625244]
[65.37889099 -144.03427124]
[68.63623810 -128.56930542]
[59.93428802 -115.37644196]
[63.18088150 -100.73200226]
[66.42747498 -86.08756256]
[80.67370605 -81.73893738]
[90.89850616 -70.77037048]
[94.28260040 -56.05934525]
[89.81957245 -41.53425980]
[78.61228943 -31.12541199]
[81.85888672 -16.48097229]
[85.10548401 -1.83653152]
[88.35207367 12.80790901]
[91.59867096 27.45234871]
[101.90724945 38.20327377]
[97.34025574 53.35098648]
[100.58685303 67.99542999]
[103.83345032 82.63986969]
[117.17256165 95.39862823]
[111.99993134 113.11759186]
[116.51051331 127.42334747]
[121.02110291 141.72909546]
[134.75921631 149.07089233]
[139.12980652 163.64321899]
[132.04586792 176.69517517]
[136.55644226 191.00091553]
[141.06703186 205.30667114]
[145.57762146 219.61242676]
[160.69142151 221.74215698]
[173.37966919 230.22573853]
[181.12309265 243.37876892]
[182.38423157 258.58969116]
[176.91268921 272.83837891]
[165.79483032 283.29574585]
[151.23814392 287.88543701]
[136.13284302 285.69622803]
[123.47811127 277.16271973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[9 56]
[10 55]
[11 54]
[15 52]
[16 51]
[17 50]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[28 39]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
