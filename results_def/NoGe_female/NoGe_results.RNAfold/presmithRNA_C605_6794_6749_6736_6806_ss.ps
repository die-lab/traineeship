%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUCCCUCCUGAUUUUCAGGCAAUGGGGAGUCCCCCACUCUAUAGCGUCCAAGGCUAUUGUUUUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[90.09953308 133.27702332]
[79.16044617 127.76856232]
[70.81480408 118.80435944]
[66.10118103 107.50000000]
[51.10118484 107.50000000]
[36.10118484 107.50000000]
[21.10118484 107.50000000]
[6.10118389 107.50000000]
[-8.89881611 107.50000000]
[-23.84173584 108.80733490]
[-38.61385345 111.41205597]
[-53.38596725 114.01678467]
[-68.15808868 116.62150574]
[-82.93019867 119.22622681]
[-97.47876740 127.93114471]
[-109.87093353 116.36090851]
[-102.18335724 101.25006104]
[-85.53492737 104.45410919]
[-70.76280975 101.84938812]
[-55.99069214 99.24466705]
[-41.21857452 96.63994598]
[-26.44645882 94.03521729]
[-24.71289635 91.45243835]
[-21.68996620 89.52231598]
[-17.67292976 88.80880737]
[-13.18245316 89.73514557]
[-8.89881611 92.50000000]
[6.10118389 92.50000000]
[21.10118484 92.50000000]
[36.10118484 92.50000000]
[51.10118484 92.50000000]
[66.10118103 92.50000000]
[74.19311523 76.77534485]
[88.98081970 67.07649231]
[106.62752533 65.91986847]
[122.55467987 73.60556030]
[132.62986755 88.13948059]
[147.50152588 86.18158722]
[162.37319946 84.22369385]
[172.60601807 70.22332764]
[189.44680786 67.84590149]
[202.62786865 78.05814362]
[214.87481689 68.04201508]
[228.75230408 73.45170593]
[243.52441406 70.84697723]
[258.29653931 68.24225616]
[273.06863403 65.63753510]
[287.84075928 63.03281403]
[295.50234985 49.40071106]
[310.15216064 43.93107986]
[324.87301636 49.20651627]
[332.71420288 62.73611832]
[329.97329712 78.13162231]
[317.94451904 88.12374115]
[302.30746460 87.99449921]
[290.44549561 77.80493164]
[275.67337036 80.40965271]
[260.90124512 83.01437378]
[246.12913513 85.61909485]
[231.35702515 88.22382355]
[220.16667175 98.05364227]
[205.23258972 92.83026123]
[199.26998901 104.45699310]
[187.47869873 110.52931213]
[174.16197205 108.57386017]
[164.33110046 99.09536743]
[149.45942688 101.05326080]
[134.58775330 103.01115417]
[131.38996887 114.83405304]
[124.28578949 124.81089020]
[114.15929413 131.70007324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[37 68]
[38 67]
[39 66]
[42 62]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
