%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUUUAGAAUAAACGGCCGCGGUACUCUGACCGUGCAAAGGUAGCAUAAUCAUUUGUCCUUUAAUUGUG\
) } def
/len { sequence length } bind def

/coor [
[95.53030396 120.07277679]
[84.92369843 130.67938232]
[74.31710052 141.28598022]
[63.71049881 151.89257812]
[53.10389709 162.49917603]
[54.64695358 178.06044006]
[45.78377533 190.94369507]
[30.69928551 195.06585693]
[16.51591873 188.48056030]
[9.93062496 174.29719543]
[14.05278015 159.21270752]
[26.93602943 150.34951782]
[42.49729538 151.89257812]
[53.10389709 141.28598022]
[63.71049881 130.67938232]
[74.31710052 120.07277679]
[84.92369843 109.46617126]
[85.57799530 94.48045349]
[75.93618011 82.98978424]
[67.75991821 78.23667145]
[66.13769531 70.78112030]
[57.00627136 58.88082123]
[47.87485123 46.98052216]
[38.74342728 35.08022308]
[29.61200714 23.17992210]
[13.91218281 21.36579704]
[4.15911531 8.92983246]
[6.13912773 -6.74993515]
[18.67751312 -16.37097740]
[34.33546829 -14.22529888]
[43.82341003 -1.58589518]
[41.51230621 14.04850101]
[50.64373016 25.94880104]
[59.77515030 37.84910202]
[68.90657043 49.74940109]
[78.03799438 61.64970016]
[87.42684174 73.34796906]
[97.06865692 84.83863831]
[111.27261353 89.66022491]
[125.91705322 86.41363525]
[140.56149292 83.16703796]
[155.20593262 79.92044830]
[169.85037231 76.67385101]
[175.37390137 72.16751862]
[181.42245483 71.49034119]
[185.91119385 73.84189606]
[200.78286743 71.88400269]
[215.65454102 69.92610931]
[222.94001770 56.22569656]
[236.90171814 49.45440292]
[252.17109680 52.21593094]
[262.87673950 63.44842148]
[264.90213013 78.83274841]
[257.46844482 92.45331573]
[243.43409729 99.07275391]
[228.19558716 96.14574432]
[217.61242676 84.79778290]
[202.74075317 86.75567627]
[187.86907959 88.71356964]
[173.09696960 91.31829071]
[158.45252991 94.56488800]
[143.80809021 97.81147766]
[129.16365051 101.05807495]
[114.51920319 104.30466461]
[129.44772339 105.76734924]
[141.06028748 115.26199341]
[145.45982361 129.60229492]
[141.16989136 143.97575378]
[129.63014221 153.55877686]
[114.71323395 155.13537598]
[101.42513275 148.17646790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[18 38]
[19 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
