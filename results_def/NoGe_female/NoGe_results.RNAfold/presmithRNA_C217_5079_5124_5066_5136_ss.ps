%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUGUCCUUUAAUUGUGGGCUGGGAUGAAGGGGAAGAUCGUGAGUUUGGCUGUCUCCUUUCUAUUUUU\
) } def
/len { sequence length } bind def

/coor [
[15.46457100 157.95927429]
[0.69245446 160.56399536]
[-14.07966137 163.16871643]
[-28.85177803 165.77345276]
[-43.62389374 168.37817383]
[-58.39601135 170.98289490]
[-73.04045105 174.22949219]
[-87.52933502 178.11177063]
[-102.01822662 181.99406433]
[-116.50711060 185.87634277]
[-121.10648346 200.60214233]
[-132.95175171 210.48614502]
[-148.26312256 212.37437439]
[-162.15480042 205.66432190]
[-170.19400024 192.49713135]
[-169.81544495 177.07441711]
[-161.13992310 164.31748962]
[-146.93577576 158.29707336]
[-131.73547363 160.93421936]
[-120.38939667 171.38745117]
[-105.90051270 167.50517273]
[-91.41162109 163.62287903]
[-76.92273712 159.74060059]
[-73.67559052 155.85028076]
[-67.82831573 154.16122437]
[-61.00073242 156.21076965]
[-46.22861862 153.60604858]
[-31.45650101 151.00132751]
[-16.68438530 148.39660645]
[-1.91226816 145.79188538]
[12.85984802 143.18716431]
[26.83996582 137.75059509]
[39.49083710 129.69110107]
[52.14170837 121.63159943]
[64.79257965 113.57210541]
[77.44345093 105.51261139]
[90.09432220 97.45311737]
[94.83965302 90.59901428]
[103.47749329 89.33201599]
[116.46788025 81.83201599]
[129.45825195 74.33201599]
[137.54090881 60.73122787]
[152.43170166 61.06829071]
[165.42207336 53.56829071]
[173.50473022 39.96750641]
[188.39552307 40.30456924]
[199.08944702 27.14871788]
[214.69152832 33.78281403]
[212.63578796 50.61166763]
[195.89552307 53.29494858]
[188.74203491 66.35928345]
[172.92207336 66.55867004]
[159.93170166 74.05867004]
[152.77821350 87.12300873]
[136.95825195 87.32239532]
[123.96788025 94.82239532]
[110.97749329 102.32239532]
[98.15381622 110.10398865]
[85.50294495 118.16348267]
[72.85207367 126.22297668]
[60.20120239 134.28247070]
[47.55033112 142.34196472]
[34.89945984 150.40145874]
[49.26374054 154.72204590]
[59.24248505 165.92135620]
[61.88420105 180.68690491]
[56.40752792 194.65136719]
[44.43234253 203.68435669]
[29.50063896 205.11412048]
[16.02888107 198.51777649]
[8.00171661 185.84637451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 23]
[8 22]
[9 21]
[10 20]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
