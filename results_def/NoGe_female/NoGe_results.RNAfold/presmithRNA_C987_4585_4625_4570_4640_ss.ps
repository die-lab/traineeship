%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAGUGAUAUGCUUUCGAACAGGGUGAUAGCUUGUUUCCACUU\
) } def
/len { sequence length } bind def

/coor [
[77.77588654 173.02499390]
[74.72630310 173.63821411]
[66.66680908 186.28907776]
[58.60731506 198.93995667]
[58.43295288 215.33818054]
[44.01365280 223.14942932]
[30.18275261 214.33818054]
[31.16829681 197.96867371]
[45.95644379 190.88046265]
[54.01593781 178.22958374]
[62.07543182 165.57872009]
[69.00166321 152.27355957]
[74.74191284 138.41535950]
[80.48216248 124.55716705]
[86.22241974 110.69897461]
[73.35289764 118.40451813]
[58.63225937 115.52304077]
[49.61786652 103.53385162]
[50.93757248 88.59201813]
[61.91385651 78.36845398]
[76.91165924 78.11179352]
[88.23207092 87.95517731]
[84.34978485 73.46629333]
[80.46749878 58.97740555]
[76.58521271 44.48851776]
[72.70292664 29.99962997]
[68.82064056 15.51074123]
[64.93835449 1.02185428]
[50.21255112 -3.57751966]
[40.32855988 -15.42278290]
[38.44032669 -30.73415565]
[45.15038300 -44.62583160]
[58.31756973 -52.66503143]
[73.74028778 -52.28647614]
[86.49720001 -43.61095810]
[92.51763153 -29.40680313]
[89.88047791 -14.20650768]
[79.42724609 -2.86043143]
[83.30952454 11.62845612]
[87.19181061 26.11734390]
[91.07409668 40.60623169]
[94.95638275 55.09511948]
[98.83866882 69.58400726]
[102.72095490 84.07289124]
[114.21162415 93.71470642]
[129.15454102 95.02204132]
[144.09745789 96.32937622]
[159.04039001 97.63671875]
[173.98330688 98.94405365]
[188.92622375 100.25138855]
[203.86914062 101.55872345]
[214.79791260 90.37408447]
[230.36419678 88.88247681]
[243.21806335 97.78820038]
[247.29032898 112.88623810]
[240.65818787 127.04775238]
[226.45312500 133.58612061]
[211.38235474 129.41412354]
[202.56181335 116.50164795]
[187.61889648 115.19430542]
[172.67596436 113.88697052]
[157.73304749 112.57963562]
[142.79013062 111.27230072]
[127.84720612 109.96496582]
[112.90428925 108.65763092]
[100.08061218 116.43922424]
[94.34035492 130.29742432]
[88.60010529 144.15560913]
[82.85985565 158.01380920]
[83.77497101 163.02943420]
[82.91236115 167.53259277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 69]
[13 68]
[14 67]
[15 66]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
