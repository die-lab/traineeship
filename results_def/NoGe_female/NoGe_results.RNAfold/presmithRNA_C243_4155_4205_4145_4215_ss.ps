%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAUUUUACAUUAGUAUGGUUUUCUGAAGGUUGUUUUGUGGUGUGUACAAAUCGCCCGUCGCUCUUUCC\
) } def
/len { sequence length } bind def

/coor [
[93.52334595 110.33863831]
[79.42796326 115.46894073]
[68.11853027 129.81353760]
[51.02968979 126.46966553]
[37.17149734 132.20991516]
[23.31330299 137.95016479]
[9.45510960 143.69041443]
[-0.33365059 156.11985779]
[-15.05305290 153.84202576]
[-28.91124535 159.58229065]
[-42.76943970 165.32254028]
[-52.31790161 178.65516663]
[-68.60985565 176.78320312]
[-74.88553619 161.63237000]
[-64.68906403 148.78852844]
[-48.50968933 151.46434021]
[-34.65149689 145.72409058]
[-20.79330444 139.98384094]
[-11.99577522 127.96498871]
[3.71485806 129.83222961]
[17.57305145 124.09197235]
[31.43124390 118.35172272]
[45.28943634 112.61147308]
[50.33760452 101.40344238]
[62.09357071 96.60514069]
[74.29766083 101.37355804]
[88.39304352 96.24325562]
[102.25123596 90.50299835]
[115.84585571 84.16372681]
[129.44047546 77.82445526]
[143.03509521 71.48517609]
[156.62969971 65.14590454]
[161.88752747 53.14453506]
[173.59315491 48.22472382]
[185.08802795 52.58040237]
[198.94621277 46.84015274]
[205.06271362 32.51443481]
[219.19866943 26.89041901]
[232.81835938 32.80985260]
[246.67654419 27.06960106]
[253.66831970 20.70104980]
[261.26660156 21.39583397]
[275.36199951 16.26553154]
[289.45739746 11.13523006]
[303.55279541 6.00492764]
[306.85122681 -9.06570244]
[317.78994751 -19.94446373]
[332.87850952 -23.15998650]
[347.30212402 -17.68620491]
[356.45834351 -5.26978540]
[357.42538452 10.12723827]
[349.89474487 23.59173203]
[336.26934814 30.82722473]
[320.89703369 29.52489662]
[308.68307495 20.10031700]
[294.58770752 25.23061943]
[280.49230957 30.36092186]
[266.39691162 35.49122238]
[252.41679382 40.92779541]
[238.55860901 46.66804504]
[233.11370850 60.48429108]
[219.14129639 66.50313568]
[204.68646240 60.69834518]
[190.82827759 66.43859863]
[181.10911560 80.88670349]
[162.96897888 78.74052429]
[149.37435913 85.07979584]
[135.77975464 91.41906738]
[122.18512726 97.75834656]
[108.59051514 104.09761810]
[105.56524658 108.79958344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 23]
[5 22]
[6 21]
[7 20]
[9 18]
[10 17]
[11 16]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[35 64]
[36 63]
[39 60]
[40 59]
[42 58]
[43 57]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
