%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGAUGGGUUACGUUUCUUUAGUUUUUGGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAUUUGAUAG\
) } def
/len { sequence length } bind def

/coor [
[91.15244293 126.54202271]
[83.02388000 121.04261780]
[70.73659515 129.64627075]
[58.44931793 138.24990845]
[46.16203690 146.85356140]
[33.87475586 155.45719910]
[21.58747482 164.06085205]
[9.30019474 172.66448975]
[5.10953283 188.15055847]
[-9.66748524 194.39709473]
[-23.69519615 186.61230469]
[-26.21274185 170.76802063]
[-15.28887463 159.01860046]
[0.69654804 160.37721252]
[12.98382854 151.77357483]
[25.27110863 143.16992188]
[37.55839157 134.56628418]
[49.84567261 125.96263123]
[62.13294983 117.35898590]
[74.42023468 108.75534058]
[72.38327789 99.32875824]
[73.78255463 89.57767487]
[78.58522797 80.74060059]
[86.31753540 73.98968506]
[96.10838318 70.27587891]
[106.78651428 70.19689941]
[117.02038574 73.90606689]
[125.48424530 81.07546997]
[133.54373169 68.42459869]
[141.60322571 55.77372360]
[149.66271973 43.12285233]
[151.73719788 33.89572525]
[158.35986328 30.10665512]
[166.96351624 17.81937408]
[175.56716919 5.53209400]
[184.17080688 -6.75518703]
[192.77445984 -19.04246712]
[185.69615173 -32.61288452]
[185.74670410 -47.91830826]
[192.91450500 -61.44166565]
[205.55244446 -70.07539368]
[220.75640869 -71.83551025]
[235.03265381 -66.31756592]
[245.10058594 -54.78954315]
[248.64666748 -39.90049362]
[244.85604858 -25.07180977]
[234.59977722 -13.71102047]
[220.23468018 -8.42874813]
[205.06173706 -10.43882084]
[196.45808411 1.84845972]
[187.85444641 14.13574028]
[179.25079346 26.42302132]
[170.64715576 38.71030045]
[162.31359863 51.18234634]
[154.25410461 63.83321762]
[146.19461060 76.48409271]
[138.13511658 89.13496399]
[139.44245911 104.07788086]
[149.57630920 115.13703918]
[159.71015930 126.19620514]
[175.50834656 126.63509369]
[186.30816650 138.17370605]
[185.70227051 153.96636963]
[174.05012512 164.64360046]
[158.26475525 163.87075806]
[147.71131897 152.10638428]
[148.65100098 136.33004761]
[138.51715088 125.27089691]
[128.38328552 114.21173096]
[120.98403931 122.54752350]
[111.41907501 127.59045410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[28 57]
[29 56]
[30 55]
[31 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
