%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUUUGUGAGUUUGUUUAAUGUCGGGGUGUGUGGAUGGUGGUUUGGGGGGAGCCUUUUUUCUCUUGAC\
) } def
/len { sequence length } bind def

/coor [
[5.52903891 196.81019592]
[-17.39208031 196.02299500]
[-26.52350235 207.92329407]
[-35.65492249 219.82359314]
[-33.34381866 235.45799255]
[-42.83176041 248.09739685]
[-58.48971558 250.24307251]
[-71.02809906 240.62202454]
[-73.00811768 224.94226074]
[-63.25504684 212.50630188]
[-47.55522156 210.69216919]
[-38.42380142 198.79187012]
[-29.29237938 186.89157104]
[-33.56700516 179.77827454]
[-35.77286530 171.75462341]
[-35.73511505 163.41087341]
[-33.44443512 155.36425781]
[-29.05861282 148.21327209]
[-22.89172935 142.49320984]
[-15.39169884 138.63604736]
[-7.10773611 136.93785095]
[1.34984696 137.53608704]
[9.35461235 140.39862061]
[16.31039047 145.32510376]
[28.96126175 137.26560974]
[41.61213303 129.20611572]
[54.26300430 121.14661407]
[66.91387939 113.08712006]
[79.56475067 105.02762604]
[92.21562195 96.96813202]
[92.77239227 94.14253998]
[94.38093567 91.42472076]
[97.00787354 89.20558167]
[100.47689819 87.85876465]
[104.47860718 87.68961334]
[108.59790039 88.88928223]
[122.69329071 83.75897980]
[136.78868103 78.62868500]
[147.11029053 66.63806152]
[161.71632385 69.55576324]
[175.81172180 64.42546082]
[186.13331604 52.43483734]
[200.73936462 55.35253906]
[214.83474731 50.22223663]
[228.93014526 45.09193420]
[243.02552795 39.96163177]
[257.12091064 34.83132935]
[265.17687988 20.95757294]
[281.06710815 18.74845123]
[292.60198975 29.89861298]
[290.93292236 45.85461044]
[277.34033203 54.37636566]
[262.25122070 48.92671967]
[248.15582275 54.05702209]
[234.06044006 59.18732452]
[219.96505737 64.31762695]
[205.86965942 69.44792938]
[196.55624390 81.07159424]
[180.94201660 78.52085114]
[166.84663391 83.65115356]
[157.53321838 95.27481842]
[141.91899109 92.72406769]
[127.82359314 97.85437012]
[113.72820282 102.98467255]
[100.27511597 109.61900330]
[87.62424469 117.67849731]
[74.97337341 125.73799133]
[62.32249832 133.79748535]
[49.67162704 141.85697937]
[37.02075577 149.91647339]
[24.36988449 157.97596741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[36 64]
[37 63]
[38 62]
[40 60]
[41 59]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
