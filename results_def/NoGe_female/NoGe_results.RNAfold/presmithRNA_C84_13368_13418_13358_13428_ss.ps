%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGAGGGUGGCAAAAAGCACUGAGGGGUGUACAUAGUUUCGGCCUAUGGGGGGGACGUACGGUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[72.64511871 173.95549011]
[69.48333740 188.61848450]
[59.62577057 199.92460632]
[45.53032684 205.05474854]
[30.71160507 202.72976685]
[18.86454964 193.52937317]
[12.94313622 179.74761963]
[14.42382622 164.82087708]
[22.93694305 152.47145081]
[8.06526947 154.42933655]
[-6.80640316 156.38723755]
[-21.67807579 158.34512329]
[-28.96356010 172.04554749]
[-42.92526627 178.81683350]
[-58.19463348 176.05531311]
[-68.90027618 164.82281494]
[-70.92565918 149.43849182]
[-63.49198532 135.81791687]
[-49.45764542 129.19848633]
[-34.21913528 132.12548828]
[-23.63596916 143.47344971]
[-8.76429558 141.51556396]
[6.10737705 139.55767822]
[20.97904968 137.59977722]
[35.07444000 132.46948242]
[47.72531128 124.40998077]
[60.37618256 116.35048676]
[73.02705383 108.29099274]
[85.67792511 100.23149872]
[92.30374908 87.91930389]
[106.26258087 87.11763000]
[118.91345215 79.05813599]
[131.56431580 70.99864197]
[144.21519470 62.93914795]
[156.86607361 54.87965393]
[159.54101562 49.65317154]
[163.65298462 46.51039124]
[168.06150818 45.64451981]
[171.73718262 46.72107697]
[185.33180237 40.38180161]
[198.92642212 34.04252625]
[212.52104187 27.70325470]
[226.11566162 21.36397934]
[231.60145569 6.78509951]
[245.47863770 0.54983497]
[259.34356689 5.86955214]
[272.93817139 -0.46972182]
[284.73800659 -12.64347267]
[299.70254517 -4.67480946]
[296.18786621 11.91083336]
[279.27746582 13.12489510]
[265.68283081 19.46416855]
[260.84576416 33.50476837]
[247.14920044 40.12735367]
[232.45492554 34.95859528]
[218.86030579 41.29787064]
[205.26570129 47.63714600]
[191.67108154 53.97641754]
[178.07646179 60.31569290]
[164.92556763 67.53052521]
[152.27468872 75.59001923]
[139.62380981 83.64951324]
[126.97294617 91.70900726]
[114.32207489 99.76850128]
[107.69625092 112.08069611]
[93.73741913 112.88237000]
[81.08654785 120.94186401]
[68.43567657 129.00135803]
[55.78480530 137.06085205]
[43.13393402 145.12034607]
[57.59397125 149.10874939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
