%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:45:53 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUUCUUUUGCUGGGUUCUGGGGCUGUGGAGGGUGGUGUGGGGACUGGCUGGACGGUUUAUCCUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[99.97145081 111.58059692]
[95.56112671 111.73641968]
[91.08129120 110.15433502]
[76.59239960 114.03662109]
[62.10351181 117.91890717]
[47.61462402 121.80119324]
[33.12574005 125.68347931]
[18.63685036 129.56576538]
[12.99375629 143.89968872]
[0.14264680 152.06684875]
[-14.87575436 151.11204529]
[-26.31520081 141.61062622]
[-40.80408859 145.49291992]
[-54.53860855 155.43269348]
[-67.89203644 144.98654175]
[-61.55070877 129.26318359]
[-44.68637466 131.00402832]
[-30.19748688 127.12174225]
[-25.04134750 113.17353821]
[-12.51242828 104.83746338]
[2.70053506 105.48487091]
[14.75456524 115.07687378]
[29.24345207 111.19458771]
[43.73234177 107.31230164]
[58.22122574 103.43001556]
[72.71011353 99.54772949]
[87.19900513 95.66544342]
[101.29438782 90.53514099]
[110.53166962 77.69055939]
[125.33641815 79.32415771]
[138.93103027 72.98488617]
[152.52565002 66.64561462]
[166.12026978 60.30633926]
[179.71488953 53.96706390]
[193.30950928 47.62779236]
[206.90412903 41.28851700]
[220.49873352 34.94924545]
[207.32920837 27.76846123]
[201.52020264 13.93895054]
[205.61172485 -0.49224657]
[217.81474304 -9.21499825]
[232.79339600 -8.41522789]
[243.99819946 1.55736172]
[246.52975464 16.34219170]
[239.28086853 29.47475243]
[254.15254211 27.51685905]
[269.02420044 25.55896568]
[283.89587402 23.60107422]
[298.76754761 21.64318085]
[308.18853760 8.95379639]
[323.83493042 6.72537518]
[336.42401123 16.27999878]
[338.48687744 31.94908142]
[328.79971313 44.43643188]
[313.10968018 46.33352661]
[300.72546387 36.51485443]
[285.85379028 38.47274780]
[270.98211670 40.43064117]
[256.11044312 42.38853073]
[241.23875427 44.34642410]
[226.83801270 48.54386139]
[213.24339294 54.88313293]
[199.64877319 61.22240829]
[186.05416870 67.56168365]
[172.45954895 73.90095520]
[158.86492920 80.24022675]
[145.27030945 86.57950592]
[131.67568970 92.91877747]
[123.41079712 105.30992889]
[107.63366699 104.12976074]
[106.32993317 107.27896881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[12 18]
[13 17]
[28 70]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
