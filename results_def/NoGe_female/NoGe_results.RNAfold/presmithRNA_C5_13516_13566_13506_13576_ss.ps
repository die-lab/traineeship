%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACCCAGGGGCUUCACGCCGGAUGUACGGAUUACGUUGAUGGUGUAAAAUAAGGAAAGCCUUGUUUCC\
) } def
/len { sequence length } bind def

/coor [
[90.12012482 125.19580078]
[80.98870087 137.09609985]
[71.85728455 148.99639893]
[62.72586060 160.89669800]
[65.03696442 176.53109741]
[55.54902267 189.17050171]
[39.89106750 191.31617737]
[27.35268021 181.69514465]
[25.37266922 166.01536560]
[35.12573624 153.57940674]
[50.82556152 151.76527405]
[59.95698166 139.86497498]
[69.08840179 127.96467590]
[78.21982574 116.06437683]
[73.58615112 105.89483643]
[73.45638275 94.72014618]
[77.85264587 84.44573975]
[86.02531433 76.82353973]
[82.14302826 62.33464813]
[78.26074219 47.84576035]
[74.37845612 33.35687256]
[70.49617004 18.86798668]
[66.61388397 4.37909985]
[54.11783218 1.35551095]
[44.23168564 -6.74855614]
[38.87707901 -18.27544975]
[39.05891800 -30.91063690]
[44.67738724 -42.14739227]
[54.56040573 -49.78409576]
[51.95568466 -64.55621338]
[49.35095978 -79.32833099]
[37.08687592 -89.67105103]
[37.67062759 -105.70347595]
[50.65440369 -115.12690735]
[66.07817078 -110.71249390]
[72.11012268 -95.84658813]
[64.12307739 -81.93305206]
[66.72779846 -67.16093445]
[69.33251953 -52.38881683]
[85.37208557 -45.63287354]
[94.42725372 -30.59062576]
[92.86383057 -12.94912148]
[81.10277557 0.49681398]
[84.98506165 14.98570156]
[88.86734772 29.47458839]
[92.74963379 43.96347427]
[96.63191223 58.45236206]
[100.51419830 72.94125366]
[121.10650635 83.06023407]
[126.52864075 105.35457611]
[139.83380127 112.28079987]
[153.13896179 119.20703125]
[166.44412231 126.13326263]
[179.74929810 133.05949402]
[193.05445862 139.98571777]
[206.35961914 146.91194153]
[219.66477966 153.83818054]
[236.01579285 152.58267212]
[245.05406189 166.26631165]
[237.48176575 180.81253052]
[221.08866882 181.25743103]
[212.73855591 167.14334106]
[199.43339539 160.21711731]
[186.12821960 153.29087830]
[172.82305908 146.36465454]
[159.51789856 139.43841553]
[146.21273804 132.51219177]
[132.90757751 125.58596039]
[119.60240936 118.65973663]
[113.30854034 123.56529236]
[105.85764313 126.42211914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[29 39]
[30 38]
[31 37]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
