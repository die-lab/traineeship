%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAAAGGUAGCAUAAUCAUUUGUCCUUUAAUUGUGGGCUGGGAUGAAGGGGAAGAUCGUGAGUUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[88.04747009 125.91239929]
[78.40565491 137.40306091]
[68.76383972 148.89373779]
[59.12202835 160.38439941]
[62.01546478 175.75196838]
[54.30886459 189.35865784]
[39.64104462 194.77983093]
[24.93770409 189.45576477]
[17.14130783 175.90031433]
[19.93307686 160.51394653]
[31.99482346 150.56166077]
[47.63136292 150.74258423]
[57.27317429 139.25192261]
[66.91498566 127.76125336]
[76.55680084 116.27058411]
[71.50979614 101.61983490]
[74.86368561 86.49144745]
[85.62949371 75.34632111]
[81.74720764 60.85743332]
[77.86492157 46.36854553]
[73.98263550 31.87965775]
[70.10034943 17.39076996]
[66.21806335 2.90188217]
[61.70747757 -11.40387249]
[56.57717896 -25.49926186]
[51.44687653 -39.59465027]
[46.31657410 -53.69004059]
[31.24594307 -56.98847198]
[20.36718178 -67.92721558]
[17.15165901 -83.01575470]
[22.62544060 -97.43939209]
[35.04185867 -106.59559631]
[50.43888474 -107.56265259]
[63.90337753 -100.03199005]
[71.13887024 -86.40660095]
[69.83654022 -71.03430176]
[60.41196060 -58.82034302]
[65.54226685 -44.72495270]
[70.67256927 -30.62956429]
[75.80287170 -16.53417397]
[79.96139526 -13.63844585]
[82.15364075 -7.96063232]
[80.70695496 -0.98040348]
[84.58924103 13.50848389]
[88.47152710 27.99737167]
[92.35381317 42.48625946]
[96.23609924 56.97514725]
[100.11838531 71.46403503]
[113.50405121 74.86126709]
[123.72698975 84.14613342]
[128.39294434 97.14405823]
[126.40909576 110.81086731]
[138.30940247 119.94229126]
[153.77407837 118.07647705]
[165.71260071 127.50656128]
[167.39605713 142.26127625]
[179.29637146 151.39270020]
[194.95494080 153.65530396]
[200.34199524 167.54158020]
[216.66262817 169.14448547]
[223.18743896 184.18971252]
[213.20426941 197.20002747]
[196.98294067 194.79153442]
[191.21058655 179.44187927]
[176.40318298 177.83242798]
[170.16494751 163.29299927]
[158.26464844 154.16157532]
[143.57696533 156.35427856]
[131.37829590 147.26324463]
[129.17797852 131.84259033]
[117.27767944 122.71117401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 40]
[25 39]
[26 38]
[27 37]
[52 71]
[53 70]
[56 67]
[57 66]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
