%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUAGAUGUGGCUCGCUUACGCUGAGAGGAAAGCCUUUGGCUUCUUUUGAUCUCUUUUUCUUUUGUCGCU\
) } def
/len { sequence length } bind def

/coor [
[89.52909088 228.39965820]
[78.22703552 238.79960632]
[63.23569489 242.13955688]
[48.58765793 237.52104187]
[38.22317886 226.18644714]
[34.93024826 211.18470764]
[39.59464645 196.55122375]
[50.96167755 186.22232056]
[65.97366333 182.97642517]
[70.48425293 168.67066956]
[74.99484253 154.36491394]
[79.50542450 140.05915833]
[84.01601410 125.75341034]
[77.14452362 119.90861511]
[72.29752350 112.30035400]
[69.90435791 103.60255432]
[55.03268814 101.64466095]
[40.09716415 108.41682434]
[26.92390060 98.64967346]
[29.06441879 82.39082336]
[44.31673813 76.36598206]
[56.99058151 86.77298737]
[71.86225128 88.73088074]
[80.21106720 74.88307953]
[95.14758301 66.71038818]
[113.02433014 67.18321228]
[114.98222351 52.31153488]
[116.94011688 37.43986511]
[118.89801025 22.56819153]
[120.85589600 7.69651794]
[122.81378937 -7.17515516]
[124.77168274 -22.04682732]
[122.75224304 -31.28615379]
[127.15309143 -37.51908112]
[129.75781250 -52.29119492]
[132.36253357 -67.06331635]
[129.15849304 -83.71174622]
[144.26933289 -91.39932251]
[155.83956909 -79.00715637]
[147.13465881 -64.45858765]
[144.52993774 -49.68647385]
[141.92521667 -34.91435623]
[139.64335632 -20.08893585]
[137.68547058 -5.21726227]
[135.72756958 9.65441036]
[133.76968384 24.52608299]
[131.81178284 39.39775467]
[129.85389709 54.26942825]
[127.89600372 69.14110565]
[137.02742004 81.04140472]
[151.89909363 82.99929810]
[162.48225403 71.65133667]
[177.72076416 68.72431946]
[191.75511169 75.34375763]
[199.18878174 88.96433258]
[197.16340637 104.34865570]
[186.45776367 115.58114624]
[171.18838501 118.34267426]
[157.22668457 111.57138062]
[149.94120789 97.87097168]
[135.06953430 95.91307831]
[133.38507080 107.90240479]
[127.84529877 118.27793884]
[119.33331299 125.88623810]
[109.04441833 129.97499084]
[98.32176971 130.26399231]
[93.81118011 144.56974792]
[89.30059052 158.87550354]
[84.79000854 173.18125916]
[80.27941895 187.48701477]
[90.71475220 198.75640869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[16 23]
[17 22]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[34 42]
[35 41]
[36 40]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
