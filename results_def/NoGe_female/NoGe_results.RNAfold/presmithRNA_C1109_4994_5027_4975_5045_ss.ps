%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUUGUUGUUGGUUUUAUAAUAGGUGAUUUCUGCCCGGUGUUUUUAGAAUAAACGGCCGCGGUACUCUG\
) } def
/len { sequence length } bind def

/coor [
[-10.40492344 170.50498962]
[-21.17173386 162.18743896]
[-28.76527023 150.92625427]
[-43.25415802 154.80854797]
[-57.74304581 158.69082642]
[-72.23193359 162.57312012]
[-86.72081757 166.45539856]
[-101.20970917 170.33769226]
[-115.69859314 174.21997070]
[-130.18748474 178.10226440]
[-144.67637634 181.98454285]
[-151.12068176 196.23252869]
[-165.23803711 202.95816040]
[-180.36267090 198.98580933]
[-189.35317993 186.19108582]
[-187.96452332 170.61528015]
[-176.85238647 159.61280823]
[-161.26358032 158.37869263]
[-148.55865479 167.49565125]
[-134.06976318 163.61337280]
[-119.58087921 159.73107910]
[-105.09199524 155.84880066]
[-90.60310364 151.96652222]
[-76.11421967 148.08422852]
[-61.62533188 144.20195007]
[-47.13644409 140.31965637]
[-32.64755630 136.43737793]
[-30.97081375 120.14778137]
[-23.26502037 105.65777588]
[-10.64135456 95.11443329]
[5.05806589 90.09152985]
[21.52897072 91.35469055]
[36.34313965 98.74482727]
[47.30638885 111.19757080]
[61.40177536 106.06726837]
[75.49716949 100.93696594]
[89.59255219 95.80666351]
[103.57266998 90.37009430]
[117.43087006 84.62984467]
[131.28906250 78.88959503]
[145.14724731 73.14934540]
[158.87692261 67.10813904]
[172.47154236 60.76886749]
[186.06616211 54.42959213]
[199.66078186 48.09032059]
[203.53303528 32.93975830]
[216.26803589 23.86484718]
[231.85267639 25.15048790]
[242.92839050 36.18963623]
[244.26553345 51.76994705]
[235.23277283 64.53486633]
[220.09509277 68.45719910]
[206.00004578 61.68493652]
[192.40542603 68.02420807]
[178.81082153 74.36348724]
[165.21620178 80.70275879]
[160.33467102 86.56685638]
[150.88749695 87.00753784]
[137.02931213 92.74778748]
[123.17111969 98.48803711]
[109.31292725 104.22828674]
[103.44948578 110.15424347]
[94.72285461 109.90205383]
[80.62747192 115.03235626]
[66.53208160 120.16265869]
[52.43669128 125.29296112]
[52.57143021 139.05982971]
[48.37891388 152.14913940]
[40.29804230 163.23835754]
[29.15983009 171.21180725]
[16.10194588 175.27301025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[34 66]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[40 59]
[41 58]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
