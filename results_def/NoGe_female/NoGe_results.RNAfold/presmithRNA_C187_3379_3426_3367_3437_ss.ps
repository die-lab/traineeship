%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCGGGCUCAUACCCCGGAAAUGAGUGUUGUGGUGGGCUCCUCUGCUGGUGGGUUCUGGCUAGUUUG\
) } def
/len { sequence length } bind def

/coor [
[124.99358368 333.89593506]
[123.68624115 318.95303345]
[122.37890625 304.01010132]
[121.07157135 289.06716919]
[119.43856812 274.15634155]
[117.48067474 259.28466797]
[115.52278137 244.41299438]
[113.56488800 229.54132080]
[111.60699463 214.66964722]
[109.64910126 199.79797363]
[107.36725616 184.97254944]
[104.76252747 170.20043945]
[102.15780640 155.42831421]
[99.55308533 140.65620422]
[96.94836426 125.88408661]
[84.48436737 120.94190979]
[76.12657928 110.45745087]
[74.08689880 97.20542908]
[78.90512085 84.69299316]
[89.30610657 76.23155212]
[87.34821320 61.35987854]
[85.39031982 46.48820877]
[83.43242645 31.61653328]
[74.12799072 25.25457001]
[70.11365509 14.96171379]
[72.55343628 4.41581249]
[80.35176849 -2.76509261]
[79.69747925 -17.75081635]
[79.04318237 -32.73653793]
[78.38889313 -47.72226334]
[70.05699921 -61.17180252]
[77.23178101 -74.22445679]
[65.41178131 -84.71555328]
[64.55551147 -100.49662781]
[75.17098999 -112.20505524]
[90.96023560 -112.89442444]
[102.55577087 -102.15575409]
[103.07817078 -86.36009979]
[92.21750641 -74.87874603]
[100.50260162 -62.50108719]
[93.37461853 -48.37655258]
[94.02890778 -33.39083099]
[94.68319702 -18.40510750]
[95.33748627 -3.41938353]
[107.04042053 11.73104000]
[98.30410004 29.65864182]
[100.26199341 44.53031540]
[102.21988678 59.40198898]
[104.17778015 74.27365875]
[118.50563812 81.64680481]
[125.76001740 96.03515625]
[123.16805267 111.93900299]
[111.72048187 123.27936554]
[114.32520294 138.05148315]
[116.92992401 152.82359314]
[119.53464508 167.59571838]
[122.13937378 182.36782837]
[126.84366608 190.57226562]
[124.52077484 197.84008789]
[126.47866821 212.71176147]
[128.43656921 227.58341980]
[130.39445496 242.45509338]
[132.35235596 257.32678223]
[134.31024170 272.19845581]
[138.65219116 280.60028076]
[136.01449585 287.75985718]
[137.32182312 302.70275879]
[138.62916565 317.64569092]
[139.93650818 332.58862305]
[147.34030151 347.84048462]
[134.73403931 359.17709351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[20 49]
[21 48]
[22 47]
[23 46]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
