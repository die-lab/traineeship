%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCAGGAUGGCUUUAUAGUUGAAGUACAACGUCAAAUUGCAGCUUUGAAGGUAUAUUUUUUAUUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[94.55517578 109.53950500]
[90.25680542 106.92090607]
[87.29774475 102.35218048]
[73.70313263 96.01290131]
[60.10851288 89.67362976]
[46.51389694 83.33435822]
[32.91928101 76.99507904]
[18.93916321 71.55850983]
[4.63340855 67.04792023]
[-9.67234612 62.53733826]
[-23.97809982 58.02674866]
[-38.62253952 54.78015518]
[-53.49421310 52.82226181]
[-68.36588287 50.86436844]
[-83.23755646 48.90647507]
[-98.10923004 46.94858551]
[-112.98090363 44.99069214]
[-127.91642761 51.76285172]
[-141.08969116 41.99570847]
[-138.94917297 25.73685837]
[-123.69685364 19.71201324]
[-111.02301025 30.11901855]
[-96.15133667 32.07691193]
[-81.27966309 34.03480530]
[-66.40798950 35.99269867]
[-51.53631973 37.95058823]
[-36.66464615 39.90848160]
[-34.23466110 37.96653366]
[-30.77124214 37.03475189]
[-26.72557068 37.56221390]
[-22.72148323 39.79599380]
[-19.46751404 43.72099686]
[-5.16175890 48.23158264]
[9.14399529 52.74216843]
[23.44974899 57.25275803]
[26.95347023 55.70563889]
[31.43728828 55.98867416]
[35.92429352 58.56784821]
[39.25855637 63.40046310]
[52.85317230 69.73973846]
[66.44779205 76.07901001]
[80.04240417 82.41828918]
[93.63702393 88.75756073]
[107.61714172 94.19412994]
[121.92289734 98.70471954]
[136.22865295 103.21530151]
[150.53440857 107.72589111]
[164.84016418 112.23648071]
[179.14590454 116.74706268]
[193.45166016 121.25765228]
[208.93977356 118.02825165]
[218.75134277 129.23460388]
[233.05709839 133.74519348]
[245.45002747 124.40737915]
[260.96530151 124.17098236]
[273.63696289 133.12689209]
[278.59252930 147.83137512]
[273.92645264 162.63027954]
[261.43295288 171.83309937]
[245.91603088 171.90118408]
[233.34225464 162.80833435]
[228.54650879 148.05094910]
[214.24075317 143.54035950]
[199.77587891 147.09239197]
[188.94108582 135.56340027]
[174.63533020 131.05282593]
[160.32957458 126.54223633]
[146.02381897 122.03164673]
[131.71806335 117.52105713]
[117.41230774 113.01047516]
[103.10655212 108.49988556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 35]
[9 34]
[10 33]
[11 32]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
