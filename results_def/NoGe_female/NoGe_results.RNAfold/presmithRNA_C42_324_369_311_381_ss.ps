%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGUUGGUUCUUUUGCUGGGUUCUGGGGCUGUGGAGGGUGGUGUGGGGACUGGCUGGACGGUUUAUCCU\
) } def
/len { sequence length } bind def

/coor [
[112.02346802 135.76591492]
[104.52346802 122.77553558]
[97.02346802 109.78515625]
[90.38287354 104.74536896]
[89.49385071 96.06047821]
[82.56761932 82.75531769]
[75.64139557 69.45015717]
[68.71516418 56.14499283]
[61.78893661 42.83983231]
[54.86270523 29.53466988]
[47.93647766 16.22950745]
[41.01024628 2.92434454]
[34.08401871 -10.38081837]
[27.15778923 -23.68597984]
[13.92251015 -32.35419464]
[14.90877914 -47.21611023]
[7.98254967 -60.52127457]
[1.05632031 -73.82643890]
[-5.86990881 -87.13159943]
[-12.79613781 -100.43675995]
[-27.60042953 -105.28141785]
[-34.43507385 -118.87341309]
[-29.72519875 -132.95718384]
[-36.65142822 -146.26234436]
[-43.57765961 -159.56750488]
[-50.50388718 -172.87266541]
[-57.43011475 -186.17784119]
[-72.57640839 -190.69064331]
[-80.02182007 -204.63128662]
[-75.34912872 -219.72901917]
[-61.33055115 -227.02662659]
[-46.28306580 -222.19456482]
[-39.13407898 -208.09962463]
[-44.12495422 -193.10406494]
[-37.19872284 -179.79890442]
[-30.27249527 -166.49374390]
[-23.34626579 -153.18858337]
[-16.42003632 -139.88340759]
[-2.18181229 -135.66339111]
[5.03190613 -122.26873779]
[0.50902444 -107.36299133]
[7.43525362 -94.05783081]
[14.36148262 -80.75266266]
[21.28771210 -67.44750214]
[28.21394157 -54.14234161]
[40.95381165 -46.42580032]
[40.46295166 -30.61220932]
[47.38917923 -17.30704689]
[54.31541061 -4.00188494]
[61.24163818 9.30327797]
[68.16786957 22.60844040]
[75.09410095 35.91360092]
[82.02032471 49.21876526]
[88.94655609 62.52392960]
[95.87278748 75.82909393]
[102.79901123 89.13425446]
[110.01384735 102.28515625]
[117.51384735 115.27553558]
[125.01384735 128.26591492]
[140.01536560 132.46020508]
[147.43638611 145.74114990]
[143.34532166 160.01695251]
[150.84532166 173.00733948]
[165.90719604 178.53175354]
[170.84207153 193.79695129]
[161.86431885 207.09280396]
[145.86090088 208.21984863]
[135.10827637 196.31352234]
[137.85493469 180.50733948]
[130.35493469 167.51695251]
[115.94618988 163.92201233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
