%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUAGGUGAUAGAGAUGUGUUGAUGGUUUUAAGUACUGUGAAGGAAUGUUUUAAAGGUUUGGAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[76.09694672 129.79377747]
[66.52162170 118.39084625]
[62.03367615 104.19322968]
[63.31510162 89.35841370]
[50.00994110 82.43218994]
[36.70477676 75.50595856]
[23.39961433 68.57972717]
[10.09445190 61.65349960]
[-2.86038041 69.78488922]
[-18.04565430 70.33647919]
[-31.37954330 63.26019669]
[-39.32799530 50.54492569]
[-39.84124756 35.65861893]
[-53.14641190 28.73238945]
[-66.45157623 21.80615997]
[-79.75673676 14.87993050]
[-93.06189728 7.95370150]
[-108.87548828 8.44456005]
[-116.59202576 -4.29530907]
[-129.89718628 -11.22153854]
[-143.20234680 -18.14776802]
[-159.55337524 -16.89226532]
[-168.59162903 -30.57590103]
[-161.01934814 -45.12212372]
[-144.62623596 -45.56702423]
[-136.27612305 -31.45293045]
[-122.97096252 -24.52670097]
[-109.66580200 -17.60047150]
[-94.80388641 -18.58674049]
[-86.13566589 -5.35146093]
[-72.83050537 1.57476830]
[-59.52534485 8.50099754]
[-46.22018051 15.42722702]
[-32.91501999 22.35345650]
[-20.42647934 14.23545361]
[-5.45169544 13.45326424]
[7.99286079 20.31695747]
[16.25094223 33.07238388]
[17.02068138 48.34833527]
[30.32584381 55.27456665]
[43.63100815 62.20079422]
[56.93616867 69.12702179]
[70.24133301 76.05325317]
[81.65830231 66.49466705]
[95.86248779 62.02756119]
[110.69540405 63.33075714]
[123.90305328 70.20622253]
[133.47837830 81.60915375]
[137.96632385 95.80677032]
[136.68489075 110.64158630]
[152.49848938 110.15072632]
[160.21502686 122.89059448]
[173.52018738 129.81681824]
[186.82534790 136.74305725]
[200.13050842 143.66928101]
[213.43568420 150.59550476]
[226.74084473 157.52174377]
[243.09185791 156.26623535]
[252.13011169 169.94987488]
[244.55783081 184.49609375]
[228.16471863 184.94099426]
[219.81460571 170.82690430]
[206.50944519 163.90068054]
[193.20428467 156.97444153]
[179.89912415 150.04821777]
[166.59396362 143.12199402]
[153.28880310 136.19575500]
[138.42687988 137.18202209]
[129.75866699 123.94674683]
[118.34169769 133.50532532]
[104.13751221 137.97244263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[50 69]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
