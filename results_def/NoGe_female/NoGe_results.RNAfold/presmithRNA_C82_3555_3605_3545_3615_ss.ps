%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUGCUGGUUUUAGGAUGUAGCAUCAGUGUGAGAUCUUAGGGUUUAAAAUAGCGGGAGCUUGACUUAGU\
) } def
/len { sequence length } bind def

/coor [
[69.53351593 126.43275452]
[65.37879944 120.69466400]
[62.29208755 114.31818390]
[60.36861420 107.50000000]
[45.36861420 107.50000000]
[30.36861229 107.50000000]
[15.36861324 107.50000000]
[0.36861289 107.50000000]
[-14.63138676 107.50000000]
[-29.63138771 107.50000000]
[-44.63138580 107.50000000]
[-58.43156052 115.23729706]
[-71.15882874 107.50000000]
[-86.15882874 107.50000000]
[-101.15882874 107.50000000]
[-113.47406006 117.78176880]
[-129.16154480 114.42288971]
[-136.18721008 100.00000000]
[-129.16154480 85.57711029]
[-113.47406006 82.21823120]
[-101.15882874 92.50000000]
[-86.15882874 92.50000000]
[-71.15882874 92.50000000]
[-58.43156052 84.76270294]
[-44.63138580 92.50000000]
[-29.63138771 92.50000000]
[-14.63138676 92.50000000]
[0.36861289 92.50000000]
[15.36861324 92.50000000]
[30.36861229 92.50000000]
[45.36861420 92.50000000]
[60.36861420 92.50000000]
[77.59117889 66.46282959]
[108.23717499 60.51524734]
[113.97743225 46.65705490]
[119.71768188 32.79886246]
[125.45793152 18.94066811]
[131.19818115 5.08247471]
[128.52236938 -11.09689713]
[141.36621094 -21.29337120]
[156.51704407 -15.01768970]
[158.38900757 1.27426517]
[145.05638123 10.82272625]
[139.31613159 24.68091965]
[133.57588196 38.53911209]
[127.83562469 52.39730453]
[122.09537506 66.25550079]
[127.92293549 70.89318848]
[132.79847717 76.52326202]
[136.55575562 82.95377350]
[139.06668091 89.96546936]
[140.24563599 97.31929016]
[140.05241394 104.76451111]
[154.35816956 109.27510071]
[168.66392517 113.78568268]
[184.54852295 109.70993042]
[195.82560730 121.61620331]
[190.89428711 137.25634766]
[174.82748413 140.54112244]
[164.15333557 128.09144592]
[149.84757996 123.58084869]
[135.54183960 119.07026672]
[131.65711975 124.99447632]
[126.79582214 130.14764404]
[121.10791779 134.37081909]
[114.76886749 137.53369141]
[107.97421265 139.53869629]
[100.93357086 140.32400513]
[93.86413574 139.86537170]
[86.98397064 138.17695618]
[80.50534058 135.31083679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
