%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGCGCGGCGCUGAAGACGCCGAGGUGGUCCUGUGGAUUCCCAGAUACGGUUUCUUAUAAAAUAGUGU\
) } def
/len { sequence length } bind def

/coor [
[115.17798615 131.67539978]
[108.09121704 134.17944336]
[100.63393402 135.11837769]
[93.14762878 134.44920349]
[85.97509766 132.20256042]
[79.44478607 128.48132324]
[73.85571289 123.45589447]
[69.46382141 117.35639191]
[66.47021484 110.46212769]
[51.52729416 111.76946259]
[36.58437729 113.07679749]
[21.64145470 114.38413239]
[6.69853449 115.69146729]
[-2.12200427 128.60394287]
[-17.19278526 132.77595520]
[-31.39784622 126.23757935]
[-38.02999115 112.07605743]
[-33.95772552 96.97802734]
[-21.10384750 88.07230377]
[-5.53756523 89.56391144]
[5.39119816 100.74855042]
[20.33411789 99.44121552]
[35.27703857 98.13387299]
[50.21995926 96.82653809]
[65.16287994 95.51920319]
[74.10379791 76.27050018]
[92.50000000 65.68597412]
[92.50000000 50.68597412]
[84.76270294 36.88579941]
[92.50000000 24.15852928]
[92.50000000 9.15852833]
[92.50000000 -5.84147120]
[92.50000000 -20.84147072]
[92.50000000 -35.84147263]
[86.45365906 -51.68060303]
[100.00000000 -61.87535858]
[113.54634094 -51.68060303]
[107.50000000 -35.84147263]
[107.50000000 -20.84147072]
[107.50000000 -5.84147120]
[107.50000000 9.15852833]
[107.50000000 24.15852928]
[115.23729706 36.88579941]
[107.50000000 50.68597412]
[107.50000000 65.68597412]
[124.07822418 74.42771912]
[133.80097961 90.45031738]
[133.90002441 109.19187164]
[147.20518494 116.11810303]
[160.51036072 123.04433441]
[173.81552124 129.97056580]
[189.62910461 129.47970581]
[197.34564209 142.21957397]
[210.65080261 149.14579773]
[223.95597839 156.07203674]
[237.26113892 162.99826050]
[252.25668335 158.00738525]
[266.35162354 165.15637207]
[271.18368530 180.20385742]
[263.88607788 194.22242737]
[248.78834534 198.89512634]
[234.84771729 191.44970703]
[230.33489990 176.30342102]
[217.02973938 169.37719727]
[203.72457886 162.45095825]
[190.41941833 155.52473450]
[175.55749512 156.51100159]
[166.88928223 143.27572632]
[153.58412170 136.34948730]
[140.27896118 129.42326355]
[126.97380066 122.49703217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[27 45]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[48 71]
[49 70]
[50 69]
[51 68]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
