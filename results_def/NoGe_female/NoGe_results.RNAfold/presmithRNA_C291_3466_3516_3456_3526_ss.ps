%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUGCCCAGGUUUGCACAUGAUAGUUUAGGCGUGCUAGCAGCUAAGGGGUUGUUCUUAAUGGGUGGUUU\
) } def
/len { sequence length } bind def

/coor [
[84.78517914 241.20263672]
[77.03363800 227.62149048]
[79.87625122 212.24444580]
[91.97083282 202.33207703]
[91.97083282 187.33207703]
[91.97083282 172.33207703]
[91.97083282 157.33207703]
[91.97083282 142.33207703]
[91.97083282 127.33207703]
[91.97083282 112.33207703]
[84.75600433 99.18117523]
[72.10513306 91.12168121]
[59.45426178 83.06218719]
[43.65806580 82.17292786]
[37.08124161 68.80899811]
[24.43037033 60.74950409]
[11.77949905 52.69001007]
[2.55237198 50.61553955]
[-1.23669791 43.99286652]
[-10.36455536 41.51788712]
[-13.86114216 34.73624039]
[-25.76144218 25.60481834]
[-37.66174316 16.47339821]
[-53.98236465 14.87050056]
[-60.50717545 -0.17472744]
[-50.52400970 -13.18504620]
[-34.30268860 -10.77655411]
[-28.53032112 4.57309723]
[-16.63002014 13.70451832]
[-4.72972059 22.83593941]
[7.36694860 31.70558548]
[19.83899307 40.03913879]
[32.48986435 48.09863281]
[45.14073563 56.15812683]
[60.03205872 56.47091293]
[67.51375580 70.41130829]
[80.16462708 78.47080994]
[92.81549835 86.53030396]
[107.81549835 86.53030396]
[120.46636963 78.47080994]
[133.11724854 70.41130829]
[145.76811218 62.35181808]
[158.41899109 54.29232407]
[171.06985474 46.23283005]
[183.72073364 38.17333603]
[190.80894470 23.38518906]
[207.17845154 22.39964294]
[215.98970032 36.23054504]
[208.17843628 50.64984512]
[191.78022766 50.82420731]
[179.12934875 58.88370132]
[166.47848511 66.94319916]
[153.82760620 75.00269318]
[141.17674255 83.06218719]
[128.52586365 91.12168121]
[115.87499237 99.18117523]
[130.84988403 98.31356812]
[140.95455933 109.39939880]
[138.70692444 124.23004150]
[125.77125549 131.82402039]
[111.72589111 126.55830383]
[106.97083282 112.33207703]
[106.97083282 127.33207703]
[106.97083282 142.33207703]
[106.97083282 157.33207703]
[106.97083282 172.33207703]
[106.97083282 187.33207703]
[106.97083282 202.33207703]
[119.06542206 212.24444580]
[121.90803528 227.62149048]
[114.15649414 241.20263672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[17 32]
[19 31]
[21 30]
[22 29]
[23 28]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
