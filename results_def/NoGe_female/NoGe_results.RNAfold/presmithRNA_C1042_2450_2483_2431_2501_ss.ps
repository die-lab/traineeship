%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUGUCUGGUGGGGGCGGAAGGAUGUUUUGGUUUUUCGGGCUGAGGGUGUUUGUUGCGAGGCUAGGGGA\
) } def
/len { sequence length } bind def

/coor [
[72.57080078 342.34918213]
[56.90171814 340.28631592]
[47.34709167 327.69723511]
[49.57551193 312.05084229]
[62.26489639 302.62985229]
[56.25503159 289.00155640]
[65.72742462 276.32934570]
[67.68531799 261.45767212]
[69.64321136 246.58601379]
[71.60110474 231.71434021]
[73.55899811 216.84266663]
[75.51689148 201.97099304]
[64.90865326 193.58399963]
[59.86406326 180.91923523]
[61.83187866 167.31912231]
[70.39447784 156.43183899]
[83.35057831 151.23278809]
[85.95529938 136.46067810]
[88.56002045 121.68856049]
[91.16474152 106.91644287]
[93.44659424 92.09101868]
[95.40448761 77.21935272]
[97.36238098 62.34767532]
[91.49256134 47.65564728]
[100.82490540 36.04717636]
[102.78279877 21.17550468]
[100.76335907 11.93617916]
[105.16420746 5.70325279]
[107.76892853 -9.06886387]
[110.37364960 -23.84098053]
[112.97837830 -38.61309814]
[115.58309937 -53.38521194]
[118.18782043 -68.15732574]
[120.79254150 -82.92944336]
[123.39727020 -97.70156097]
[126.00199127 -112.47367859]
[122.79794312 -129.12211609]
[137.90878296 -136.80969238]
[149.47901917 -124.41751862]
[140.77410889 -109.86895752]
[138.16938782 -95.09683990]
[135.56466675 -80.32472229]
[132.95993042 -65.55260468]
[130.35520935 -50.78049088]
[127.75048828 -36.00837326]
[125.14576721 -21.23625755]
[122.54104614 -6.46414089]
[119.93632507 8.30797482]
[117.65447235 23.13339806]
[115.69657898 38.00506973]
[121.70644379 51.63338089]
[112.23405457 64.30557251]
[110.27616119 79.17723846]
[108.31826782 94.04891205]
[110.51857758 102.08978271]
[105.93685913 109.52116394]
[103.33213806 124.29328156]
[100.72741699 139.06539917]
[98.12269592 153.83750916]
[109.97510529 165.69122314]
[112.51667023 182.09405518]
[104.95829010 196.68719482]
[90.38855743 203.92889404]
[88.43067169 218.80056763]
[86.47277832 233.67224121]
[84.51488495 248.54389954]
[82.55699158 263.41558838]
[80.59909821 278.28726196]
[86.46891785 292.97927856]
[77.13657379 304.58773804]
[86.95524597 316.97198486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[17 59]
[18 58]
[19 57]
[20 56]
[21 54]
[22 53]
[23 52]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
