%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUUUAC\
) } def
/len { sequence length } bind def

/coor [
[109.19365692 118.83741760]
[101.64640045 120.89643097]
[93.86981201 120.04476166]
[86.94710541 116.40102386]
[81.84255219 110.47276306]
[79.26718140 103.08573914]
[64.62274170 99.83914948]
[49.97830200 96.59255219]
[32.73268127 102.61410522]
[20.11675835 90.61208344]
[5.34464216 88.00736237]
[-9.42747402 85.40264130]
[-24.19959068 82.79792023]
[-33.51821136 84.41242981]
[-39.55324173 79.74388885]
[-54.19768143 76.49729156]
[-68.84212494 73.25070190]
[-82.03498077 81.95265198]
[-97.49994659 78.69529724]
[-106.06193542 65.41117096]
[-102.64125824 49.98151016]
[-89.26734924 41.56045532]
[-73.87471771 45.14406967]
[-65.59552765 58.60625839]
[-50.95108795 61.85285187]
[-36.30664825 65.09944916]
[-21.59486771 68.02580261]
[-6.82275152 70.63052368]
[7.94936466 73.23524475]
[22.72148132 75.83997345]
[33.00113297 69.09959412]
[45.49414062 71.36922455]
[53.22489548 81.94811249]
[67.86933136 85.19470978]
[82.51377869 88.44129944]
[102.28198242 79.16339111]
[119.57349396 92.50000000]
[134.57348633 92.50000000]
[149.57348633 92.50000000]
[164.57348633 92.50000000]
[179.57348633 92.50000000]
[194.57348633 92.50000000]
[209.44515991 90.54210663]
[223.93405151 86.65982056]
[238.42294312 82.77753448]
[252.91183472 78.89524841]
[264.23919678 67.84984589]
[278.53536987 72.02944183]
[287.76983643 58.91060257]
[303.79214478 58.09481049]
[314.31134033 70.20787811]
[311.25799561 85.95768738]
[296.97436523 93.26234436]
[282.41766357 86.51833344]
[272.12661743 97.28604889]
[256.79409790 93.38414001]
[242.30522156 97.26642609]
[227.81634521 101.14871216]
[213.32745361 105.03099823]
[224.46078491 115.08330536]
[225.62373352 130.03816223]
[216.17826843 141.69076538]
[201.30651855 143.64807129]
[189.16767883 134.83622742]
[186.42155457 120.08975220]
[194.57348633 107.50000000]
[179.57348633 107.50000000]
[164.57348633 107.50000000]
[149.57348633 107.50000000]
[134.57348633 107.50000000]
[119.57349396 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[10 30]
[11 29]
[12 28]
[13 27]
[15 26]
[16 25]
[17 24]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 59]
[44 58]
[45 57]
[46 56]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
