%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAUAGGGGGGGCUACCGUUUGCUUGAGGUUGAUCACCGGACUGUGGUGCCUGUGGGGGUUGACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[147.24588013 221.19468689]
[140.31964111 207.88952637]
[133.39341736 194.58436584]
[120.65354919 186.86781311]
[121.14440918 171.05422974]
[114.21817780 157.74906921]
[110.64669800 156.36553955]
[107.67629242 152.99485779]
[106.32725525 147.99832153]
[107.38674927 142.22346497]
[102.25644684 128.12808228]
[97.12614441 114.03269196]
[86.53989410 104.89907837]
[88.77846527 91.09761047]
[83.64816284 77.00222015]
[78.51786041 62.90683365]
[73.38755798 48.81144333]
[68.25725555 34.71605682]
[56.26663208 24.39444733]
[59.18433380 9.78841209]
[54.05403137 -4.30697727]
[48.92372894 -18.40236664]
[43.79342651 -32.49775696]
[38.66312408 -46.59314346]
[27.16567230 -52.87694168]
[23.28479385 -64.96681976]
[28.62574577 -76.03832245]
[24.11515808 -90.34407806]
[19.60457039 -104.64983368]
[5.47202921 -111.72421265]
[0.56049454 -126.74594116]
[7.78389359 -140.80290222]
[22.85671234 -145.55534363]
[36.83651352 -138.18373108]
[41.42932892 -123.06150055]
[33.91032410 -109.16042328]
[38.42091370 -94.85466766]
[42.93149948 -80.54891205]
[56.47755051 -69.60749817]
[52.75851440 -51.72344589]
[57.88881683 -37.62805939]
[63.01911926 -23.53266907]
[68.14942169 -9.43727970]
[73.27972412 4.65810966]
[84.90338898 13.97152042]
[82.35264587 29.58575249]
[87.48294830 43.68114090]
[92.61325073 57.77653122]
[97.74355316 71.87191772]
[102.87385559 85.96730804]
[113.46010590 95.10092163]
[111.22153473 108.90238953]
[116.35183716 122.99777985]
[121.48213959 137.09317017]
[127.52333832 150.82284546]
[134.44956970 164.12800598]
[147.68484497 172.79621887]
[146.69857788 187.65812683]
[153.62481689 200.96328735]
[160.55104065 214.26846313]
[175.80505371 213.74134827]
[189.77369690 219.89276123]
[199.68347168 231.50132751]
[203.56680298 246.26217651]
[200.65263367 261.24450684]
[191.51959229 273.47360229]
[177.98104858 280.52130127]
[162.72508240 280.98834229]
[148.78077698 274.78198242]
[138.91677856 263.13446045]
[135.09161377 248.35844421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[10 54]
[11 53]
[12 52]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
