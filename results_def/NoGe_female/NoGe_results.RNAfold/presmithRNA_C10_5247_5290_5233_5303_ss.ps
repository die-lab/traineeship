%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUAGGCUUGCUUUAAAAGGUUUGGUUGGGGUGACCGGAGAAGAUGUGGAUCUUCUUUUUUGUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.57563019 115.51832581]
[70.93119049 118.76492310]
[59.13279343 129.30572510]
[45.03255081 124.50650787]
[30.38811111 127.75310516]
[15.74367046 130.99969482]
[1.09923029 134.24629211]
[-13.54520988 137.49288940]
[-28.18964958 140.73948669]
[-42.83409119 143.98606873]
[-57.47853088 147.23266602]
[-63.54222107 161.51591492]
[-76.86064148 169.47828674]
[-92.31258392 168.05807495]
[-103.95646667 157.80139160]
[-107.31497955 142.65213013]
[-101.09670258 128.43550110]
[-87.69268799 120.61808777]
[-72.25705719 122.20583344]
[-60.72512436 132.58822632]
[-46.08068466 129.34162903]
[-31.43624496 126.09503937]
[-16.79180336 122.84844971]
[-2.14736390 119.60185242]
[12.49707603 116.35526276]
[27.14151573 113.10866547]
[41.78595734 109.86206818]
[52.53688431 99.55348969]
[67.68459320 104.12048340]
[82.32903290 100.87388611]
[90.93267822 88.58660889]
[88.97478485 73.71493530]
[78.56778717 61.04109192]
[84.59262848 45.78876877]
[100.85147858 43.64825058]
[110.61862183 56.82151794]
[103.84645844 71.75704193]
[105.80435181 86.62871552]
[118.79473877 94.12871552]
[132.65292358 88.38845825]
[146.51112366 82.64820862]
[160.36930847 76.90795898]
[174.22750854 71.16770935]
[188.08569336 65.42745209]
[201.94389343 59.68720245]
[215.80207825 53.94695282]
[229.66027832 48.20670319]
[239.20874023 34.87407684]
[255.50070190 36.74603653]
[261.77636719 51.89687347]
[251.57989502 64.74069977]
[235.40052795 62.06489563]
[221.54234314 67.80514526]
[207.68414307 73.54539490]
[193.82595825 79.28565216]
[179.96775818 85.02590179]
[166.10955811 90.76615143]
[152.25137329 96.50640106]
[138.39317322 102.24665833]
[124.53498840 107.98690796]
[137.24821472 115.94766998]
[145.87577820 128.21817017]
[149.06539917 142.87512207]
[146.31713867 157.62120056]
[138.06173706 170.14512634]
[125.59317017 178.48387146]
[110.86574554 181.33044434]
[96.18783569 178.23866272]
[83.86006165 169.69314575]
[75.81467438 157.03329468]
[73.31270599 142.24342346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[31 38]
[32 37]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
