%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUUUACCUUUGUUUAGU\
) } def
/len { sequence length } bind def

/coor [
[58.74099350 192.17562866]
[49.60956955 204.07592773]
[46.73879623 213.08714294]
[39.81108475 216.28459167]
[30.16926956 227.77525330]
[30.12948799 243.81825256]
[17.47270775 253.67652893]
[1.90812922 249.78764343]
[-4.62443590 235.13482666]
[2.88623738 220.95845032]
[18.67860413 218.13343811]
[28.32041740 206.64277649]
[37.70927048 194.94450378]
[46.84069061 183.04420471]
[54.90018463 170.39332581]
[61.82641602 157.08816528]
[68.75264740 143.78300476]
[75.67887115 130.47784424]
[82.60510254 117.17268372]
[76.93555450 108.09413147]
[75.68847656 97.46358490]
[79.10298157 87.31938171]
[86.52436066 79.60660553]
[96.52960968 75.80413818]
[107.20028687 76.64107513]
[115.80393219 64.35379791]
[124.40757751 52.06651306]
[133.01123047 39.77923203]
[141.61486816 27.49195290]
[150.21852112 15.20467186]
[158.82215881 2.91739082]
[165.74839783 -10.38777161]
[170.87869263 -24.48316193]
[176.00900269 -38.57854843]
[181.13929749 -52.67393875]
[178.58854675 -68.28816986]
[190.21221924 -77.60158539]
[184.76257324 -92.69068146]
[193.28433228 -106.28330231]
[209.24032593 -107.95233917]
[220.39048767 -96.41746521]
[218.18136597 -80.52723694]
[204.30761719 -72.47128296]
[207.22531128 -57.86524582]
[195.23469543 -47.54363632]
[190.10438538 -33.44824982]
[184.97409058 -19.35285950]
[179.84378052 -5.25746965]
[194.46397400 -8.61159134]
[207.38130188 -0.98647678]
[211.50886536 13.43445396]
[204.58212280 26.73934555]
[190.40133667 31.62864113]
[176.74661255 25.41989517]
[171.10945129 11.52103710]
[162.50579834 23.80831718]
[153.90214539 36.09560013]
[145.29850769 48.38288116]
[136.69485474 60.67015839]
[128.09121704 72.95744324]
[119.48756409 85.24472046]
[124.17774963 103.59445190]
[114.35236359 119.78618622]
[95.91026306 124.09891510]
[88.98403931 137.40406799]
[82.05780792 150.70924377]
[75.13157654 164.01440430]
[68.20534515 177.31956482]
[68.67984009 182.39585876]
[67.42803955 186.80670166]
[64.94029236 190.04039001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[4 12]
[5 11]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
