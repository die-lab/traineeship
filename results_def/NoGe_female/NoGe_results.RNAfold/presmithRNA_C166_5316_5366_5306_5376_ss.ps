%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUUGAAUGUUUGAUCCAAGAUUUUUUGAUUCAGGGAAUUAGUUACUAUAGGGGUAACAGCGUAAUUUU\
) } def
/len { sequence length } bind def

/coor [
[135.12681580 113.77938080]
[120.35469818 111.17465973]
[105.58258057 108.56993103]
[97.45339203 110.41741180]
[90.22893524 105.51589966]
[75.58449554 102.26931000]
[60.94005203 99.02271271]
[46.29561234 95.77612305]
[31.65117264 92.52952576]
[17.00673103 89.28292847]
[6.09989214 101.50914764]
[-9.36736107 106.62494659]
[-25.23155594 103.35086823]
[-37.27095032 92.65286255]
[-42.32897949 77.45976257]
[-57.10109329 74.85504150]
[-71.87321472 72.25032043]
[-86.64532471 69.64559174]
[-103.29376221 72.84963989]
[-110.98133850 57.73880005]
[-98.58917236 46.16856003]
[-84.04060364 54.87347794]
[-69.26848602 57.47819901]
[-54.49637222 60.08292389]
[-39.72425461 62.68764496]
[-31.53085136 51.55389786]
[-19.24911118 45.06527328]
[-5.30081224 44.56698990]
[7.53489113 50.21650314]
[16.67519760 60.94054031]
[20.25332642 74.63848877]
[34.89776611 77.88508606]
[49.54220581 81.13168335]
[64.18664551 84.37827301]
[78.83108521 87.62487030]
[93.47552490 90.87145996]
[108.18730927 93.79782104]
[122.95941925 96.40254211]
[137.73153687 99.00726318]
[149.53205872 81.70751190]
[168.01481628 71.99782562]
[188.82937622 72.09667969]
[207.10775757 81.92162323]
[218.60295105 99.12249756]
[233.37506104 96.51777649]
[248.14717102 93.91305542]
[262.91928101 91.30832672]
[277.69140625 88.70360565]
[292.46353149 86.09888458]
[302.80624390 73.83480072]
[318.83868408 74.41854858]
[328.26211548 87.40232849]
[323.84768677 102.82608795]
[308.98178101 108.85804749]
[295.06823730 100.87100220]
[280.29614258 103.47572327]
[265.52401733 106.08044434]
[250.75190735 108.68516541]
[235.97978210 111.28989410]
[221.20767212 113.89461517]
[219.99612427 124.12234497]
[216.36874390 133.77459717]
[210.53076172 142.28881836]
[202.81640625 149.16725159]
[193.66984558 154.00614929]
[183.61950684 156.51936340]
[173.24765015 156.55532837]
[163.15658569 154.10617065]
[153.93368530 149.30845642]
[146.11724854 142.43569946]
[140.16499329 133.88264465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[15 25]
[16 24]
[17 23]
[18 22]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
