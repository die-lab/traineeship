%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGAUGAAGGGGAAGAUCGUGAGUUUGGCUGUCUCCUUUCUAUUUUUUGAAUUUGCUGUCUGUGUGAAGA\
) } def
/len { sequence length } bind def

/coor [
[249.82685852 221.25961304]
[250.75979614 204.90206909]
[238.10893250 196.84257507]
[225.45805359 188.78308105]
[212.80718994 180.72358704]
[200.15631104 172.66409302]
[187.50544739 164.60459900]
[172.61412048 164.29182434]
[165.13241577 150.35142517]
[152.48155212 142.29193115]
[139.83067322 134.23243713]
[127.17980957 126.17293549]
[114.52893066 118.11344147]
[101.87805939 110.05394745]
[93.66067505 108.64988708]
[88.86186981 101.35680389]
[76.57458496 92.75315857]
[64.28730774 84.14951324]
[48.54493332 82.57208252]
[42.55729294 68.93399048]
[30.27001381 60.33034897]
[14.52764130 58.75291824]
[8.54000378 45.11483002]
[-7.90269184 40.98274994]
[-8.48388481 24.03876686]
[7.63703060 18.78972435]
[17.14365005 32.82754898]
[32.00715256 33.78958893]
[38.87366104 48.04306793]
[51.16094208 56.64671326]
[66.02444458 57.60874939]
[72.89095306 71.86222839]
[85.17823029 80.46587372]
[97.46551514 89.06952667]
[109.93755341 97.40307617]
[122.58842468 105.46257019]
[135.23930359 113.52206421]
[147.89016724 121.58155823]
[160.54104614 129.64105225]
[173.19190979 137.70054626]
[188.98811340 138.58979797]
[195.56494141 151.95373535]
[208.21580505 160.01322937]
[220.86668396 168.07272339]
[233.51754761 176.13221741]
[246.16842651 184.19171143]
[258.81930542 192.25120544]
[271.03533936 185.09541321]
[285.08154297 183.97554016]
[298.15255737 189.05694580]
[307.66314697 199.27221680]
[311.75952148 212.54487610]
[309.68035889 226.21122742]
[321.96765137 234.81488037]
[334.25494385 243.41853333]
[346.54220581 252.02217102]
[358.82949829 260.62582397]
[373.88641357 256.40402222]
[388.11300659 262.89538574]
[394.79193115 277.03491211]
[390.76959229 292.14633179]
[377.94522095 301.09448242]
[362.37408447 299.65435791]
[351.40841675 288.50592041]
[350.22586060 272.91311646]
[337.93856812 264.30944824]
[325.65127563 255.70581055]
[313.36401367 247.10215759]
[301.07672119 238.49851990]
[286.75701904 245.66508484]
[270.67922974 244.71659851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[16 34]
[17 33]
[18 32]
[20 30]
[21 29]
[23 27]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
