%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGAAGGGGAAGAUCGUGAGUUUGGCUGUCUCCUUUCUAUUUUUUGAAUUUGCUGUCUGUGUGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[252.82728577 171.38896179]
[238.96908569 165.64871216]
[225.11090088 159.90846252]
[211.25270081 154.16821289]
[197.39450073 148.42794800]
[182.67510986 150.70578003]
[172.88635254 138.27633667]
[159.02815247 132.53608704]
[145.16995239 126.79583740]
[131.31176758 121.05558777]
[117.45357513 115.31533813]
[103.59538269 109.57508087]
[95.25901794 109.61929321]
[89.26668549 103.27030945]
[75.67206573 96.93103027]
[62.07745361 90.59175873]
[46.30032349 91.77192688]
[38.03542328 79.38077545]
[24.44080544 73.04150391]
[8.66367817 74.22167206]
[0.39877683 61.83052063]
[-16.51164627 60.61645889]
[-20.02630043 44.03081512]
[-5.06178474 36.06215286]
[6.73805094 48.23590469]
[21.54280090 46.60230637]
[30.78008080 59.44688797]
[44.37469864 65.78616333]
[59.17944717 64.15256500]
[68.41672516 76.99714661]
[82.01134491 83.33641815]
[95.60595703 89.67568970]
[109.33563232 95.71688843]
[123.19382477 101.45714569]
[137.05201721 107.19739532]
[150.91021729 112.93764496]
[164.76840210 118.67789459]
[178.62660217 124.41815186]
[194.33723450 122.55091095]
[203.13476562 134.56976318]
[216.99295044 140.31001282]
[230.85115051 146.05026245]
[244.70933533 151.79051208]
[258.56753540 157.53076172]
[268.87442017 147.62142944]
[282.16122437 142.46009827]
[296.36724854 142.81115723]
[309.30307007 148.58680725]
[318.98800659 158.86585999]
[323.95333862 172.04040527]
[323.46508789 186.06738281]
[337.05969238 192.40666199]
[350.65432739 198.74592590]
[364.24893188 205.08520508]
[377.84353638 211.42446899]
[391.93859863 204.65220642]
[407.07629395 208.57453918]
[416.10903931 221.33946228]
[414.77188110 236.91976929]
[403.69616699 247.95892334]
[388.11154175 249.24456787]
[375.37655640 240.16966248]
[371.50427246 225.01908875]
[357.90966797 218.67982483]
[344.31503296 212.34054565]
[330.72042847 206.00126648]
[317.12582397 199.66200256]
[305.09225464 209.95274353]
[289.73895264 214.05250549]
[274.06414795 211.10925293]
[261.15097046 201.65136719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[14 32]
[15 31]
[16 30]
[18 28]
[19 27]
[21 25]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
