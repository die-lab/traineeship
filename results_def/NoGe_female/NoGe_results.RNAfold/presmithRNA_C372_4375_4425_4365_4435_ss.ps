%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAUAAAACAUGUUUUUUUUAGGGUAUAGGUGAUAGAGAUGUGUUGAUGGUUUUAAGUACUGUGAAGGA\
) } def
/len { sequence length } bind def

/coor [
[53.24744034 173.21328735]
[42.23817062 163.02525330]
[35.50791550 149.61988831]
[33.91399384 134.70481873]
[37.65944672 120.17996216]
[46.26716614 107.89553070]
[58.64067078 99.41635895]
[73.20379639 95.82254791]
[88.09916687 97.57119751]
[78.45735168 86.08052826]
[68.81553650 74.58986664]
[59.17372513 63.09919739]
[49.53190994 51.60853195]
[39.89009857 40.11786652]
[30.24828339 28.62719917]
[20.60646820 17.13653183]
[10.96465492 5.64586496]
[1.32284069 -5.84480190]
[-8.31897354 -17.33546829]
[-23.11666870 -22.93357277]
[-25.37048531 -37.65666962]
[-35.01229858 -49.14733505]
[-44.65411377 -60.63800430]
[-59.94400406 -58.58305740]
[-73.90796661 -65.14135742]
[-82.09014893 -78.22016907]
[-81.87965393 -93.64609528]
[-73.34364319 -106.49678040]
[-59.20592880 -112.67161560]
[-43.97780228 -110.20022583]
[-32.51850891 -99.87123871]
[-28.48465919 -84.98058319]
[-33.16344833 -70.27981567]
[-23.52163315 -58.78915024]
[-13.87981892 -47.29848480]
[0.22822934 -42.52227020]
[3.17169333 -26.97728157]
[12.81350708 -15.48661613]
[22.45532227 -3.99594927]
[32.09713745 7.49471760]
[41.73894882 18.98538399]
[51.38076401 30.47605133]
[61.02257919 41.96671677]
[70.66439056 53.45738220]
[80.30620575 64.94805145]
[89.94802094 76.43872070]
[99.58983612 87.92938232]
[106.39713287 89.81661987]
[110.95776367 95.17155457]
[125.44664764 99.05384064]
[139.93553162 102.93612671]
[154.42442322 106.81840515]
[168.91331482 110.70069122]
[181.61824036 101.58373260]
[197.20704651 102.81784821]
[208.31918335 113.82032013]
[209.70783997 129.39611816]
[200.71731567 142.19084167]
[185.59269714 146.16319275]
[171.47532654 139.43756104]
[165.03102112 125.18958282]
[150.54214478 121.30729675]
[136.05325317 117.42501068]
[121.56436157 113.54272461]
[107.07547760 109.66043854]
[114.95621490 122.42343140]
[117.85292816 137.14108276]
[115.39662170 151.93859863]
[107.90019226 164.93103027]
[96.31855774 174.46339417]
[82.12701416 179.32138062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[21 35]
[22 34]
[23 33]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
