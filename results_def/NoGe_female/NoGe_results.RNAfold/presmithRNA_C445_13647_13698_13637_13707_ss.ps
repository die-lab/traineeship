%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUGUUUUUUGGCUUGGGCCUUGUCGAAGCGGGCGGCGGGCGACCGGGAGAAAAGUUCUCCUUUUGAGU\
) } def
/len { sequence length } bind def

/coor [
[207.51596069 152.65251160]
[193.65777588 146.91226196]
[179.79957581 141.17201233]
[165.94139099 135.43176270]
[152.08319092 129.69151306]
[138.22500610 123.95125580]
[124.36681366 118.21100616]
[110.50861359 112.47075653]
[99.29998779 116.29296112]
[88.46048737 111.52347565]
[83.70607758 100.67735291]
[70.11145782 94.33808136]
[54.33433151 95.51824951]
[46.06943130 83.12709808]
[32.47481537 76.78782654]
[18.88019753 70.44854736]
[5.28558111 64.10927582]
[-10.49154663 65.28944397]
[-18.75644875 52.89829254]
[-32.35106659 46.55902100]
[-45.94568253 40.21974564]
[-62.85610580 39.00568390]
[-66.37075806 22.42004013]
[-51.40624237 14.45137691]
[-39.60640717 26.62512779]
[-26.01179123 32.96440125]
[-12.41717434 39.30367661]
[2.38757586 37.67007828]
[11.62485504 50.51465988]
[25.21947098 56.85393143]
[38.81408691 63.19320679]
[52.40870667 69.53247833]
[67.21345520 67.89888000]
[76.45073700 80.74346161]
[90.04534912 87.08273315]
[106.56799316 85.07310486]
[116.24887085 98.61255646]
[130.10705566 104.35281372]
[143.96525574 110.09306335]
[157.82344055 115.83331299]
[171.68164062 121.57356262]
[185.53984070 127.31381989]
[199.39802551 133.05406189]
[213.25622559 138.79432678]
[229.59503174 126.77499390]
[249.74655151 126.42007446]
[266.28558350 137.71125793]
[273.20422363 156.36648560]
[287.97634888 158.97120667]
[302.74847412 161.57592773]
[317.52056885 164.18064880]
[332.29269409 166.78538513]
[347.06481934 169.39010620]
[361.83694458 171.99482727]
[378.48538208 168.79077148]
[386.17294312 183.90161133]
[373.78076172 195.47186279]
[359.23220825 186.76693726]
[344.46008301 184.16221619]
[329.68798828 181.55749512]
[314.91586304 178.95277405]
[300.14373779 176.34805298]
[285.37161255 173.74333191]
[270.59951782 171.13859558]
[265.03051758 180.05119324]
[256.90026855 186.75825500]
[247.03498840 190.55328369]
[236.44522095 191.02696228]
[226.22222900 188.11122131]
[217.42558289 182.08831787]
[210.97335815 173.56350708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 29]
[19 27]
[20 26]
[21 25]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
