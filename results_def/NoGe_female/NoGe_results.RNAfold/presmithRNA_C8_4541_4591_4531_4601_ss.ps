%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUACUCCUUUUACGUUUAGGACUUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAG\
) } def
/len { sequence length } bind def

/coor [
[81.63738251 395.84017944]
[65.37853241 393.69964600]
[59.35368729 378.44732666]
[69.76068878 365.77349854]
[71.71858215 350.90182495]
[73.67647552 336.03015137]
[75.63436890 321.15847778]
[77.59226227 306.28680420]
[79.22526550 291.37594604]
[80.53260040 276.43304443]
[81.83993530 261.49011230]
[83.14727783 246.54719543]
[84.45461273 231.60427856]
[85.76194763 216.66136169]
[87.06928253 201.71842957]
[88.37661743 186.77551270]
[89.35766602 171.80763245]
[90.01195526 156.82191467]
[90.66624451 141.83618164]
[91.32054138 126.85046387]
[91.97483063 111.86473846]
[85.68968964 99.37519836]
[93.03944397 87.48097229]
[84.09294128 82.15932465]
[77.88726044 73.87574005]
[75.32397461 63.90911484]
[76.74665070 53.77685547]
[81.89550018 45.00384521]
[89.95343018 38.89296722]
[99.67539215 36.33165359]
[102.92198944 21.68721199]
[98.35499573 6.53950071]
[108.66357422 -4.21142578]
[111.91017151 -18.85586548]
[115.15676880 -33.50030518]
[118.40335846 -48.14474487]
[112.95868683 -63.61366653]
[123.83678436 -75.88554382]
[139.84721375 -72.33612061]
[144.51980591 -56.61673737]
[133.04780579 -44.89815140]
[129.80120850 -30.25371170]
[126.55461121 -15.60927200]
[123.30801392 -0.96483141]
[128.10722351 13.13541126]
[117.56642914 24.93380737]
[114.31983185 39.57824707]
[126.91501617 55.29180527]
[124.45385742 75.55742645]
[108.02516937 88.13526154]
[114.31031036 100.62480164]
[106.96055603 112.51902771]
[106.30625916 127.50475311]
[105.65196991 142.49047852]
[104.99768066 157.47619629]
[104.34339142 172.46192932]
[107.16040802 181.49008179]
[103.31954193 188.08285522]
[102.01220703 203.02577209]
[100.70486450 217.96868896]
[99.39752960 232.91162109]
[98.09019470 247.85453796]
[96.78285980 262.79745483]
[95.47552490 277.74038696]
[94.16819000 292.68328857]
[96.58872223 301.82574463]
[92.46393585 308.24468994]
[90.50604248 323.11636353]
[88.54814911 337.98803711]
[86.59025574 352.85971069]
[84.63236237 367.73138428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[23 50]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
