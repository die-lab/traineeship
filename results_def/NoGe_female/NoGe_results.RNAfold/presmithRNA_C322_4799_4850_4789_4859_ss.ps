%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUUCUUUUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUAU\
) } def
/len { sequence length } bind def

/coor [
[69.98178864 261.97943115]
[61.17048264 274.44232178]
[47.82015991 281.84039307]
[32.58153915 282.70477295]
[18.48025703 276.86383057]
[8.31613541 265.47729492]
[4.10726690 250.80595398]
[6.68932629 235.76283264]
[15.54964352 223.33473206]
[28.92899513 215.98928833]
[44.17090225 215.18492126]
[49.91115570 201.32672119]
[55.65140533 187.46853638]
[61.39165878 173.61033630]
[55.47222519 159.99064636]
[61.09624100 145.85470581]
[75.42195892 139.73820496]
[81.16220856 125.88000488]
[86.90245819 112.02181244]
[82.42969513 102.71183777]
[83.88734436 92.48654938]
[90.78341675 84.79723358]
[100.79030609 82.23922729]
[107.71653748 68.93406677]
[114.64276886 55.62890625]
[114.15190887 39.81531525]
[126.89177704 32.09877396]
[133.81800842 18.79361153]
[140.74423218 5.48844957]
[147.67047119 -7.81671333]
[154.59669495 -21.12187576]
[146.46530151 -34.07670975]
[145.91371155 -49.26198196]
[152.98999023 -62.59587097]
[165.70526123 -70.54431915]
[180.59156799 -71.05757904]
[187.51780701 -84.36273956]
[194.44403076 -97.66790009]
[189.45315552 -112.66345978]
[196.60214233 -126.75840759]
[211.64962769 -131.59045410]
[225.66819763 -124.29285431]
[230.34089661 -109.19512177]
[222.89547729 -95.25448608]
[207.74919128 -90.74166870]
[200.82296753 -77.43650818]
[193.89672852 -64.13134766]
[202.01473999 -51.64280701]
[202.79692078 -36.66802216]
[195.93322754 -23.22346687]
[183.17781067 -14.96538544]
[167.90185547 -14.19564629]
[160.97563171 -0.89048392]
[154.04939270 12.41467857]
[147.12316895 25.71984100]
[140.19694519 39.02500534]
[141.18321228 53.88692093]
[127.94792938 62.55513382]
[121.02169800 75.86029816]
[114.09546661 89.16545868]
[116.11265564 107.51345062]
[100.76065063 117.76206207]
[95.02040100 131.62025452]
[89.28015137 145.47845459]
[95.08494568 159.93328857]
[89.06609344 173.90568542]
[75.24984741 179.35058594]
[69.50959778 193.20878601]
[63.76934814 207.06697083]
[58.02909470 220.92517090]
[68.23797607 232.27159119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[14 67]
[17 64]
[18 63]
[19 62]
[23 60]
[24 59]
[25 58]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
