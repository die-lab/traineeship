%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUACGAAAGGACCCUCUUUUUGGAUGGUGGUCUAUGGACUGUGUUAGCAAAUUUAUGCGGCUGAGUUA\
) } def
/len { sequence length } bind def

/coor [
[113.79665375 128.93806458]
[105.65694427 131.55563354]
[97.11483765 131.92858887]
[88.77796173 130.03041077]
[81.23933411 125.99609375]
[75.03519440 120.11262512]
[70.60684204 112.79850769]
[55.83472824 115.40322876]
[41.06261063 118.00794983]
[26.29049492 120.61267090]
[11.51837826 123.21739960]
[-3.25373816 125.82212067]
[-18.02585411 128.42684937]
[-32.79796982 131.03157043]
[-47.34653473 139.73648071]
[-59.73870468 128.16624451]
[-52.05112839 113.05540466]
[-35.40269470 116.25944519]
[-20.63057709 113.65472412]
[-5.85846090 111.05000305]
[8.91365528 108.44528198]
[23.68577194 105.84056091]
[38.45788956 103.23583221]
[53.23000336 100.63111115]
[68.00212097 98.02639008]
[72.59265137 83.36881256]
[83.47441101 72.52884674]
[78.96382141 58.22309113]
[74.45323944 43.91733932]
[69.94264984 29.61158371]
[57.49296188 18.93744278]
[60.77773666 2.87063527]
[76.41788483 -2.06068349]
[88.32415771 9.21640396]
[84.24840546 25.10099602]
[88.75898743 39.40674973]
[93.26957703 53.71250534]
[97.78016663 68.01825714]
[120.06628418 74.99792480]
[131.70410156 95.24510193]
[146.64703369 96.55243683]
[161.58995056 97.85977173]
[176.53286743 99.16710663]
[188.57315063 89.28433228]
[203.70877075 90.82302094]
[213.05628967 102.36249542]
[227.99920654 103.66983032]
[242.94213867 104.97716522]
[252.08457947 102.55663300]
[258.50354004 106.68141937]
[273.37521362 108.63931274]
[288.24688721 110.59720612]
[300.63110352 100.77853394]
[316.32113647 102.67562866]
[326.00833130 115.16297913]
[323.94543457 130.83206177]
[311.35638428 140.38668823]
[295.70999146 138.15826416]
[286.28900146 125.46887970]
[271.41732788 123.51098633]
[256.54565430 121.55309296]
[241.63479614 119.92008972]
[226.69187927 118.61275482]
[211.74896240 117.30541229]
[200.53964233 127.04640198]
[185.36677551 125.93344116]
[175.22552490 114.11003113]
[160.28260803 112.80269623]
[145.33969116 111.49536133]
[130.39677429 110.18801880]
[126.62274170 117.86026764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[27 38]
[28 37]
[29 36]
[30 35]
[40 70]
[41 69]
[42 68]
[43 67]
[46 64]
[47 63]
[48 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
