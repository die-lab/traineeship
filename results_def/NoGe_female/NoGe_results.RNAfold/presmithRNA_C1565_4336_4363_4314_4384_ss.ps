%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:45:53 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGCCUUUGGCUUCUUUUGAUCUCUUUUUCUUUUGUCGCUGGUUCGGUUUUUGAUAAAACAUGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[236.45732117 247.71858215]
[226.32347107 236.65942383]
[216.18962097 225.60026550]
[206.05577087 214.54110718]
[195.92192078 203.48194885]
[185.78805542 192.42279053]
[175.65420532 181.36363220]
[156.95074463 177.28022766]
[152.11950684 157.93128967]
[141.06034851 147.79743958]
[130.00119019 137.66358948]
[118.94202423 127.52973175]
[107.88286591 117.39588165]
[93.40293884 117.92303467]
[82.72014618 108.13405609]
[81.98327637 93.66327667]
[67.36531067 98.16464233]
[52.55470276 94.76719666]
[41.50662994 84.48097229]
[37.11997223 70.14175415]
[40.47706604 55.62984467]
[29.41790581 45.49599075]
[14.23976135 48.72144318]
[0.07823905 42.37865829]
[-7.62126637 28.90656662]
[-5.89813805 13.48546314]
[4.58504581 2.04507494]
[19.79728699 -1.01553404]
[33.88916779 5.48050213]
[41.44207382 19.03532600]
[39.55175781 34.43682861]
[50.61091995 44.57068253]
[64.77501678 39.96156693]
[79.44199371 43.08179092]
[90.65198517 53.19131470]
[95.32733154 67.64945984]
[92.11713409 82.60411835]
[106.59706116 82.07696533]
[117.27985382 91.86594391]
[118.01672363 106.33672333]
[129.07588196 116.47057343]
[140.13504028 126.60442352]
[151.19419861 136.73828125]
[162.25335693 146.87213135]
[173.47036743 145.76490784]
[183.16165161 151.06932068]
[188.07144165 160.71621704]
[186.71336365 171.22978210]
[196.84722900 182.28894043]
[206.98107910 193.34809875]
[217.11492920 204.40725708]
[227.24877930 215.46641541]
[237.38262939 226.52557373]
[247.51649475 237.58473206]
[261.27478027 231.29467773]
[276.30364990 229.56602478]
[291.13073730 232.56814575]
[304.30340576 240.00692749]
[314.53118896 251.15357971]
[320.81204224 264.91607666]
[322.53060913 279.94610596]
[319.51855469 294.77117920]
[312.07095337 307.93887329]
[300.91744995 318.15917969]
[287.15075684 324.43078613]
[272.11956787 326.13928223]
[257.29653931 323.11730957]
[244.13381958 315.66088867]
[233.92098999 304.50054932]
[227.65859985 290.72964478]
[225.96015930 275.69732666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[16 37]
[21 32]
[22 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
