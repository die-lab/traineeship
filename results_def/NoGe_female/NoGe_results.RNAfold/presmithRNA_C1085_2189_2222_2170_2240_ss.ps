%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAUUAUGGCCAGUGCUCUGAGAUUUGUGGGGCUAACCAUUCUUUUAUGCCUAUCGUGGUUGAGGCUGU\
) } def
/len { sequence length } bind def

/coor [
[130.44889832 300.72186279]
[128.49101257 285.85018921]
[126.53311920 270.97851562]
[124.57522583 256.10684204]
[121.97050476 241.33471680]
[118.72390747 226.69027710]
[115.47731781 212.04583740]
[112.23072052 197.40139771]
[108.98413086 182.75695801]
[105.73753357 168.11251831]
[102.49093628 153.46807861]
[92.32978821 146.55035400]
[89.64579010 134.13977051]
[96.46097565 122.94911957]
[93.85625458 108.17700195]
[89.33984375 101.16993713]
[91.47484589 92.70475006]
[89.51695251 77.83307648]
[74.64862823 70.09207916]
[67.29226685 55.21268845]
[70.11257935 39.02211761]
[81.83036041 27.73438835]
[79.22563934 12.96227169]
[76.62091064 -1.80984426]
[74.01618958 -16.58196068]
[70.21121216 -21.05338287]
[68.88124084 -26.05503654]
[69.76834869 -30.45932770]
[72.16957855 -33.44323730]
[71.51528931 -48.42895889]
[70.86100006 -63.41468430]
[70.20671082 -78.40040588]
[58.38670349 -88.89150238]
[57.53043747 -104.67257690]
[68.14591217 -116.38100433]
[83.93515778 -117.07037354]
[95.53069305 -106.33170319]
[96.05310059 -90.53604889]
[85.19242859 -79.05469513]
[85.84672546 -64.06897736]
[86.50101471 -49.08325195]
[87.15530396 -34.09752655]
[88.78830719 -19.18668365]
[91.39302826 -4.41456699]
[93.99774933 10.35754967]
[96.60247803 25.12966537]
[109.24174500 29.93853188]
[117.86122131 40.50018692]
[120.07411957 54.06258774]
[115.18169403 67.02079773]
[104.38862610 75.87518311]
[106.34651947 90.74685669]
[108.62837219 105.57228088]
[111.23309326 120.34439850]
[123.39589691 133.97291565]
[117.13537598 150.22148132]
[120.38197327 164.86592102]
[123.62857056 179.51037598]
[126.87516022 194.15481567]
[130.12174988 208.79925537]
[133.36834717 223.44369507]
[136.61494446 238.08813477]
[141.12127686 243.61166382]
[141.79846191 249.66021729]
[139.44689941 254.14894104]
[141.40478516 269.02062988]
[143.36268616 283.89230347]
[145.32057190 298.76397705]
[155.72758484 311.43780518]
[149.70274353 326.69012451]
[133.44389343 328.83065796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[14 54]
[15 53]
[17 52]
[18 51]
[22 46]
[23 45]
[24 44]
[25 43]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
