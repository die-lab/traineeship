%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAGGUCUGCUUUGCAUGUAGAAAAUAAGUGUUUAUCUUUGAGGCCAAGUCUGUGGUAGCUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[133.68760681 165.61021423]
[118.84863281 171.30415344]
[103.13432312 173.68670654]
[87.27444458 172.64718628]
[72.00555420 168.23390198]
[58.03674316 160.65179443]
[46.01672745 150.25297546]
[36.50373077 137.52037048]
[29.93953705 123.04530334]
[26.62899399 107.50000000]
[11.62899494 107.50000000]
[-3.37100554 107.50000000]
[-18.37100601 107.50000000]
[-33.37100601 107.50000000]
[-43.28337479 119.59458160]
[-58.66042328 122.43720245]
[-72.24156952 114.68566132]
[-77.61421967 100.00000000]
[-72.24156952 85.31433868]
[-58.66042328 77.56279755]
[-43.28337479 80.40541840]
[-33.37100601 92.50000000]
[-18.37100601 92.50000000]
[-3.37100554 92.50000000]
[11.62899494 92.50000000]
[26.62899399 92.50000000]
[29.40406418 78.65127563]
[34.76814270 65.58547974]
[42.52450943 53.78179550]
[52.38871384 43.67309952]
[63.99899673 35.63011551]
[76.92956543 29.94780731]
[90.70621490 26.83457184]
[104.82369995 26.40457726]
[118.76428223 28.67359352]
[132.01670837 33.55841064]
[144.09497070 40.87988281]
[154.55610657 50.36950302]
[163.01646423 61.67925262]
[169.16578674 74.39437103]
[172.77854919 88.04853058]
[173.72225952 102.14099884]
[188.59393311 104.09889221]
[203.46559143 106.05678558]
[218.33726501 108.01467896]
[233.20893860 109.97257233]
[248.08061218 111.93046570]
[263.02352905 113.23780060]
[278.00924683 113.89208984]
[292.99499512 114.54638672]
[307.98071289 115.20067596]
[319.46206665 104.34001160]
[335.25772095 104.86241150]
[345.99639893 116.45794678]
[345.30700684 132.24719238]
[333.59857178 142.86267090]
[317.81750488 142.00640869]
[307.32641602 130.18640137]
[292.34069824 129.53210449]
[277.35498047 128.87782288]
[262.36923218 128.22352600]
[258.10253906 130.95735168]
[252.01799011 130.80992126]
[246.12272644 126.80213928]
[231.25105286 124.84424591]
[216.37937927 122.88635254]
[201.50770569 120.92845917]
[186.63603210 118.97056580]
[171.76435852 117.01267242]
[166.45306396 131.99287415]
[158.05566406 145.48730469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
