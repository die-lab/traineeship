%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUAGUAUUAGUAUUUCUCUCUUGUUGUUAGCGGUGUUGUUUUUGUUUGCGCCCGGUUUUUGAGUGUGA\
) } def
/len { sequence length } bind def

/coor [
[51.30780029 164.23962402]
[41.17394638 175.29878235]
[31.04009247 186.35794067]
[20.90624046 197.41709900]
[10.77238655 208.47625732]
[0.63853353 219.53541565]
[-2.38069987 235.65423584]
[-17.93735123 240.84294128]
[-30.02807045 229.76383972]
[-26.21496391 213.81416321]
[-10.42062664 209.40156555]
[-0.28677341 198.34240723]
[9.84707928 187.28324890]
[19.98093224 176.22409058]
[30.11478615 165.16491699]
[40.24863815 154.10575867]
[43.14252472 139.49499512]
[58.17032242 134.54768372]
[68.30417633 123.48851776]
[71.19805908 108.87774658]
[86.22585297 103.93043518]
[89.43927765 90.32288361]
[102.71498108 85.93570709]
[112.84883881 74.87654877]
[122.98268890 63.81739044]
[133.11654663 52.75822830]
[126.76329803 38.97737503]
[126.17179108 23.85477257]
[131.40104675 9.69608021]
[141.62500000 -1.35192609]
[155.26281738 -7.62685633]
[170.22329712 -8.20079803]
[184.22549438 -3.01740909]
[187.87072754 -11.74412632]
[195.05075073 -14.32561684]
[205.65736389 -24.93221855]
[216.26396179 -35.53882217]
[226.87055969 -46.14542389]
[237.47715759 -56.75202560]
[232.86286926 -71.34541321]
[235.57041931 -86.40953064]
[244.97763062 -98.48276520]
[258.92279053 -104.79076385]
[274.20141602 -103.88401031]
[287.30258179 -95.97084808]
[295.21575928 -82.86968231]
[296.12249756 -67.59106445]
[289.81451416 -53.64589310]
[277.74127197 -44.23868179]
[262.67715454 -41.53113174]
[248.08377075 -46.14542389]
[237.47715759 -35.53882217]
[226.87055969 -24.93221855]
[216.26396179 -14.32561684]
[205.65736389 -3.71901536]
[195.28466797 7.11644411]
[201.66870117 20.61360550]
[202.40083313 35.56718063]
[197.33839417 49.69999695]
[187.22351074 60.84793854]
[173.57444763 67.29130554]
[158.45783997 68.02007294]
[144.17570496 62.89208221]
[134.04185486 73.95124054]
[123.90799713 85.01040649]
[113.77414703 96.06956482]
[110.56072235 109.67711639]
[97.28501892 114.06429291]
[93.66629028 129.46609497]
[79.36333466 133.62237549]
[69.22947693 144.68153381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 71]
[19 70]
[21 68]
[23 66]
[24 65]
[25 64]
[26 63]
[33 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
