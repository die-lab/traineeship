%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGCUUCCUGUUGUUUGAAAUGAGGCCGGUGGAGGAAAAGGUGGAGACCGGGAUUAGAUACUCCGUUAU\
) } def
/len { sequence length } bind def

/coor [
[82.06163788 82.26794434]
[67.57274628 78.38565826]
[53.08386230 74.50337219]
[38.59497452 70.62108612]
[23.26247025 74.52299500]
[12.97142982 63.75527573]
[-1.51745725 59.87298965]
[-16.00634384 55.99070358]
[-30.49523163 52.10841751]
[-45.06536484 48.54312897]
[-59.70980453 45.29653549]
[-74.35424042 42.04994202]
[-81.26472473 43.79972458]
[-87.03276062 41.85722733]
[-90.10712433 37.82897186]
[-104.41287994 33.31838226]
[-118.71863556 28.80779648]
[-133.02438354 24.29721069]
[-146.92547607 31.81621552]
[-162.04768372 27.22339821]
[-169.41931152 13.24359608]
[-164.66687012 -1.82922208]
[-150.60990906 -9.05262089]
[-135.58818054 -4.14108658]
[-128.51379395 9.99145508]
[-114.20804596 14.50204277]
[-99.90229034 19.01262856]
[-85.59653473 23.52321625]
[-71.10765076 27.40550232]
[-56.46320724 30.65209579]
[-41.81876755 33.89868927]
[-34.37616348 32.21807098]
[-26.61294556 37.61953354]
[-12.12405872 41.50181580]
[2.36482859 45.38410187]
[16.85371590 49.26638794]
[31.14987755 45.08679199]
[42.47726059 56.13219833]
[56.96614838 60.01448059]
[71.45503235 63.89676666]
[85.94392395 67.77905273]
[100.65570068 64.85269928]
[112.55599976 55.72127914]
[124.45629883 46.58985519]
[130.22866821 31.24020386]
[146.44998169 28.83171272]
[156.43315125 41.84202957]
[149.90834045 56.88726044]
[133.58772278 58.49015427]
[121.68742371 67.62157440]
[109.78712463 76.75299835]
[119.89642334 88.34833527]
[120.75827026 102.35070801]
[134.06343079 109.27693176]
[147.36859131 116.20316315]
[161.19474792 109.15922546]
[176.51536560 111.62061310]
[187.43934631 122.64087677]
[189.76620483 137.98249817]
[182.60121155 151.74630737]
[168.69946289 158.63984680]
[153.40644836 156.01240540]
[142.60266113 144.87428284]
[140.44236755 129.50833130]
[127.13719940 122.58209991]
[113.83203888 115.65586853]
[106.03688812 120.64531708]
[96.59098816 121.86457825]
[87.27202606 118.85347748]
[79.93230438 111.97005463]
[76.13126373 102.36309052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[6 36]
[7 35]
[8 34]
[9 33]
[10 31]
[11 30]
[12 29]
[15 28]
[16 27]
[17 26]
[18 25]
[42 51]
[43 50]
[44 49]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
