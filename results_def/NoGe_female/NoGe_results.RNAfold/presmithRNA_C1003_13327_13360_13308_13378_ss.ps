%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAGAUUUUUGGUUUCUUCGGUAUUGGUUUGUAGCCAUUUUUUAUAGGAGGGAGGGUGGCAAAAAGC\
) } def
/len { sequence length } bind def

/coor [
[107.29328156 125.02211761]
[91.18717194 124.52819824]
[78.44962311 114.65877533]
[64.14386749 119.16936493]
[49.83811569 123.67994690]
[35.63416290 128.50154114]
[21.53877449 133.63185120]
[7.44338512 138.76214600]
[-6.65200424 143.89244080]
[-9.95043755 158.96307373]
[-20.88917923 169.84184265]
[-35.97771835 173.05735779]
[-50.40135193 167.58358765]
[-59.55755615 155.16716003]
[-60.52462006 139.77014160]
[-52.99394989 126.30564117]
[-39.36856461 119.07015228]
[-23.99626732 120.37248230]
[-11.78230667 129.79705811]
[2.31308270 124.66675568]
[16.40847206 119.53645325]
[30.50386047 114.40615082]
[35.87789536 108.98982239]
[45.32752991 109.37419891]
[59.63328171 104.86360931]
[73.93903351 100.35301971]
[77.21205902 87.35057068]
[86.51590729 77.69579315]
[99.38832855 73.94382477]
[112.42262268 77.08762360]
[122.16927338 86.29518890]
[136.65815735 82.41290283]
[151.14704895 78.53061676]
[165.63594055 74.64833069]
[171.27902222 60.31439972]
[184.13014221 52.14724731]
[199.14854431 53.10204315]
[210.58798218 62.60346603]
[225.07687378 58.72117996]
[239.56576538 54.83889771]
[254.05464172 50.95661163]
[268.54354858 47.07432556]
[283.03240967 43.19203949]
[297.52130127 39.30975342]
[312.01019287 35.42746735]
[326.49908447 31.54518127]
[340.98797607 27.66289711]
[347.43228149 13.41491699]
[361.54965210 6.68928432]
[376.67425537 10.66163826]
[385.66476440 23.45635223]
[384.27612305 39.03215790]
[373.16400146 50.03462982]
[357.57519531 51.26874161]
[344.87026978 42.15178299]
[330.38137817 46.03406906]
[315.89248657 49.91635513]
[301.40359497 53.79864120]
[286.91470337 57.68092728]
[272.42581177 61.56321335]
[257.93692017 65.44549561]
[243.44804382 69.32778168]
[228.95915222 73.21006775]
[214.47027588 77.09235382]
[209.31413269 91.04055023]
[196.78521729 99.37663269]
[181.57225037 98.72922516]
[169.51821899 89.13722229]
[155.02932739 93.01950836]
[140.54045105 96.90179443]
[126.05155945 100.78408051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 22]
[7 21]
[8 20]
[9 19]
[31 71]
[32 70]
[33 69]
[34 68]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
