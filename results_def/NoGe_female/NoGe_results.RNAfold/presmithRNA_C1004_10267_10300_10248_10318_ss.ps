%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGGCUUGAUGGUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[12.30677795 267.48812866]
[0.57422078 266.51010132]
[-8.55720043 278.41040039]
[-17.68862152 290.31069946]
[-26.82004356 302.21099854]
[-28.42294121 318.53164673]
[-43.46817017 325.05645752]
[-56.47848511 315.07327271]
[-54.06999588 298.85195923]
[-38.72034454 293.07958984]
[-29.58892250 281.17929077]
[-20.45750046 269.27899170]
[-11.32607937 257.37869263]
[-14.96422768 239.67868042]
[-4.59401131 224.50265503]
[13.83060932 221.35537720]
[21.89010429 208.70449829]
[29.94959831 196.05363464]
[38.00909042 183.40275574]
[46.06858444 170.75189209]
[54.12807846 158.10101318]
[62.18757248 145.45014954]
[58.72310257 131.00947571]
[66.71636200 118.06488037]
[81.88655853 114.52893066]
[89.94605255 101.87805939]
[91.35011292 93.66067505]
[98.64319611 88.86186981]
[107.24684143 76.57458496]
[115.85048676 64.28730774]
[117.42791748 48.54493332]
[131.06600952 42.55729294]
[139.66964722 30.27001381]
[148.27330017 17.98273277]
[150.74827576 8.85487556]
[157.52992249 5.35828924]
[166.66134644 -6.54201078]
[175.79277039 -18.44231033]
[169.84112549 -32.60117722]
[171.78219604 -47.83691788]
[181.09385681 -60.05119324]
[195.27131653 -65.95842743]
[210.50090027 -63.96960068]
[222.68592834 -54.61970139]
[228.54869080 -40.42380142]
[226.51213074 -25.20052719]
[217.12408447 -13.04486656]
[202.90988159 -7.22662830]
[187.69306946 -9.31088924]
[178.56164551 2.58941054]
[169.43022156 14.48971081]
[160.56057739 26.58638000]
[151.95693970 38.87366104]
[143.35328674 51.16094208]
[142.39125061 66.02444458]
[128.13777161 72.89095306]
[119.53412628 85.17823029]
[110.93047333 97.46551514]
[102.59692383 109.93755341]
[94.53742981 122.58842468]
[97.74398041 137.83164978]
[89.39028931 150.54661560]
[74.83844757 153.50964355]
[66.77895355 166.16050720]
[58.71945953 178.81138611]
[50.65996552 191.46224976]
[42.60046768 204.11312866]
[34.54097366 216.76399231]
[26.48148155 229.41487122]
[31.37810135 240.65545654]
[30.10149002 252.72706604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[25 60]
[26 59]
[28 58]
[29 57]
[30 56]
[32 54]
[33 53]
[34 52]
[36 51]
[37 50]
[38 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
