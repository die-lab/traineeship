%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUACAUCAGGUCAAGGUGCAGCGUAUGGGGUGGUGGAGAUGGGUUACGUUUCUUUAGUUUUUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[76.45307922 177.99276733]
[72.21433258 192.38140869]
[61.07199097 202.42373657]
[46.32172012 205.14945984]
[32.32632065 199.75234985]
[23.22531319 187.82878113]
[21.71057892 172.90545654]
[28.22924995 159.39736938]
[13.74036121 163.27966309]
[-0.74852574 167.16194153]
[-15.23741341 171.04423523]
[-21.68171883 185.29220581]
[-35.79907990 192.01783752]
[-50.92370987 188.04548645]
[-59.91422272 175.25077820]
[-58.52556992 159.67497253]
[-47.41343307 148.67250061]
[-31.82462120 147.43838501]
[-19.11969948 156.55534363]
[-4.63081121 152.67304993]
[9.85807610 148.79077148]
[24.34696388 144.90847778]
[37.80005264 138.27415466]
[49.70035553 129.14273071]
[55.08740997 115.25644684]
[70.74599457 112.99385071]
[82.64629364 103.86242676]
[83.42775726 93.56336975]
[89.80275726 85.43683624]
[99.61958313 82.22572327]
[109.56481171 85.01387787]
[122.21568298 76.95438385]
[134.86656189 68.89488983]
[142.34825134 54.95448685]
[157.23957825 54.64170074]
[169.89044189 46.58220673]
[182.54132080 38.52271271]
[188.32098389 31.03680611]
[195.92448425 30.40160561]
[208.91487122 22.90160561]
[221.90525818 15.40160561]
[234.89562988 7.90160513]
[247.88601685 0.40160525]
[260.87640381 -7.09839487]
[273.86679077 -14.59839439]
[279.39117432 -29.66028023]
[294.65640259 -34.59514999]
[307.95223999 -25.61739349]
[309.07928467 -9.61397743]
[297.17297363 1.13864684]
[281.36679077 -1.60801375]
[268.37640381 5.89198637]
[255.38601685 13.39198589]
[242.39562988 20.89198685]
[229.40525818 28.39198685]
[216.41487122 35.89198685]
[203.42448425 43.39198685]
[190.60081482 51.17358398]
[177.94993591 59.23307800]
[165.29907227 67.29257202]
[158.72224426 80.65650177]
[142.92605591 81.54576111]
[130.27517700 89.60525513]
[117.62430573 97.66474915]
[110.19724274 114.56316376]
[91.77770996 115.76272583]
[79.87741089 124.89414978]
[73.63916779 139.43357849]
[58.83177567 141.04302979]
[46.93147659 150.17445374]
[61.61766052 153.22666931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 19]
[23 70]
[24 69]
[26 67]
[27 66]
[31 64]
[32 63]
[33 62]
[35 60]
[36 59]
[37 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
