%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAU\
) } def
/len { sequence length } bind def

/coor [
[82.41233063 384.06869507]
[68.24310303 378.76889038]
[56.40636444 369.34832764]
[48.06175613 356.72998047]
[44.02679825 342.15005493]
[44.69679642 327.03692627]
[50.00611496 312.87124634]
[59.43459320 301.04083252]
[72.05852509 292.70468140]
[86.64115906 288.67950439]
[87.29544830 273.69378662]
[87.94973755 258.70803833]
[88.60402679 243.72232056]
[89.25832367 228.73660278]
[89.91261292 213.75088501]
[90.56690216 198.76515198]
[91.22119141 183.77943420]
[91.87548065 168.79370117]
[82.88854218 153.87911987]
[92.50000000 138.34559631]
[92.50000000 123.34559631]
[92.50000000 108.34559631]
[92.17277527 93.34916687]
[91.51848602 78.36344147]
[90.86419678 63.37771606]
[90.20990753 48.39199448]
[81.87801361 34.94245148]
[89.05279541 21.88979721]
[88.39850616 6.90407467]
[87.74420929 -8.08164883]
[87.08992004 -23.06737137]
[74.07661438 -31.51920128]
[68.54792786 -46.01793671]
[72.62976074 -60.98851395]
[84.75256348 -70.67444611]
[100.25487518 -71.35129547]
[113.17572784 -62.75878906]
[118.54680634 -48.20093536]
[114.30281067 -33.27551651]
[102.07564545 -23.72166252]
[102.72993469 -8.73593903]
[103.38422394 6.24978399]
[104.03851318 21.23550797]
[112.32360840 33.61317062]
[105.19562531 47.73770142]
[105.84992218 62.72342682]
[106.50421143 77.70915222]
[107.15850067 92.69487000]
[110.72166443 100.23149872]
[107.50000000 108.34559631]
[107.50000000 123.34559631]
[107.50000000 138.34559631]
[116.15488434 148.18278503]
[115.66674042 160.87089539]
[106.86120605 169.44799805]
[106.20691681 184.43371582]
[105.55262756 199.41944885]
[104.89833832 214.40516663]
[104.24404144 229.39089966]
[103.58975220 244.37661743]
[102.93546295 259.36233521]
[102.28117371 274.34805298]
[101.62688446 289.33377075]
[115.80319977 294.61462402]
[127.65255737 304.01928711]
[136.01406860 316.62643433]
[140.06855774 331.20095825]
[139.41880798 346.31494141]
[134.12847900 360.48773193]
[124.71587372 372.33078003]
[112.10311890 380.68383789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[20 52]
[21 51]
[22 50]
[23 48]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
