%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUUCUUUUAUUGGUUAGCUUGUGU\
) } def
/len { sequence length } bind def

/coor [
[164.42510986 198.59202576]
[167.90718079 183.93011475]
[174.67721558 170.46670532]
[163.18653870 160.82489014]
[151.69587708 151.18307495]
[140.20521545 141.54125977]
[128.71453857 131.89944458]
[117.01627350 122.51058960]
[105.11597443 113.37917328]
[91.28013611 111.36395264]
[85.75260162 98.52113342]
[73.85230255 89.38970947]
[61.95200348 80.25828552]
[50.05170059 71.12686920]
[37.95503235 62.25722122]
[25.66775131 53.65357590]
[21.08123016 53.62874603]
[17.12001038 52.29036713]
[14.11736584 49.99160767]
[12.25887394 47.15687561]
[11.57212639 44.22779465]
[11.93464184 41.60995865]
[1.80078852 30.55080032]
[-8.33306503 19.49164009]
[-24.13125801 19.05274773]
[-34.93107605 7.51414061]
[-34.32518005 -8.27852917]
[-22.67303848 -18.95575333]
[-6.88765621 -18.18292046]
[3.66577649 -6.41854191]
[2.72609544 9.35778713]
[12.85994816 20.41694641]
[22.99380112 31.47610664]
[34.27140045 41.36629486]
[46.55867767 49.96994019]
[54.07789612 51.26541519]
[59.18312454 59.22656631]
[71.08341980 68.35798645]
[82.98372650 77.48941040]
[94.88402557 86.62082672]
[108.71986389 88.63604736]
[114.24739838 101.47886658]
[126.14769745 110.61029053]
[135.15890503 113.48106384]
[138.35635376 120.40877533]
[149.84703064 130.05059814]
[161.33769226 139.69239807]
[172.82835388 149.33421326]
[184.31903076 158.97602844]
[196.40229797 149.97096252]
[210.23681641 143.99577332]
[225.07649231 141.37269592]
[240.12106323 142.24319458]
[254.55917358 146.56033325]
[267.61221313 154.09127808]
[278.57623291 164.42988586]
[286.85995483 177.01864624]
[292.01666260 191.17861938]
[293.76824951 206.14620972]
[292.02023315 221.11421204]
[286.86694336 235.27543640]
[278.58624268 247.86618042]
[267.62472534 258.20742798]
[254.57350159 265.74151611]
[240.13642883 270.06210327]
[225.09207153 270.93624878]
[210.25175476 268.31674194]
[196.41580200 262.34487915]
[184.33036804 253.34269714]
[174.64720154 241.79570007]
[167.88850403 228.32659912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 43]
[9 42]
[11 40]
[12 39]
[13 38]
[14 37]
[15 35]
[16 34]
[22 33]
[23 32]
[24 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
