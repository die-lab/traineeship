%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCUGAUUGUUGCUCAGAGGGGGCGCGCGCGUGCGCGCUUACCCAGGGGCUUCACGCCGGAUGUACGG\
) } def
/len { sequence length } bind def

/coor [
[106.42198944 275.23181152]
[116.24066162 262.84759521]
[114.28276825 247.97592163]
[112.32487488 233.10424805]
[110.36698151 218.23257446]
[108.40908813 203.36090088]
[106.45119476 188.48922729]
[104.49330139 173.61755371]
[90.79008484 164.11743164]
[87.99336243 147.34117126]
[98.26868439 133.37197876]
[95.66395569 118.59986877]
[83.85534668 110.20326233]
[81.33927155 95.93386841]
[89.56392670 84.00485992]
[86.95920563 69.23274231]
[84.35447693 54.46062469]
[81.74975586 39.68850708]
[69.75376129 33.16287994]
[63.88439560 21.05050468]
[66.12995148 7.97896671]
[75.42557526 -1.20389056]
[73.46768951 -16.07556343]
[71.50979614 -30.94723701]
[68.90506744 -45.71935272]
[65.65847778 -60.36379242]
[62.41188049 -75.00823212]
[59.16528702 -89.65267181]
[55.91869354 -104.29711151]
[52.67210007 -118.94155121]
[49.42550659 -133.58599854]
[37.95350266 -145.30458069]
[42.62609482 -161.02395630]
[58.63651657 -164.57337952]
[69.51461792 -152.30151367]
[64.06994629 -136.83258057]
[67.31653595 -122.18814850]
[70.56313324 -107.54370880]
[73.80973053 -92.89926910]
[77.05632019 -78.25482941]
[80.30291748 -63.61038589]
[83.54950714 -48.96594620]
[87.29448700 -45.55219650]
[88.72687531 -39.63681030]
[86.38146210 -32.90512848]
[88.33935547 -18.03345680]
[90.29724884 -3.16178346]
[104.00046539 6.33834076]
[106.79719543 23.11458969]
[96.52187347 37.08378601]
[99.12659454 51.85589981]
[101.73131561 66.62802124]
[104.33604431 81.40013123]
[116.14465332 89.79673767]
[118.66072845 104.06613159]
[110.43607330 115.99514008]
[113.04079437 130.76725769]
[125.03679657 137.29289246]
[130.90615845 149.40525818]
[128.66059875 162.47680664]
[119.36497498 171.65965271]
[121.32286835 186.53132629]
[123.28076172 201.40299988]
[125.23865509 216.27467346]
[127.19654846 231.14634705]
[129.15443420 246.01802063]
[131.11233521 260.88970947]
[143.80171204 270.31069946]
[146.03013611 285.95709229]
[136.47550964 298.54614258]
[120.80643463 300.60903931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[11 57]
[12 56]
[15 53]
[16 52]
[17 51]
[18 50]
[22 47]
[23 46]
[24 45]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
