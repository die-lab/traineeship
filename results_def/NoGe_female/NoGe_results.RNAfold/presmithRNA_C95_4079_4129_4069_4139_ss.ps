%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGGUGGAGAUGGGUUACGUUUCUUUAGUUUUUGGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAU\
) } def
/len { sequence length } bind def

/coor [
[83.73656464 119.89808655]
[92.64283752 107.82836914]
[77.65711212 108.48265839]
[64.20757294 116.81454468]
[51.15491867 109.63977051]
[36.16919327 110.29405975]
[21.18347168 110.94834900]
[12.43518353 114.54150391]
[5.53274965 111.28984833]
[-9.46724987 111.28984833]
[-24.46725082 111.28984833]
[-39.46725082 111.28984833]
[-54.46725082 111.28984833]
[-69.46724701 111.28984833]
[-84.46724701 111.28984833]
[-96.78247833 121.57161713]
[-112.46997070 118.21273804]
[-119.49562836 103.78984833]
[-112.46997070 89.36695862]
[-96.78247833 86.00807953]
[-84.46724701 96.28984833]
[-69.46724701 96.28984833]
[-54.46725082 96.28984833]
[-39.46725082 96.28984833]
[-24.46725082 96.28984833]
[-9.46724987 96.28984833]
[5.53274965 96.28984833]
[20.52918053 95.96262360]
[35.51490402 95.30833435]
[50.50062561 94.65404510]
[62.87828827 86.36894989]
[77.00282288 93.49693298]
[91.98854828 92.84264374]
[106.63298798 89.59604645]
[120.49118042 83.85579681]
[134.34936523 78.11554718]
[148.20756531 72.37529755]
[162.06576538 66.63504028]
[169.05752563 60.26649094]
[176.65582275 60.96127701]
[190.75122070 55.83097458]
[204.84660339 50.70067215]
[218.94198608 45.57036972]
[233.03738403 40.44006729]
[235.02284241 25.26388359]
[243.84309387 12.75541306]
[257.47128296 5.78900814]
[272.77578735 5.96549845]
[286.23971558 13.24432755]
[294.76916504 25.95287323]
[296.40411377 41.17080688]
[290.76889038 55.40115738]
[279.15841675 65.37389374]
[264.24069214 68.79735565]
[249.44369507 64.88485718]
[238.16767883 54.53545761]
[224.07229614 59.66576004]
[209.97691345 64.79605865]
[195.88151550 69.92636108]
[181.78613281 75.05666351]
[167.80601501 80.49323273]
[153.94781494 86.23348999]
[140.08963013 91.97373962]
[126.23143005 97.71398926]
[112.37323761 103.45423889]
[125.54594421 110.62918091]
[132.28404236 124.03060150]
[130.18655396 138.88322449]
[120.00086975 149.89466858]
[105.35643005 153.14126587]
[91.47142792 147.46615601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[5 30]
[6 29]
[7 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
