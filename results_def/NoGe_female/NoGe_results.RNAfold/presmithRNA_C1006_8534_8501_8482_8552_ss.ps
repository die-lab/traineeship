%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUCGACUCACUCGGUAGCUUUAGCGGACGGAACGUAGUUCUUCCUCCAAUUUACAAGAUUGGUGCUUC\
) } def
/len { sequence length } bind def

/coor [
[15.79773808 146.68930054]
[3.51045704 155.29293823]
[0.63959396 170.60293579]
[-11.94401836 179.15321350]
[-26.52206421 176.32194519]
[-38.80934525 184.92558289]
[-51.09662628 193.52923584]
[-63.38390732 202.13287354]
[-67.57456970 217.61894226]
[-82.35158539 223.86547852]
[-96.37929535 216.08068848]
[-98.89684296 200.23640442]
[-87.97297668 188.48698425]
[-71.98755646 189.84559631]
[-59.70027161 181.24195862]
[-47.41299057 172.63830566]
[-35.12570953 164.03466797]
[-32.80025864 149.36741638]
[-20.46177101 140.46707153]
[-5.09318972 143.00566101]
[7.19409084 134.40202332]
[7.26871204 119.53149414]
[16.19093704 107.41300201]
[30.70787239 102.81822205]
[45.31561661 107.70903778]
[57.60289383 99.10539246]
[69.89017487 90.50174713]
[77.67177582 77.67807007]
[79.62966919 62.80639267]
[81.58756256 47.93471909]
[79.56811523 38.69539261]
[83.96897125 32.46246719]
[86.57369232 17.69035149]
[89.17841339 2.91823554]
[91.78313446 -11.85388088]
[94.38785553 -26.62599754]
[91.18381500 -43.27443314]
[106.29465485 -50.96200943]
[117.86489105 -38.56983948]
[109.15997314 -24.02127457]
[106.55525208 -9.24915791]
[103.95053101 5.52295828]
[101.34580994 20.29507446]
[98.74108124 35.06719208]
[96.45923615 49.89261246]
[94.50134277 64.76428986]
[92.54344940 79.63595581]
[109.45255280 83.15876007]
[116.61177826 96.68653870]
[131.10066223 100.56882477]
[145.58955383 104.45111084]
[160.07844543 108.33339691]
[174.56732178 112.21568298]
[189.05621338 116.09796906]
[203.54510498 119.98025513]
[220.40943909 118.23941040]
[226.75076294 133.96276855]
[213.39733887 144.40892029]
[199.66281128 134.46914673]
[185.17393494 130.58685303]
[170.68504333 126.70457458]
[156.19615173 122.82228851]
[141.70727539 118.94000244]
[127.21838379 115.05771637]
[112.72949219 111.17543030]
[94.37105560 118.47412109]
[78.49382019 102.78902435]
[66.20654297 111.39266968]
[53.91926193 119.99631500]
[53.51898193 135.39585876]
[44.23621750 147.46582031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[5 17]
[6 16]
[7 15]
[8 14]
[25 69]
[26 68]
[27 67]
[28 47]
[29 46]
[30 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
