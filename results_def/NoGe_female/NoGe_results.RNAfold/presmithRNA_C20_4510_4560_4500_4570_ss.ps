%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUUAUCUUAUUGGUCUCGAAACUCUGUGAUCUACUCCUUUUACGUUUAGGACUUUUCUUGUGCUGUU\
) } def
/len { sequence length } bind def

/coor [
[119.31473541 182.47706604]
[106.11563873 184.48742676]
[92.76461792 184.39889526]
[79.59333801 182.21369934]
[66.92900848 177.98611450]
[55.08625031 171.82116699]
[44.35925293 163.87200928]
[35.01451111 154.33610535]
[27.28416824 143.45034790]
[21.36026573 131.48519897]
[17.38996696 118.73786926]
[15.47190285 105.52504730]
[15.65372467 92.17496490]
[17.93091393 79.01927948]
[22.24690247 66.38480377]
[28.49446678 54.58541870]
[16.59416771 45.45399857]
[4.69386768 36.32257462]
[-7.20643282 27.19115448]
[-22.86501503 24.92855453]
[-28.25206947 11.04226971]
[-40.15237045 1.91084778]
[-55.78676605 4.22195053]
[-68.42617035 -5.26598978]
[-70.57184601 -20.92394638]
[-60.95080566 -33.46233368]
[-45.27103806 -35.44234467]
[-32.83507156 -25.68927765]
[-31.02094841 -9.98945236]
[-19.12064743 -0.85803086]
[-4.31325388 0.75142831]
[1.92498887 15.29085445]
[13.82528877 24.42227554]
[25.72558975 33.55369568]
[37.62588882 42.68511963]
[50.33621597 31.37759781]
[65.04965210 22.83784485]
[81.17274475 17.41029358]
[98.05519867 15.31385517]
[115.01609802 16.63308716]
[131.37135315 21.31478119]
[146.46128845 29.17010689]
[159.67729187 39.88223267]
[170.48631287 53.01910782]
[178.45239258 68.05087280]
[183.25424194 84.37125397]
[184.69815063 101.32199860]
[182.72592163 118.21941376]
[197.03167725 122.73000336]
[212.51979065 119.50060272]
[222.33134460 130.70695496]
[236.63710022 135.21754456]
[250.94285583 139.72813416]
[265.24862671 144.23872375]
[279.55438232 148.74931335]
[295.43896484 144.67355347]
[306.71603394 156.57983398]
[301.78472900 172.21997070]
[285.71792603 175.50474548]
[275.04379272 163.05505371]
[260.73803711 158.54447937]
[246.43226624 154.03388977]
[232.12651062 149.52330017]
[217.82077026 145.01271057]
[203.35589600 148.56474304]
[192.52108765 137.03575134]
[178.21533203 132.52516174]
[172.13330078 144.41072083]
[164.25929260 155.19300842]
[154.78892517 164.60417175]
[143.95747375 172.41040039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 35]
[17 34]
[18 33]
[19 32]
[21 30]
[22 29]
[48 67]
[49 66]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
