%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUCAUAUUGUUAAUCAUCACAGGACCAAGAAGGAAGCCUUUGGGCACCUUGGGAUGAUUUAUGCUAU\
) } def
/len { sequence length } bind def

/coor [
[51.99765015 335.45907593]
[43.04174042 348.13073730]
[28.33724785 353.08630371]
[13.53834915 348.42022705]
[4.33552408 335.92672729]
[4.26744604 320.40979004]
[13.36029148 307.83602905]
[28.11767769 303.04028320]
[32.62826538 288.73452759]
[37.13885117 274.42877197]
[33.58682251 259.96389771]
[45.11580658 249.12910461]
[49.62639618 234.82334900]
[54.13698196 220.51759338]
[50.58495331 206.05271912]
[62.11393738 195.21791077]
[66.62452698 180.91215515]
[71.13510895 166.60641479]
[75.64569855 152.30065918]
[80.15628815 137.99490356]
[84.66687012 123.68914795]
[89.17745972 109.38339233]
[86.33901215 95.69270325]
[96.51678467 86.10602570]
[101.02737427 71.80027008]
[105.53795624 57.49451447]
[110.04854584 43.18875885]
[104.55804443 24.01647186]
[118.71402740 11.12841129]
[121.96062469 -3.51602912]
[115.64005280 -14.99330425]
[118.86283875 -27.27499962]
[129.31607056 -33.74292374]
[133.19834900 -48.23181152]
[137.08064270 -62.72069931]
[140.96292114 -77.20958710]
[144.84521484 -91.69847107]
[143.10435486 -108.56280518]
[158.82771301 -114.90413666]
[169.27388000 -101.55070496]
[159.33409119 -87.81618500]
[155.45181274 -73.32730103]
[151.56951904 -58.83841324]
[147.68724060 -44.34952545]
[143.80494690 -29.86063766]
[149.35075378 -13.35445499]
[136.60505676 -0.26943484]
[133.35847473 14.37500572]
[139.79138184 22.80098343]
[140.36280823 33.61033249]
[134.62213135 43.04973221]
[124.35430145 47.69934464]
[119.84371185 62.00510025]
[115.33312988 76.31085205]
[110.82254028 90.61660767]
[113.66098785 104.30729675]
[103.48321533 113.89397430]
[98.97262573 128.19973755]
[94.46204376 142.50549316]
[89.95145416 156.81123352]
[85.44086456 171.11698914]
[80.93028259 185.42274475]
[76.41969299 199.72850037]
[79.64909363 215.21661377]
[68.44273376 225.02818298]
[63.93214798 239.33392334]
[59.42156219 253.63967896]
[62.65096283 269.12780762]
[51.44460678 278.93936157]
[46.93401718 293.24511719]
[42.42343140 307.55087280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[12 67]
[13 66]
[14 65]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[24 55]
[25 54]
[26 53]
[27 52]
[29 48]
[30 47]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
