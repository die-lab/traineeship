%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAUGUGGCUCGCUUACGCUGAGAGGAAAGCCUUUGGCUUCUUUUGAUCUCUUUUUCUUUUGUCGCUGG\
) } def
/len { sequence length } bind def

/coor [
[88.47650146 246.36418152]
[73.24900818 244.35945129]
[61.07375336 234.99682617]
[55.22582626 220.79479980]
[57.27828217 205.57366943]
[66.67903137 193.42782593]
[80.89930725 187.62443542]
[82.85720062 172.75276184]
[84.81509399 157.88108826]
[86.77298737 143.00941467]
[88.73088074 128.13774109]
[80.94884491 123.57496643]
[74.85432434 116.92396545]
[70.98715973 108.77387238]
[56.00143433 109.42816162]
[42.46878815 118.69097137]
[27.79960823 111.35972595]
[27.08428764 94.97618103]
[41.05868912 86.39433289]
[55.34714508 94.44244385]
[70.33287048 93.78814697]
[76.15019989 78.70097351]
[89.44062042 68.05874634]
[107.12788391 65.42012024]
[106.47359467 50.43439484]
[105.81930542 35.44867325]
[105.16500854 20.46294975]
[104.51071930 5.47722626]
[103.85643005 -9.50849724]
[103.20214081 -24.49422073]
[99.60898590 -33.24250793]
[102.86064148 -40.14494324]
[102.86064148 -55.14494324]
[102.86064148 -70.14494324]
[96.81430054 -85.98407745]
[110.36064148 -96.17882538]
[123.90697479 -85.98407745]
[117.86064148 -70.14494324]
[117.86064148 -55.14494324]
[117.86064148 -40.14494324]
[118.18785858 -25.14851189]
[118.84215546 -10.16278839]
[119.49644470 4.82293558]
[120.15073395 19.80865860]
[120.80502319 34.79438019]
[121.45931244 49.78010559]
[122.11360931 64.76583099]
[133.17276001 74.89968109]
[148.15849304 74.24539185]
[156.61032104 61.23208237]
[171.10905457 55.70339966]
[186.07963562 59.78523254]
[195.76556396 71.90803528]
[196.44241333 87.41034698]
[187.84991455 100.33119965]
[173.29205322 105.70227051]
[158.36663818 101.45827484]
[148.81277466 89.23111725]
[133.82705688 89.88540649]
[134.25010681 101.98509979]
[130.59620667 113.16497040]
[123.53469086 122.13577271]
[114.11211395 127.94905853]
[103.60255432 130.09564209]
[101.64466095 144.96731567]
[99.68676758 159.83898926]
[97.72887421 174.71066284]
[95.77098083 189.58233643]
[108.00468445 198.86845398]
[113.94153595 213.03352356]
[111.98453522 228.26722717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[14 21]
[15 20]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[32 40]
[33 39]
[34 38]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
