%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGUUUUUAGAAUAAACGGCCGCGGUACUCUGACCGUGCAAAGGUAGCAUAAUCAUUUGUCCUUUAAUU\
) } def
/len { sequence length } bind def

/coor [
[77.15385437 117.53746033]
[71.71941376 108.76483917]
[63.63676453 122.36562347]
[48.74597168 122.02856445]
[35.75559235 129.52856445]
[22.76520920 137.02856445]
[9.77482891 144.52856445]
[-3.21555257 152.02856445]
[-5.75262594 167.45896912]
[-17.64822769 177.60926819]
[-33.28561783 177.68681335]
[-45.28129959 167.65498352]
[-47.97127914 152.25050354]
[-40.08543015 138.74688721]
[-25.34720802 133.52015686]
[-10.71555233 139.03817749]
[2.27482867 131.53817749]
[15.26520920 124.03817749]
[28.25559044 116.53817749]
[41.24597168 109.03817749]
[48.39946365 95.97384644]
[64.21941376 95.77445984]
[69.04100800 81.57050323]
[63.30075455 67.71231079]
[57.56050110 53.85411835]
[51.82025146 39.99592590]
[46.07999802 26.13773346]
[40.33974838 12.27954102]
[25.64441109 6.46381664]
[19.44233704 -8.07268238]
[25.41310310 -22.70570946]
[40.01436234 -28.75374985]
[54.58344650 -22.62860680]
[60.47677231 -7.96422005]
[54.19794083 6.53928947]
[59.93819046 20.39748192]
[65.67844391 34.25567627]
[71.41869354 48.11386871]
[77.15894318 61.97206116]
[82.89920044 75.83025360]
[108.93659973 74.74976349]
[123.06389618 93.49984741]
[138.04962158 94.15413666]
[153.03533936 94.80842590]
[168.02107239 95.46271515]
[183.00679016 96.11701202]
[189.50843811 93.19381714]
[195.52615356 94.10519409]
[199.25331116 97.53839874]
[214.12498474 99.49629211]
[228.99665833 101.45418549]
[239.57981873 90.10621643]
[254.81834412 87.17920685]
[268.85269165 93.79864502]
[276.28634644 107.41921997]
[274.26095581 122.80354309]
[263.55532837 134.03602600]
[248.28594971 136.79756165]
[234.32424927 130.02627563]
[227.03877258 116.32585144]
[212.16709900 114.36796570]
[197.29542542 112.41007233]
[182.35250854 111.10272980]
[167.36677551 110.44844055]
[152.38105774 109.79415131]
[137.39532471 109.13986206]
[122.40960693 108.48557281]
[118.68445587 116.25997925]
[112.27297974 122.43815613]
[103.84743500 126.09973145]
[94.39096069 126.60338593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
