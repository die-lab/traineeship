%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUGUGCUGGCUUUAAGCGCCAGCCAUAGGCUGUGUUGCCUUUUUAGUAUAUGUUUUCCUUUUUUGGGGU\
) } def
/len { sequence length } bind def

/coor [
[92.96484375 113.96606445]
[89.16640472 112.15537262]
[85.85500336 109.29760742]
[71.21056366 112.54419708]
[56.56612015 115.79079437]
[48.57468414 120.84848785]
[41.21247101 118.84482574]
[26.44035339 121.44954681]
[11.66823769 124.05426788]
[-3.10387826 126.65899658]
[-17.87599373 129.26371765]
[-32.64810944 131.86843872]
[-40.30968857 145.50054932]
[-54.95950699 150.97016907]
[-69.68036652 145.69473267]
[-77.52153778 132.16513062]
[-74.78064728 116.76963043]
[-62.75186539 106.77751160]
[-47.11481476 106.90674591]
[-35.25283432 117.09632111]
[-20.48071671 114.49160004]
[-5.70860100 111.88687897]
[9.06351566 109.28215790]
[23.83563232 106.67742920]
[38.60774612 104.07270813]
[53.31952667 101.14635468]
[67.96396637 97.89975739]
[82.60840607 94.65316772]
[91.73983002 82.75286865]
[91.08554077 67.76714325]
[90.43124390 52.78141785]
[89.77695465 37.79569626]
[77.95695496 27.30460167]
[77.10068512 11.52352619]
[87.71616364 -0.18489881]
[103.50540924 -0.87427223]
[115.10094452 9.86439896]
[115.62334442 25.66005135]
[104.76268005 37.14140701]
[105.41696930 52.12712860]
[106.07125854 67.11285400]
[106.72555542 82.09857178]
[108.00184631 67.15296936]
[114.73777008 53.75046158]
[125.96968842 43.80842590]
[140.09072876 38.74917984]
[155.08074951 39.29651260]
[168.79522705 45.37211609]
[179.27217102 56.10680771]
[185.01274109 69.96487427]
[185.19566345 84.96376038]
[179.79478455 98.95770264]
[169.58276367 109.94471741]
[156.02053833 116.35298920]
[141.04832458 117.26573944]
[126.80809021 112.55239868]
[115.33592987 102.88586426]
[125.46977997 113.94502258]
[135.60363770 125.00418854]
[145.73748779 136.06333923]
[161.53567505 136.50224304]
[172.33549500 148.04084778]
[171.72959900 163.83351135]
[160.07746887 174.51074219]
[144.29208374 173.73789978]
[133.73864746 161.97352600]
[134.67832947 146.19720459]
[124.54447174 135.13803101]
[114.41062164 124.07888031]
[104.27677155 113.01971436]
[100.80373383 114.32621002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[29 42]
[30 41]
[31 40]
[32 39]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
