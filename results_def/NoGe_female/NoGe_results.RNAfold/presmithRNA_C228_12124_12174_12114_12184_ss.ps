%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUAUAAUGGAGUAUGCUUGCCUUCCAAGUAAGAGGUUUAACGAUUUUAAAUGAAGUAAUGGUUCGGAA\
) } def
/len { sequence length } bind def

/coor [
[89.47983551 132.86735535]
[82.04656219 129.47221375]
[75.62000275 124.42443848]
[62.96913528 132.48393250]
[50.31826019 140.54342651]
[37.66738892 148.60292053]
[25.01651764 156.66241455]
[12.36564636 164.72190857]
[9.19009495 180.20387268]
[-4.04858398 188.83596802]
[-19.49611473 185.49690247]
[-27.98775291 172.16770935]
[-24.48555946 156.75633240]
[-11.06732464 148.40609741]
[4.30615234 152.07102966]
[16.95702362 144.01153564]
[29.60789680 135.95204163]
[42.25876617 127.89255524]
[54.90963745 119.83306122]
[67.56050873 111.77356720]
[66.66593933 91.06816864]
[77.79335785 73.58404541]
[70.86713409 60.27888489]
[63.94090271 46.97372437]
[57.01467514 33.66856003]
[50.08844376 20.36339760]
[34.72248459 18.20310211]
[23.58436584 7.39930773]
[20.95692444 -7.89370298]
[27.85046387 -21.79545593]
[41.61427689 -28.96044350]
[56.95589828 -26.63358307]
[67.97615814 -15.70959759]
[70.43754578 -0.38898432]
[63.39360809 13.43716908]
[70.31983948 26.74233246]
[77.24606323 40.04749298]
[84.17229462 53.35265732]
[91.09852600 66.65782166]
[109.42577362 66.80223083]
[125.09444427 76.31021118]
[133.68511963 92.50000000]
[148.68511963 92.50000000]
[163.68511963 92.50000000]
[177.48529053 84.76270294]
[190.21257019 92.50000000]
[205.21257019 92.50000000]
[220.21257019 92.50000000]
[227.26884460 78.91812134]
[239.83532715 70.18070221]
[255.02429199 68.29554749]
[269.34542847 73.69583893]
[279.50787354 85.14063263]
[283.17636108 100.00000000]
[279.50787354 114.85936737]
[269.34542847 126.30416107]
[255.02429199 131.70445251]
[239.83532715 129.81929016]
[227.26884460 121.08187866]
[220.21257019 107.50000000]
[205.21257019 107.50000000]
[190.21257019 107.50000000]
[177.48529053 115.23729706]
[163.68511963 107.50000000]
[148.68511963 107.50000000]
[133.68511963 107.50000000]
[130.97718811 115.21023560]
[126.53223419 122.06757355]
[120.59951782 127.68749237]
[113.51169586 131.75486755]
[105.66622162 134.04161072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[42 66]
[43 65]
[44 64]
[46 62]
[47 61]
[48 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
