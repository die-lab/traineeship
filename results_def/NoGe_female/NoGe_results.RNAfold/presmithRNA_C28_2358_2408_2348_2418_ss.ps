%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCUCUUGAUGCCACAGCUUGCUCCUUUGUUUUGGGUUGGGGUUACUGUUUCUCUUUUUCUGGUUGUUU\
) } def
/len { sequence length } bind def

/coor [
[100.60284424 112.00086975]
[91.47142029 123.90117645]
[82.34000397 135.80146790]
[73.20858002 147.70176697]
[64.07715607 159.60206604]
[62.47426224 175.92269897]
[47.42903137 182.44750977]
[34.41871262 172.46434021]
[36.82720566 156.24302673]
[52.17685699 150.47065735]
[61.30827713 138.57035828]
[70.43969727 126.67005157]
[79.57112122 114.76975250]
[88.70254517 102.86945343]
[88.69816589 97.80567932]
[90.82829285 93.28080750]
[87.58170319 78.63636780]
[84.33510590 63.99192810]
[81.08850861 49.34748840]
[68.81929016 43.35132980]
[62.42717743 31.50650024]
[64.10042572 18.34945297]
[72.98664856 8.76986504]
[70.38192749 -6.00225115]
[67.77720642 -20.77436638]
[65.17248535 -35.54648209]
[62.56776047 -50.31859970]
[47.78105545 -53.96184921]
[35.75855637 -63.30953979]
[28.58322906 -76.74213409]
[27.49824715 -91.93235016]
[32.69158936 -106.24839783]
[43.26347733 -117.20992279]
[57.38226318 -122.91778564]
[72.60179138 -122.38306427]
[86.28517914 -115.69839478]
[96.06169891 -104.02194214]
[100.23751068 -89.37671661]
[98.08912659 -74.30010223]
[89.98876953 -61.40420532]
[77.33987427 -52.92332077]
[79.94460297 -38.15120697]
[82.54932404 -23.37908936]
[85.15404510 -8.60697365]
[87.75876617 6.16514254]
[101.86332703 15.05849934]
[105.38916779 31.69679070]
[95.73294830 46.10089111]
[98.97954559 60.74533081]
[102.22614288 75.38977051]
[105.47273254 90.03421021]
[113.35212708 77.27038574]
[124.32305145 67.04108429]
[137.60627747 60.07286835]
[152.25830078 56.86069107]
[167.23841858 57.63270187]
[181.48262024 62.33406830]
[193.97915649 70.63085938]
[203.84040833 81.93376923]
[210.36595154 95.43996429]
[213.09228516 110.19011688]
[211.82577515 125.13655090]
[206.65635681 139.21765137]
[197.95121765 151.43322754]
[186.32867432 160.91566467]
[172.61425781 166.99142456]
[157.78208923 169.22894287]
[142.88565063 167.46929932]
[128.98303223 161.83747864]
[117.06172943 152.73350525]
[107.96846771 140.80401611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[16 51]
[17 50]
[18 49]
[19 48]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
