%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGGCUUGAUGGUCUU\
) } def
/len { sequence length } bind def

/coor [
[4.64262962 238.26904297]
[-3.94506907 246.67501831]
[-15.44497299 249.71583557]
[-26.82945442 246.71534729]
[-37.88861465 256.84918213]
[-48.94777679 266.98303223]
[-60.00693512 277.11691284]
[-64.41952515 292.91122437]
[-80.36920929 296.72433472]
[-91.44831085 284.63363647]
[-86.25960541 269.07696533]
[-70.14078522 266.05773926]
[-59.08162689 255.92388916]
[-48.02246857 245.79003906]
[-36.96330643 235.65617371]
[-37.47261047 217.59330750]
[-24.62465286 204.44862366]
[-5.93342352 204.54855347]
[4.20042992 193.48939514]
[14.33428288 182.43023682]
[24.46813583 171.37107849]
[34.60198975 160.31192017]
[44.73584366 149.25276184]
[54.86969376 138.19358826]
[53.96545410 123.37071228]
[64.08508301 112.01078796]
[79.63881683 111.16284180]
[89.77267456 100.10368347]
[92.58233643 92.25494385]
[100.59792328 88.79547119]
[111.20452881 78.18887329]
[121.81112671 67.58226776]
[126.09822845 52.35297775]
[140.56886292 48.82453537]
[151.17546082 38.21793365]
[161.78207397 27.61133003]
[165.80448914 19.05192184]
[173.09027100 16.78607559]
[184.14942932 6.65222263]
[195.20860291 -3.48163033]
[191.80603027 -18.45888519]
[196.36328125 -33.12609482]
[207.65446472 -43.53785706]
[222.64230347 -46.89345551]
[237.29516602 -42.29025269]
[247.67147827 -30.96649170]
[250.98008728 -15.96820068]
[246.33097839 -1.32984817]
[234.97474670 9.01092339]
[219.96615601 12.27249908]
[205.34245300 7.57752991]
[194.28329468 17.71138382]
[183.22413635 27.84523582]
[172.38867188 38.21793365]
[161.78207397 48.82453537]
[151.17546082 59.43113708]
[147.64701843 73.90177155]
[132.41772461 78.18887329]
[121.81112671 88.79547119]
[111.20452881 99.40207672]
[100.83183289 110.23753357]
[90.69797516 121.29669189]
[91.20885468 136.86514282]
[80.77414703 147.93635559]
[65.92885590 148.32745361]
[55.79500198 159.38661194]
[45.66114807 170.44577026]
[35.52729797 181.50492859]
[25.39344215 192.56408691]
[15.25959015 203.62324524]
[5.12573671 214.68240356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[27 62]
[28 61]
[30 60]
[31 59]
[32 58]
[34 56]
[35 55]
[36 54]
[38 53]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
