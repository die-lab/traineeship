%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUC\
) } def
/len { sequence length } bind def

/coor [
[-39.37773895 224.95397949]
[-48.50915909 236.85427856]
[-57.64057922 248.75457764]
[-53.10453796 263.59384155]
[-58.18893051 278.25430298]
[-70.93869781 287.09866333]
[-86.45130157 286.72613525]
[-98.76182556 277.27993774]
[-103.13661957 262.39233398]
[-97.89349365 247.78790283]
[-85.04853058 239.08236694]
[-69.54087830 239.62315369]
[-60.40945816 227.72285461]
[-51.27803802 215.82255554]
[-55.58532715 207.92913818]
[-57.20208740 199.04833984]
[-55.94334412 190.07481384]
[-51.91492844 181.91949463]
[-45.50493622 175.41717529]
[-37.34643173 171.24098206]
[-28.25497818 169.83282471]
[-19.14709282 171.35667419]
[-10.94788074 175.67976379]
[0.95241946 166.54833984]
[12.85271931 157.41691589]
[24.75301933 148.28549194]
[30.14007378 134.39921570]
[45.79865646 132.13661194]
[57.69895554 123.00518799]
[69.59925842 113.87377167]
[81.49955750 104.74234772]
[83.49482727 90.39086151]
[94.99013519 81.57019806]
[109.36901855 83.35735321]
[121.26932526 74.22592926]
[122.12672424 62.98707199]
[129.03343201 54.36412430]
[139.38633728 51.20408630]
[149.50434875 54.36718750]
[162.15522766 46.30769348]
[165.80439758 40.18396378]
[171.25656128 37.47890091]
[176.27886963 38.15340042]
[189.58403015 31.22717285]
[202.88919067 24.30094337]
[216.19435120 17.37471390]
[224.54446411 3.26061940]
[240.93757629 3.70552111]
[248.50987244 18.25174332]
[239.47160339 31.93537903]
[223.12059021 30.67987633]
[209.81542969 37.60610580]
[196.51026917 44.53233337]
[183.20509338 51.45856476]
[170.21472168 58.95856476]
[157.56384277 67.01805878]
[150.29466248 84.72830963]
[130.40074158 86.12622833]
[118.50044250 95.25765228]
[116.50517273 109.60913849]
[105.00986481 118.42980194]
[90.63098145 116.64264679]
[78.73067474 125.77407074]
[66.83037567 134.90548706]
[54.93007660 144.03691101]
[48.69183350 158.57633972]
[33.88444138 160.18579102]
[21.98414040 169.31721497]
[10.08384132 178.44863892]
[-1.81645918 187.58006287]
[-2.05442381 209.75544739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[23 70]
[24 69]
[25 68]
[26 67]
[28 65]
[29 64]
[30 63]
[31 62]
[34 59]
[35 58]
[39 56]
[40 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
