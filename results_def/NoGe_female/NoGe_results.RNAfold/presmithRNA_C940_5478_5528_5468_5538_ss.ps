%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGACUAUUAAAGUGGCACGUGAGUUGAGUUCAGACCGGCGUGAGCCAGGUUGGUUUCUAUCUUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[41.48325729 170.05494690]
[29.19597626 178.65858459]
[22.32946968 192.91206360]
[7.46596622 193.87409973]
[0.59946012 208.12757874]
[-14.26404381 209.08961487]
[-26.55132484 217.69326782]
[-38.83860397 226.29690552]
[-43.02926636 241.78297424]
[-57.80628586 248.02951050]
[-71.83399963 240.24472046]
[-74.35153961 224.40043640]
[-63.42767334 212.65101624]
[-47.44225311 214.00962830]
[-35.15497208 205.40599060]
[-22.86769104 196.80233765]
[-16.88005257 183.16424561]
[-1.13768017 181.58682251]
[4.84995747 167.94873047]
[20.59232903 166.37130737]
[32.87961197 157.76765442]
[33.66136169 136.10389709]
[49.69168854 121.14282227]
[71.85636139 121.87236023]
[81.49816895 110.38169098]
[78.89981079 97.79113007]
[84.04934692 86.01165009]
[95.05590057 79.36863708]
[107.87789917 80.30137634]
[118.01175690 69.24221802]
[128.14561462 58.18305588]
[131.76432800 42.78125763]
[146.06729126 38.62496948]
[156.20114136 27.56581116]
[166.33499146 16.50665092]
[169.98022461 7.77993345]
[177.16024780 5.19844341]
[187.76684570 -5.40815830]
[198.37345886 -16.01476097]
[208.74615479 -26.85021973]
[218.88000488 -37.90937805]
[229.01385498 -48.96854019]
[232.03308105 -65.08735657]
[247.58973694 -70.27606201]
[259.68045044 -59.19695663]
[255.86735535 -43.24728012]
[240.07301331 -38.83468628]
[229.93916321 -27.77552605]
[219.80531311 -16.71636581]
[217.53945923 -9.43057251]
[208.98005676 -5.40815830]
[198.37345886 5.19844341]
[187.76684570 15.80504513]
[177.39414978 26.64050484]
[167.26029968 37.69966507]
[157.12644958 48.75882339]
[154.23255920 63.36959839]
[139.20477295 68.31690979]
[129.07090759 79.37606812]
[118.93706512 90.43522644]
[120.11121368 106.75547028]
[109.32271576 119.05738831]
[92.98883820 120.02350616]
[83.34702301 131.51417542]
[87.30835724 139.89414978]
[88.43346405 149.05982971]
[86.63008881 158.08122253]
[82.10200500 166.04978943]
[75.32626343 172.17005920]
[67.00299835 175.83891296]
[57.98310089 176.70503235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[4 18]
[6 16]
[7 15]
[8 14]
[24 64]
[25 63]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[35 54]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
