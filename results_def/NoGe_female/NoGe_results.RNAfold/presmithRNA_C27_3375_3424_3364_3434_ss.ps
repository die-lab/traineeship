%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGCUGUCGGGCUCAUACCCCGGAAAUGAGUGUUGUGGUGGGCUCCUCUGCUGGUGGGUUCUGGCUAGU\
) } def
/len { sequence length } bind def

/coor [
[82.93714905 349.00698853]
[67.51338959 353.42141724]
[54.52960968 343.99798584]
[53.94586182 327.96554565]
[66.20994568 317.62283325]
[68.81466675 302.85070801]
[71.41938782 288.07861328]
[73.70124054 273.25317383]
[75.65913391 258.38150024]
[77.61702728 243.50982666]
[79.57492065 228.63815308]
[81.53280640 213.76647949]
[83.49069977 198.89480591]
[85.12370300 183.98396301]
[86.43104553 169.04104614]
[87.73838043 154.09812927]
[89.04571533 139.15521240]
[90.35305023 124.21228790]
[79.59288025 116.21258545]
[74.23345947 103.92222595]
[75.69315338 90.59384918]
[83.58566284 79.75480652]
[95.82221985 74.27365875]
[97.78011322 59.40198898]
[99.73800659 44.53031540]
[101.69589996 29.65864182]
[94.35510254 21.10529137]
[93.14153290 10.12416744]
[98.22766113 0.56907105]
[107.61882782 -4.34879398]
[110.86541748 -18.99323463]
[114.11201477 -33.63767242]
[117.35861206 -48.28211594]
[112.79161835 -63.42982483]
[123.10019684 -74.18075562]
[114.39824677 -87.37361145]
[117.65560150 -102.83857727]
[130.93972778 -111.40056610]
[146.36938477 -107.97988892]
[154.79045105 -94.60597992]
[151.20683289 -79.21334839]
[137.74464417 -70.93415833]
[142.54385376 -56.83391571]
[132.00305176 -45.03551865]
[128.75645447 -30.39108086]
[125.50986481 -15.74664021]
[122.26326752 -1.10219979]
[129.64620972 16.56092834]
[116.56757355 31.61653328]
[114.60968018 46.48820877]
[112.65178680 61.35987854]
[110.69389343 76.23155212]
[122.62522888 87.06178284]
[125.90843964 102.83743286]
[119.28858185 117.52852631]
[105.29597473 125.51962280]
[103.98863220 140.46253967]
[102.68129730 155.40545654]
[101.37396240 170.34838867]
[100.06662750 185.29130554]
[102.48715973 194.43374634]
[98.36237335 200.85270691]
[96.40447998 215.72438049]
[94.44658661 230.59605408]
[92.48870087 245.46772766]
[90.53080750 260.33938599]
[88.57291412 275.21105957]
[90.59235382 284.45040894]
[86.19150543 290.68331909]
[83.58678436 305.45544434]
[80.98205566 320.22756958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[23 52]
[24 51]
[25 50]
[26 49]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
