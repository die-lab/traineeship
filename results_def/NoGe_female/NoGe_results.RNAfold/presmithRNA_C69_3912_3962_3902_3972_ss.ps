%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUUCUUUUAUU\
) } def
/len { sequence length } bind def

/coor [
[66.16420746 339.64273071]
[51.63323593 344.02624512]
[36.50029373 342.86065674]
[22.81199455 336.30361938]
[12.41956425 325.24188232]
[6.72849369 311.17147827]
[6.50845385 295.99533081]
[11.78920364 281.76583862]
[21.85656548 270.40747070]
[35.34901047 263.45632935]
[50.44179535 261.85250854]
[54.32408142 247.36361694]
[58.20636749 232.87472534]
[50.55984879 220.14419556]
[54.29063797 205.39511108]
[67.69543457 197.46104431]
[71.57772064 182.97216797]
[75.46000671 168.48327637]
[79.34229279 153.99438477]
[83.22457886 139.50550842]
[86.78986359 124.93537140]
[90.03646088 110.29093170]
[86.01558685 96.89973450]
[95.31909943 86.46247864]
[98.56569672 71.81803131]
[101.81228638 57.17359543]
[105.05888367 42.52915573]
[107.98523712 27.81737518]
[110.58995819 13.04525948]
[108.67411041 8.87796593]
[108.21301270 4.72225666]
[109.02742767 1.02944016]
[110.81113434 -1.85293519]
[113.17555237 -3.71322203]
[115.70131683 -4.49101734]
[121.44157410 -18.34921074]
[127.18182373 -32.20740509]
[120.90299225 -46.71091461]
[126.79631805 -61.37530136]
[141.36540222 -67.50044250]
[155.96665955 -61.45240402]
[161.93742371 -46.81937408]
[155.73535156 -32.28287506]
[141.04000854 -26.46715164]
[135.29975891 -12.60895920]
[129.55950928 1.24923420]
[125.36207581 15.64998245]
[122.75735474 30.42209816]
[124.76101685 37.78431320]
[119.70332336 45.77574921]
[116.45672607 60.42018890]
[113.21013641 75.06462860]
[109.96353912 89.70906830]
[113.98441315 103.10026550]
[104.68090057 113.53752136]
[101.43430328 128.18196106]
[102.64080048 137.56213379]
[97.71346283 143.38778687]
[93.83117676 157.87667847]
[89.94889069 172.36555481]
[86.06660461 186.85444641]
[82.18431854 201.34333801]
[89.82618713 214.91682434]
[85.68259430 229.55531311]
[72.69525146 236.75701904]
[68.81296539 251.24591064]
[64.93067932 265.73480225]
[77.19950867 274.67013550]
[85.40873718 287.43621826]
[88.44813538 302.30654907]
[85.90666199 317.27001953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 67]
[12 66]
[13 65]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
