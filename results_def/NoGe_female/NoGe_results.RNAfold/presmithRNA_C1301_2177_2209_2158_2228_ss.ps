%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCGUCCUGGUGUUUAUUAUGGCCAGUGCUCUGAGAUUUGUGGGGCUAACCAUUCUUUUAUGCCUAUCGU\
) } def
/len { sequence length } bind def

/coor [
[76.76802826 105.49611664]
[61.82511139 104.18878174]
[46.88219070 102.88143921]
[31.93927002 101.57410431]
[16.94283867 101.24687958]
[1.95711601 101.90117645]
[-11.49242496 110.23306274]
[-24.54508018 103.05828857]
[-39.53080368 103.71257782]
[-54.51652527 104.36686707]
[-69.50225067 105.02115631]
[-84.48797607 105.67544556]
[-91.50865173 119.33581543]
[-104.42760468 127.64220428]
[-119.76970673 128.36024475]
[-133.40800476 121.29678345]
[-141.67385864 108.35185242]
[-142.34379578 93.00758362]
[-135.23762512 79.39149475]
[-122.26685333 71.16625214]
[-106.92055511 70.54441071]
[-93.32680511 77.69322968]
[-85.14226532 90.68972778]
[-70.15653992 90.03543091]
[-55.17081833 89.38114166]
[-40.18509293 88.72685242]
[-25.19937134 88.07256317]
[-12.82170868 79.78746796]
[1.30282509 86.91545105]
[16.28854752 86.26116180]
[19.05182266 83.60900116]
[23.36203766 82.34141541]
[28.46057320 83.23039246]
[33.24660492 86.63118744]
[48.18952560 87.93852234]
[63.13244629 89.24585724]
[78.07537079 90.55319214]
[87.75978851 79.50344086]
[102.08068848 76.21760559]
[115.61344910 81.94032288]
[123.23197174 94.50388336]
[135.27224731 84.62110138]
[150.40786743 86.15979767]
[159.75540161 97.69927216]
[174.69831848 99.00660706]
[189.64123535 100.31394196]
[204.58415222 101.62127686]
[219.55203247 102.60232544]
[234.53776550 103.25661469]
[249.52348328 103.91091156]
[259.07733154 91.68374634]
[274.00274658 87.43975067]
[288.56060791 92.81082153]
[297.15310669 105.73168182]
[296.47625732 121.23398590]
[286.79034424 133.35678101]
[271.81976318 137.43862915]
[257.32101440 131.90994263]
[248.86920166 118.89662933]
[233.88346863 118.24234009]
[218.89775085 117.58805084]
[211.86004639 120.53553009]
[203.27682495 116.56420135]
[188.33389282 115.25686646]
[173.39097595 113.94952393]
[158.44805908 112.64218903]
[147.23873901 122.38317108]
[132.06587219 121.27021790]
[121.92462921 109.44680786]
[112.24021149 120.49655914]
[97.91931152 123.78239441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 30]
[6 29]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[41 69]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
