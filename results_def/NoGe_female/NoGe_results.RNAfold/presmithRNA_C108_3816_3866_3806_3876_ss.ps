%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGAGACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGG\
) } def
/len { sequence length } bind def

/coor [
[99.24032593 288.04327393]
[92.62718201 274.38198853]
[91.39952850 259.25396729]
[95.72339630 244.70513916]
[105.01402283 232.70310974]
[118.01493073 224.87106323]
[115.41020966 210.09895325]
[101.30564880 201.20559692]
[97.77980804 184.56730652]
[107.43601990 170.16319275]
[104.18943024 155.51875305]
[100.94283295 140.87431335]
[97.69624329 126.22988129]
[94.44964600 111.58543396]
[85.09629822 123.31211090]
[70.72841644 127.62069702]
[56.46565628 122.97594452]
[47.39022446 111.03289032]
[46.73593521 96.04716492]
[54.73592758 83.35858154]
[68.53959656 77.48842621]
[83.22832489 80.52838135]
[93.56812286 91.39522552]
[95.52601624 76.52355194]
[97.48390961 61.65188217]
[99.44180298 46.78020859]
[101.39969635 31.90853500]
[95.52986908 17.21650505]
[104.86222076 5.60803747]
[106.82011414 -9.26363564]
[100.95028687 -23.95566559]
[110.28263855 -35.56413269]
[112.24053192 -50.43580627]
[100.89257050 -61.01897049]
[97.96556091 -76.25748444]
[104.58499908 -90.29182434]
[118.20557404 -97.72550201]
[133.58988953 -95.70011902]
[144.82238770 -84.99446869]
[147.58390808 -69.72510529]
[140.81262207 -55.76339722]
[127.11220551 -48.47791290]
[125.15431213 -33.60623932]
[131.16416931 -19.97793198]
[121.69178772 -7.30574274]
[119.73389435 7.56593037]
[125.74375916 21.19423866]
[116.27136993 33.86642838]
[114.31347656 48.73810196]
[112.35558319 63.60977554]
[110.39768982 78.48144531]
[108.43979645 93.35311890]
[109.09408569 108.33884430]
[112.34068298 122.98328400]
[115.58727264 137.62771606]
[118.83386993 152.27217102]
[122.08045959 166.91661072]
[134.34968567 172.91276550]
[140.74179077 184.75758362]
[139.06855774 197.91464233]
[130.18232727 207.49423218]
[132.78704834 222.26634216]
[147.68261719 225.17948914]
[160.51788330 233.28012085]
[169.55699158 245.47270203]
[173.57746887 260.10827637]
[172.03556824 275.20751953]
[165.13984680 288.72836304]
[153.82286072 298.84225464]
[139.61517334 304.18133545]
[124.43822479 304.02355957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 62]
[7 61]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[29 46]
[30 45]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
