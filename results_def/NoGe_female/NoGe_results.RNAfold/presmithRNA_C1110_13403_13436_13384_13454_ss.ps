%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGUACAUAGUUUCGGCCUAUGGGGGGGACGUACGGUUCUUUGCUUAUCGUGUGUGGGUUCUGGGUAG\
) } def
/len { sequence length } bind def

/coor [
[140.69117737 309.92739868]
[136.80889893 295.43853760]
[132.92660522 280.94964600]
[129.04432678 266.46075439]
[125.16203308 251.97186279]
[114.39431763 241.68081665]
[118.29622650 226.34831238]
[114.41394043 211.85943604]
[110.53165436 197.37054443]
[106.64936829 182.88165283]
[102.76708221 168.39276123]
[98.88479614 153.90388489]
[96.16075897 152.40202332]
[93.97451019 149.55880737]
[92.91361237 145.61924744]
[93.44505310 141.06512451]
[95.82604218 136.55680847]
[94.51870728 121.61389160]
[93.21137238 106.67097473]
[89.82767487 102.21998596]
[89.36778259 96.15601349]
[92.50000000 90.37791443]
[92.50000000 75.37791443]
[84.76270294 61.57774353]
[92.50000000 48.85047150]
[84.76270294 35.05029678]
[92.50000000 22.32302666]
[92.50000000 7.32302666]
[92.50000000 -7.67697334]
[92.50000000 -22.67697334]
[92.50000000 -37.67697525]
[92.50000000 -52.67697525]
[92.50000000 -67.67697144]
[82.21823120 -79.99220276]
[85.57711029 -95.67969513]
[100.00000000 -102.70535278]
[114.42288971 -95.67969513]
[117.78176880 -79.99220276]
[107.50000000 -67.67697144]
[107.50000000 -52.67697525]
[107.50000000 -37.67697525]
[107.50000000 -22.67697334]
[107.50000000 -7.67697334]
[107.50000000 7.32302666]
[107.50000000 22.32302666]
[115.23729706 35.05029678]
[107.50000000 48.85047150]
[115.23729706 61.57774353]
[107.50000000 75.37791443]
[107.50000000 90.37791443]
[108.15428925 105.36363983]
[109.46162415 120.30655670]
[110.76896667 135.24948120]
[113.37368774 150.02159119]
[117.25597382 164.51048279]
[121.13825989 178.99937439]
[125.02054596 193.48825073]
[128.90283203 207.97714233]
[132.78511047 222.46603394]
[143.83052063 233.79341125]
[139.65092468 248.08956909]
[143.53320312 262.57846069]
[147.41549683 277.06735229]
[151.29777527 291.55624390]
[155.18006897 306.04513550]
[169.42803955 312.48944092]
[176.15367126 326.60678101]
[172.18132019 341.73141479]
[159.38661194 350.72192383]
[143.81080627 349.33328247]
[132.80833435 338.22113037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[17 53]
[18 52]
[19 51]
[22 50]
[23 49]
[25 47]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
