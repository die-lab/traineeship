%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUAUUUUUUGAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAU\
) } def
/len { sequence length } bind def

/coor [
[96.84760284 152.34690857]
[85.50260925 142.53410339]
[83.66648102 127.64689636]
[92.28892517 115.37046051]
[80.38862610 124.50188446]
[68.48832703 133.63330078]
[69.02911377 149.14094543]
[60.32357025 161.98591614]
[45.71914673 167.22904968]
[30.83154106 162.85424805]
[21.38534546 150.54371643]
[21.01281166 135.03112793]
[29.85718727 122.28134918]
[44.51763153 117.19696045]
[59.35690308 121.73300171]
[71.25720215 112.60157776]
[83.15750122 103.47016144]
[88.89775085 89.61196899]
[86.93985748 74.74029541]
[84.98197174 59.86862183]
[83.02407837 44.99694824]
[81.06618500 30.12527466]
[79.10829163 15.25360203]
[66.85377502 5.63774729]
[65.08004761 -9.47213459]
[74.32281494 -21.09568024]
[64.85042572 -33.76787186]
[70.86029053 -47.39617920]
[68.90239716 -62.26785278]
[66.94450378 -77.13952637]
[64.98661041 -92.01119995]
[52.29722595 -101.43218994]
[50.06880569 -117.07858276]
[59.62342834 -129.66764832]
[75.29251099 -131.73052979]
[87.77986145 -122.04333496]
[89.67695618 -106.35332489]
[79.85828400 -93.96909332]
[81.81617737 -79.09741974]
[83.77407074 -64.22574615]
[85.73196411 -49.35407257]
[95.06430817 -37.74560547]
[89.19448853 -23.05357361]
[101.13071442 -14.21829510]
[103.32814789 0.83580548]
[93.97996521 13.29570961]
[95.93785858 28.16738319]
[97.89574432 43.03905487]
[99.85363770 57.91072845]
[101.81153107 72.78240204]
[103.76942444 87.65407562]
[115.21955872 89.98425293]
[123.38721466 102.59234619]
[135.67449951 111.19599152]
[147.96177673 119.79963684]
[160.24905396 128.40328979]
[175.99142456 129.98071289]
[181.97906494 143.61880493]
[197.96449280 142.26019287]
[208.88835144 154.00959778]
[206.37081909 169.85389709]
[192.34310913 177.63867188]
[177.56608582 171.39213562]
[173.37542725 155.90608215]
[158.51191711 154.94404602]
[151.64541626 140.69056702]
[139.35812378 132.08691406]
[127.07084656 123.48326874]
[114.78356934 114.87962341]
[123.93270874 126.76631165]
[122.74916840 141.71954346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
