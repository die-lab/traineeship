%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGUAUCUUUUGGAGUGUCAGGAGAUUGAGGCUGUUUGGACUGUGUUGCCGGGGGCUGUUUUGGUUU\
) } def
/len { sequence length } bind def

/coor [
[178.32423401 175.47364807]
[166.83355713 165.83184814]
[152.11045837 163.57801819]
[146.51235962 148.78033447]
[135.02169800 139.13851929]
[123.53102875 129.49670410]
[112.04035950 119.85488892]
[100.54969025 110.21307373]
[92.58586884 107.74844360]
[88.78005219 99.89138031]
[77.72089386 89.75752258]
[65.80079651 92.62784576]
[54.13426208 89.27441406]
[45.72828293 80.68672180]
[42.68746567 69.18681335]
[45.68796539 57.80233383]
[30.66016579 52.85502243]
[27.76628304 38.24425125]
[17.63242912 27.18508911]
[7.49857616 16.12592888]
[-7.52922153 11.17861938]
[-10.42310524 -3.43215394]
[-20.55695915 -14.49131393]
[-30.69081116 -25.55047417]
[-40.82466507 -36.60963440]
[-56.61900330 -41.02222443]
[-60.43210983 -56.97190475]
[-48.34138870 -68.05101013]
[-32.78473663 -62.86230469]
[-29.76550484 -46.74348831]
[-19.63165092 -35.68432617]
[-9.49779892 -24.62516785]
[0.63605440 -13.56600666]
[14.93901062 -9.40972233]
[18.55773544 5.99207640]
[28.69158936 17.05123711]
[38.82544327 28.11039734]
[53.12839890 32.26668167]
[56.74712372 47.66847992]
[74.80998993 47.15917969]
[87.95468140 60.00713348]
[87.85475159 78.69836426]
[98.91390991 88.83221436]
[110.19150543 98.72240448]
[121.68217468 108.36421967]
[133.17283630 118.00603485]
[144.66351318 127.64785004]
[156.15417480 137.28965759]
[171.69915771 140.23312378]
[176.47537231 154.34117126]
[187.96603394 163.98298645]
[200.06271362 172.85263062]
[212.71357727 180.91212463]
[225.36445618 188.97161865]
[238.01531982 197.03111267]
[250.66619873 205.09060669]
[263.31707764 213.15010071]
[275.96792603 221.20959473]
[292.36614990 221.38395691]
[300.17742920 235.80326843]
[291.36614990 249.63415527]
[274.99664307 248.64862061]
[267.90844727 233.86047363]
[255.25756836 225.80097961]
[242.60670471 217.74148560]
[229.95582581 209.68199158]
[217.30496216 201.62249756]
[204.65408325 193.56300354]
[192.00321960 185.50350952]
[188.21846008 186.09107971]
[183.96067810 184.65718079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[10 43]
[11 42]
[16 39]
[18 37]
[19 36]
[20 35]
[22 33]
[23 32]
[24 31]
[25 30]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
