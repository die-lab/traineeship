%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGUGUUUUUAGAAUAAACGGCCGCGGUACUCUGACCGUGCAAAGGUAGCAUAAUCAUUUGUCCUUUA\
) } def
/len { sequence length } bind def

/coor [
[74.54962921 104.70877075]
[60.95501328 111.04804230]
[47.36039352 117.38731384]
[44.29209518 132.48339844]
[33.05443192 142.75804138]
[18.09839630 144.42567444]
[5.18283606 137.05503845]
[-8.41178131 143.39430237]
[-22.00639725 149.73358154]
[-35.60101318 156.07286072]
[-49.19563293 162.41212463]
[-60.99546814 174.58587646]
[-75.95998383 166.61721802]
[-72.44532776 150.03157043]
[-55.53490448 148.81752014]
[-41.94028854 142.47824097]
[-28.34567070 136.13896179]
[-14.75105476 129.79969788]
[-1.15643799 123.46041870]
[1.49928856 108.82876587]
[12.39031982 98.44371033]
[27.48458481 96.43957520]
[41.02112198 103.79270172]
[54.61573792 97.45342255]
[68.21035767 91.11415100]
[75.42518616 77.96324921]
[73.46729279 63.09157562]
[71.50939941 48.21990204]
[69.55150604 33.34822845]
[67.59361267 18.47655678]
[65.63571930 3.60488439]
[52.94633865 -5.81610680]
[50.71791840 -21.46250153]
[60.27254105 -34.05157089]
[75.94161987 -36.11444473]
[88.42897034 -26.42725754]
[90.32606506 -10.73724174]
[80.50739288 1.64699149]
[82.46528625 16.51866531]
[84.42317963 31.39033699]
[86.38107300 46.26200867]
[88.33896637 61.13368225]
[90.29685974 76.00535583]
[112.08693695 80.47289276]
[119.98721313 98.43797302]
[134.29296875 102.94856262]
[148.59872437 107.45915222]
[162.90447998 111.96973419]
[177.21023560 116.48032379]
[184.24691772 115.33949280]
[189.82369995 117.77731323]
[192.53527832 122.05818939]
[206.39347839 127.79843903]
[220.25166321 133.53869629]
[233.41128540 125.31652832]
[248.88812256 126.43326569]
[260.73101807 136.45950317]
[264.38613892 151.53994751]
[258.44802856 165.87585449]
[245.19996643 173.95477295]
[229.73616028 172.67021179]
[218.00273132 162.51608276]
[214.51141357 147.39688110]
[200.65322876 141.65663147]
[186.79502869 135.91638184]
[172.69964600 130.78607178]
[158.39389038 126.27548981]
[144.08813477 121.76490021]
[129.78237915 117.25431824]
[115.47662354 112.74372864]
[102.74944305 121.82033539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
