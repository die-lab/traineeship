%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAGGGGCUUCACGCCGGAUGUACGGAUUACGUUGAUGGUGUAAAAUAAGGAAAGCCUUGUUUCCUGAA\
) } def
/len { sequence length } bind def

/coor [
[97.29443359 213.38154602]
[86.67895508 201.67312622]
[87.53522491 185.89204407]
[99.35523224 175.40095520]
[100.00952148 160.41522217]
[100.66381073 145.42950439]
[101.31809998 130.44378662]
[91.84561920 128.42526245]
[83.76354980 123.63085175]
[77.82768250 116.72123718]
[74.52375031 108.54201508]
[74.03038788 100.02273560]
[76.21747589 92.07216644]
[80.67821503 85.48148346]
[72.07456970 73.19419861]
[63.47092056 60.90692139]
[54.86727524 48.61964035]
[46.26362991 36.33235931]
[37.65998077 24.04507828]
[24.88340569 25.47773552]
[12.82171059 21.24366570]
[3.84759831 12.24331188]
[-0.30301851 0.30792665]
[1.13341844 -12.17279625]
[7.80851173 -22.72914314]
[0.30851164 -35.71952438]
[-7.19148827 -48.70990753]
[-22.25337410 -54.23431778]
[-27.18824387 -69.49952698]
[-18.21048737 -82.79537201]
[-2.20707107 -83.92241669]
[8.54555321 -72.01609039]
[5.79889250 -56.20990753]
[13.29889297 -43.21952438]
[20.79889297 -30.22914314]
[38.18182373 -29.36648560]
[51.83564758 -18.32844543]
[56.40025711 -1.21613264]
[49.94726181 15.44143200]
[58.55091095 27.72871208]
[67.15455627 40.01599121]
[75.75820160 52.30327225]
[84.36184692 64.59055328]
[92.96549225 76.87783813]
[118.55522156 79.94733429]
[129.75238037 106.58458710]
[144.62405396 108.54248047]
[159.49572754 110.50037384]
[174.36740112 112.45825958]
[189.23907471 114.41615295]
[204.11074829 116.37404633]
[218.98242188 118.33193970]
[233.85409546 120.28983307]
[248.78961182 113.51766968]
[261.96289062 123.28482056]
[259.82235718 139.54367065]
[244.57005310 145.56851196]
[231.89620972 135.16151428]
[217.02453613 133.20361328]
[202.15286255 131.24572754]
[187.28118896 129.28782654]
[172.40951538 127.32993317]
[157.53784180 125.37203979]
[142.66616821 123.41415405]
[127.79449463 121.45626068]
[116.30382538 131.09806824]
[115.64953613 146.08380127]
[114.99524689 161.06951904]
[114.34095001 176.05523682]
[125.20162201 187.53659058]
[124.67921448 203.33224487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[7 66]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[25 35]
[26 34]
[27 33]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
