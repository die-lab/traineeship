%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAUAAUCAUUUGUCCUUUAAUUGUGGGCUGGGAUGAAGGGGAAGAUCGUGAGUUUGGCUGUCUCCUUU\
) } def
/len { sequence length } bind def

/coor [
[111.24608612 160.98855591]
[97.51887512 167.03535461]
[82.53821564 166.27400208]
[69.49478149 158.86663818]
[61.16667557 146.39096069]
[59.32767105 131.50411987]
[64.36945343 117.37682343]
[75.21819305 107.01802063]
[89.56230927 102.63404846]
[76.57192993 95.13404846]
[63.58154678 87.63404846]
[50.59116364 80.13404846]
[37.60078430 72.63404846]
[24.61040306 65.13404846]
[11.30523968 58.20782089]
[-2.28937674 51.86854553]
[-15.88399315 45.52927399]
[-29.47861099 39.18999863]
[-42.46749878 47.51419830]
[-57.89480591 47.47178650]
[-70.83773041 39.07629776]
[-77.16622925 25.00669861]
[-74.86090851 9.75254917]
[-64.65738678 -1.81860578]
[-49.81156540 -6.01445436]
[-35.06069565 -1.49611652]
[-25.11172676 10.29462337]
[-23.13933563 25.59538269]
[-9.54471970 31.93465614]
[4.04989719 38.27392960]
[17.64451408 44.61320496]
[22.63262367 43.72027206]
[28.19759560 46.18494034]
[32.11040115 52.14366913]
[45.10078430 59.64366913]
[58.09116364 67.14366913]
[71.08154297 74.64366913]
[84.07192993 82.14366913]
[97.06230927 89.64366913]
[111.46305847 93.84110260]
[126.44877625 94.49539185]
[141.43450928 95.14968872]
[156.42022705 95.80397797]
[171.40594482 96.45826721]
[186.39167786 97.11255646]
[201.38810730 97.43978119]
[216.38810730 97.43978119]
[225.28479004 94.23164368]
[232.03881836 97.78128052]
[247.02455139 98.43556976]
[262.01028442 99.08985901]
[273.49163818 88.22919464]
[289.28726196 88.75159454]
[300.02593994 100.34713745]
[299.33657837 116.13638306]
[287.62814331 126.75186157]
[271.84707642 125.89559174]
[261.35598755 114.07558441]
[246.37025452 113.42129517]
[231.38453674 112.76700592]
[216.38810730 112.43978119]
[201.38810730 112.43978119]
[194.48567200 115.69143677]
[185.73738098 112.09828186]
[170.75166321 111.44399261]
[155.76593018 110.78970337]
[140.78021240 110.13540649]
[125.79448700 109.48111725]
[110.80876160 108.82682800]
[120.55139160 120.23214722]
[124.13491821 134.79780579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 31]
[16 30]
[17 29]
[18 28]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 62]
[47 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
