%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUUGAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[48.79134369 197.05818176]
[37.25845337 187.46691895]
[28.81512833 175.06892395]
[24.11519623 160.82424927]
[23.52260208 145.83596802]
[27.08323288 131.26469421]
[34.52136612 118.23879242]
[45.26102066 107.76692963]
[58.47055435 100.66001892]
[73.12707520 97.46839142]
[88.09085083 98.43820190]
[77.95699310 87.37903595]
[67.82314301 76.31987762]
[57.68928909 65.26071930]
[47.55543518 54.20156097]
[37.42158508 43.14239883]
[21.86784554 42.29445267]
[11.74822044 30.93453026]
[12.65246010 16.11164474]
[-2.37533689 11.16433525]
[-5.26922131 -3.44643855]
[-15.40307426 -14.50559902]
[-25.53692818 -25.56475830]
[-35.67078018 -36.62392044]
[-51.46897507 -37.06281281]
[-62.26879501 -48.60141754]
[-61.66289902 -64.39408875]
[-50.01075363 -75.07131195]
[-34.22537231 -74.29847717]
[-23.67193985 -62.53409958]
[-24.61161995 -46.75777054]
[-14.47776699 -35.69861221]
[-4.34391403 -24.63945198]
[5.78993893 -13.58029175]
[20.09289551 -9.42400646]
[23.71162033 5.97779179]
[38.55691147 6.36889172]
[48.99161911 17.44009209]
[48.48074341 33.00854492]
[58.61459732 44.06770706]
[68.74845123 55.12686539]
[78.88230133 66.18602753]
[89.01615906 77.24518585]
[99.15000916 88.30434418]
[104.44248199 89.28334808]
[108.68535614 92.50000000]
[123.68535614 92.50000000]
[138.68536377 92.50000000]
[153.68536377 92.50000000]
[167.48553467 84.76270294]
[180.21279907 92.50000000]
[192.52803040 82.21823120]
[208.21551514 85.57711029]
[215.24118042 100.00000000]
[208.21551514 114.42288971]
[192.52803040 117.78176880]
[180.21279907 107.50000000]
[167.48553467 115.23729706]
[153.68536377 107.50000000]
[138.68536377 107.50000000]
[123.68535614 107.50000000]
[108.68535614 107.50000000]
[119.51277161 117.88108826]
[127.06028748 130.84393311]
[130.74343872 145.38470459]
[130.27702332 160.37745667]
[125.69715881 174.66117859]
[117.35848999 187.12980652]
[105.90673065 196.81781006]
[92.22867584 202.97497559]
[77.38349152 205.12452698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[19 36]
[21 34]
[22 33]
[23 32]
[24 31]
[46 62]
[47 61]
[48 60]
[49 59]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
