%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCGACUCACUCGGUAGCUUUAGCGGACGGAACGUAGUUCUUCCUCCAAUUUACAAGAUUGGUGCUUCU\
) } def
/len { sequence length } bind def

/coor [
[70.46576691 105.57147980]
[69.76693726 94.85439301]
[54.99481964 97.45911407]
[40.22270203 100.06383514]
[25.45058632 102.66855621]
[10.67846966 105.27327728]
[2.47402573 109.97757721]
[-4.79378271 107.65468597]
[-19.66545486 109.61257935]
[-32.33764648 119.08496857]
[-45.96595383 113.07511139]
[-55.58181000 125.32962036]
[-70.69168854 127.10334778]
[-82.31523895 117.86058044]
[-94.98908234 128.26759338]
[-110.24140167 122.24274445]
[-112.38191986 105.98389435]
[-99.20865631 96.21674347]
[-84.27313232 102.98890686]
[-75.43785095 91.05268860]
[-60.38375092 88.85524750]
[-47.92384720 98.20343781]
[-36.31538010 88.87108612]
[-21.62334824 94.74090576]
[-6.75167561 92.78301239]
[8.07374668 90.50116730]
[22.84586334 87.89643860]
[37.61798096 85.29171753]
[52.39009476 82.68699646]
[67.16220856 80.08227539]
[77.29606628 69.02311707]
[78.60340118 54.08019257]
[79.91073608 39.13727188]
[81.21807098 24.19435310]
[82.52541351 9.25143242]
[77.88255310 -7.05440092]
[92.26586914 -16.02972031]
[104.87213135 -4.69311810]
[97.46833038 10.55876827]
[96.16099548 25.50168800]
[94.85366058 40.44461060]
[93.54632568 55.38753128]
[92.23898315 70.33045197]
[108.93336487 72.37445831]
[121.14232635 82.57082367]
[125.57865143 96.89450836]
[140.51272583 91.67112732]
[151.70307922 101.50094604]
[166.47520447 104.10567474]
[181.24731445 106.71039581]
[196.01942444 109.31511688]
[210.79154968 111.91983795]
[225.56365967 114.52455902]
[240.33578491 117.12928772]
[256.98422241 113.92523956]
[264.67178345 129.03608704]
[252.27961731 140.60632324]
[237.73106384 131.90139771]
[222.95893860 129.29667664]
[208.18682861 126.69195557]
[193.41470337 124.08723450]
[178.64259338 121.48251343]
[163.87046814 118.87778473]
[149.09835815 116.27306366]
[135.22087097 121.68274689]
[122.97392273 111.66662598]
[117.90129089 119.37532043]
[110.28292847 124.95635223]
[100.98811340 127.58679199]
[91.14436340 126.79151917]
[82.00076294 122.52079010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[8 25]
[9 24]
[11 22]
[14 19]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 66]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
