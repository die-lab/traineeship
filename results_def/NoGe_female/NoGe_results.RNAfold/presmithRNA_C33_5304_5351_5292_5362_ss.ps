%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUUACUUUCUGUUGAAUGUUUGAUCCAAGAUUUUUUGAUUCAGGGAAUUAGUUACUAUAGGGGU\
) } def
/len { sequence length } bind def

/coor [
[107.42508698 270.92196655]
[106.11775208 255.97904968]
[104.81040955 241.03611755]
[103.50307465 226.09320068]
[102.19573975 211.15028381]
[100.88840485 196.20736694]
[87.33166504 190.03643799]
[78.62602997 177.82710266]
[77.19104767 162.80021667]
[83.51180267 148.98193359]
[95.98183441 140.12498474]
[94.67449951 125.18206024]
[93.36715698 110.23913574]
[91.40926361 95.36746216]
[88.80454254 80.59535217]
[86.19982147 65.82323456]
[83.59510040 51.05111694]
[78.89080048 42.84667206]
[81.21369171 35.57886505]
[79.25579834 20.70719147]
[77.29790497 5.83551788]
[75.34001160 -9.03615475]
[73.38211823 -23.90782738]
[71.42422485 -38.77949905]
[56.20498276 -44.84696579]
[46.10759354 -57.63172531]
[43.75834274 -73.65898895]
[49.69347000 -88.63125610]
[62.24036407 -98.58058929]
[59.63564301 -113.35270691]
[57.03091812 -128.12483215]
[54.42619705 -142.89694214]
[45.72127914 -157.44551086]
[57.29151535 -169.83767700]
[72.40235901 -162.15010071]
[69.19831085 -145.50166321]
[71.80303192 -130.72955322]
[74.40776062 -115.95742798]
[77.01248169 -101.18531799]
[90.27709198 -97.29399872]
[100.57500458 -87.97217560]
[105.81383514 -75.03548431]
[104.89510345 -61.04162598]
[97.94396973 -48.78470993]
[86.29589844 -40.73739243]
[88.25379181 -25.86572075]
[90.21168518 -10.99404812]
[92.16957855 3.87762523]
[94.12747192 18.74929810]
[96.08536530 33.62097168]
[98.36721802 48.44639206]
[100.97193909 63.21850967]
[103.57666016 77.99062347]
[106.18138123 92.76274109]
[109.94013214 96.90188599]
[110.92678833 102.90270233]
[108.31008148 108.93180084]
[109.61741638 123.87472534]
[110.92475128 138.81764221]
[124.74332428 145.37464905]
[133.36756897 157.88540649]
[134.56378174 172.93318176]
[128.11053467 186.46875000]
[115.83132172 194.90002441]
[117.13866425 209.84294128]
[118.44599915 224.78585815]
[119.75333405 239.72879028]
[121.06066895 254.67170715]
[122.36800385 269.61462402]
[129.77180481 284.86651611]
[117.16555023 296.20312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[11 59]
[12 58]
[13 57]
[14 54]
[15 53]
[16 52]
[17 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
