%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUUCCUCCCUCCUGAUUUUCAGGCAAUGGGGAGUCCCCCACUCUAUAGCGUCCAAGGCUAUUGUUUU\
) } def
/len { sequence length } bind def

/coor [
[72.12833405 97.83687592]
[58.03294373 92.70657349]
[43.93755722 87.57627106]
[29.84216690 82.44596863]
[15.74677658 77.31566620]
[5.80733538 82.63117218]
[-5.17615557 81.43922424]
[-13.40391827 74.40555573]
[-16.17259026 64.17257690]
[-29.76720619 57.83330536]
[-43.36182404 51.49403381]
[-56.95643997 45.15475845]
[-70.55105591 38.81548309]
[-84.14567566 32.47621155]
[-98.24106598 27.34590912]
[-112.72994995 23.46362305]
[-127.21884155 19.58133698]
[-141.70773315 15.69905090]
[-156.19660950 11.81676579]
[-173.06094360 13.55761242]
[-179.40226746 -2.16574383]
[-166.04884338 -12.61190605]
[-152.31433105 -2.67212176]
[-137.82543945 1.21016395]
[-123.33655548 5.09244967]
[-108.84766388 8.97473526]
[-94.35877991 12.85702133]
[-91.69610596 11.24886417]
[-88.14069366 10.77711964]
[-84.19848633 11.82813549]
[-80.52021790 14.56544209]
[-77.80639648 18.88159370]
[-64.21178436 25.22086716]
[-50.61716843 31.56014252]
[-37.02254868 37.89941406]
[-23.42793274 44.23868942]
[-9.83331585 50.57796478]
[9.00908756 47.19301987]
[20.87707901 63.22027969]
[34.97246933 68.35057831]
[49.06785583 73.48088074]
[63.16324615 78.61118317]
[77.25863647 83.74148560]
[91.14398193 73.48435211]
[108.40637207 73.33838654]
[122.46318054 83.35925293]
[127.95413208 99.72571564]
[143.28663635 95.82380676]
[153.57768250 106.59152222]
[168.06655884 110.47380829]
[182.55545044 114.35609436]
[197.04434204 118.23838043]
[211.53323364 122.12066650]
[224.23814392 113.00370789]
[239.82696533 114.23782349]
[250.93910217 125.24029541]
[252.32774353 140.81610107]
[243.33723450 153.61080933]
[228.21261597 157.58316040]
[214.09524536 150.85752869]
[207.65093994 136.60955811]
[193.16204834 132.72726440]
[178.67317200 128.84498596]
[164.18428040 124.96269989]
[149.69538879 121.08041382]
[135.39923096 125.26000977]
[124.07184601 114.21460724]
[115.54822540 123.23277283]
[103.96115112 127.67341614]
[91.59362793 126.66161346]
[80.88239288 120.39671326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[47 67]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
