%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGUAGGGGCUUCUAACCCUUGCUUGAGUAGUUAGAGUCUAUUCUUGCCUCUGUGGUUUUGGGUUUUCC\
) } def
/len { sequence length } bind def

/coor [
[76.65390015 123.89688873]
[70.20976257 110.40348053]
[70.53103638 96.29441833]
[56.04214859 100.17670441]
[41.55326080 104.05899048]
[27.06437302 107.94127655]
[12.57548618 111.82356262]
[-1.91340077 115.70584869]
[-16.40228844 119.58813477]
[-30.89117622 123.47042084]
[-45.38006210 127.35270691]
[-51.82437134 141.60069275]
[-65.94173431 148.32632446]
[-81.06636047 144.35395813]
[-90.05686951 131.55924988]
[-88.66822052 115.98344421]
[-77.55608368 104.98097229]
[-61.96726990 103.74685669]
[-49.26234818 112.86381531]
[-34.77346039 108.98153687]
[-20.28457451 105.09925079]
[-5.79568672 101.21696472]
[8.69320107 97.33467865]
[23.18208885 93.45239258]
[37.67097473 89.57010651]
[52.15986252 85.68782043]
[66.64875031 81.80553436]
[76.29056549 70.31486511]
[77.59790039 55.37194824]
[78.90523529 40.42902756]
[80.21257019 25.48610497]
[81.51991272 10.54318523]
[82.82724762 -4.39973545]
[71.64260864 -15.32849884]
[70.15100098 -30.89478111]
[79.05672455 -43.74865723]
[94.15475464 -47.82092285]
[108.31627655 -41.18877792]
[114.85464478 -26.98371887]
[110.68264771 -11.91293812]
[97.77016449 -3.09239936]
[96.46282959 11.85052109]
[95.15549469 26.79344177]
[93.84815979 41.73636246]
[92.54082489 56.67928314]
[91.23348236 71.62220001]
[107.72306061 68.76831055]
[124.47389221 75.48017883]
[136.01316833 91.02288055]
[151.01316833 91.02288055]
[166.01316833 91.02288055]
[178.32839966 80.74111176]
[194.01588440 84.09999847]
[201.04154968 98.52288055]
[194.01588440 112.94577026]
[178.32839966 116.30464935]
[166.01316833 106.02288055]
[151.01316833 106.02288055]
[136.01316833 106.02288055]
[131.84638977 112.25890350]
[144.31829834 120.59266663]
[135.98432922 133.06443787]
[123.51284027 124.73094940]
[119.34606171 130.96696472]
[125.08631134 144.82516479]
[138.41894531 154.37362671]
[136.54698181 170.66557312]
[121.39614105 176.94126892]
[108.55231476 166.74478149]
[111.22811890 150.56541443]
[105.48786926 136.70722961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[49 59]
[50 58]
[51 57]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
