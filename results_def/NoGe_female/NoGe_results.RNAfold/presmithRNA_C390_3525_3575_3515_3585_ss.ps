%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGGGUGGUUUUUCGGUUUUAAUUUUUUUAUAAUGCUGGUUUUAGGAUGUAGCAUCAGUGUGAGAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[77.13119507 220.76747131]
[62.23272324 219.02520752]
[51.67876053 208.36622620]
[50.08417892 193.45086670]
[39.02502060 203.58471680]
[27.96585846 213.71856689]
[27.52696609 229.51676941]
[15.98836040 240.31658936]
[0.19568980 239.71069336]
[-10.48153305 228.05854797]
[-9.70870113 212.27316284]
[2.05567741 201.71972656]
[17.83200645 202.65940857]
[28.89116669 192.52555847]
[39.95032501 182.39170837]
[49.33917999 170.69343567]
[56.83917999 157.70306396]
[64.33917999 144.71267700]
[71.83917999 131.72229004]
[79.33917999 118.73191833]
[86.83917999 105.74153900]
[72.26095581 109.27360535]
[57.54410934 106.37286377]
[45.39654541 97.57305145]
[38.05343628 84.49333954]
[36.86592484 69.54042053]
[42.05251312 55.46564484]
[52.65885925 44.85878754]
[66.73338318 39.67152786]
[81.68636322 40.85832214]
[94.76642609 48.20080566]
[103.56681824 60.34794617]
[106.46826935 75.06465912]
[102.93616486 89.64455414]
[115.92654419 82.14455414]
[128.91691589 74.64455414]
[141.90730286 67.14455414]
[154.89768982 59.64455414]
[167.88806152 52.14455414]
[180.87844849 44.64455414]
[193.86883545 37.14455414]
[201.95147705 23.54376793]
[216.84226990 23.88083076]
[229.83265686 16.38083076]
[242.82302856 8.88083076]
[248.34744263 -6.18105555]
[263.61264038 -11.11592484]
[276.90850830 -2.13816857]
[278.03555298 13.86524773]
[266.12921143 24.61787224]
[250.32302856 21.87121201]
[237.33265686 29.37121201]
[224.34226990 36.87121201]
[217.18878174 49.93554688]
[201.36883545 50.13493347]
[188.37844849 57.63493347]
[175.38806152 65.13493347]
[162.39768982 72.63493347]
[149.40730286 80.13493347]
[136.41691589 87.63493347]
[123.42654419 95.13493347]
[110.43616486 102.63493347]
[99.82955933 113.24153900]
[92.32955933 126.23191833]
[84.82955933 139.22229004]
[77.32955933 152.21267700]
[69.82955933 165.20306396]
[62.32955933 178.19343567]
[77.23612976 176.52186584]
[89.92687988 184.51841736]
[94.85269165 198.68656921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
