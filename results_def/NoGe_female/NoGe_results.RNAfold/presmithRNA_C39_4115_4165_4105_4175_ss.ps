%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAUUUGAUAGUAAUUUUACAUUAGUAUGGUUUUCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[-13.89288330 155.29391479]
[-27.75107574 161.03416443]
[-34.74284744 167.40272522]
[-42.34114456 166.70793152]
[-56.43653488 171.83824158]
[-70.53192139 176.96853638]
[-84.62731171 182.09884644]
[-98.72270203 187.22914124]
[-100.70816803 202.40533447]
[-109.52841187 214.91380310]
[-123.15660858 221.88020325]
[-138.46110535 221.70372009]
[-151.92501831 214.42488098]
[-160.45446777 201.71633911]
[-162.08943176 186.49839783]
[-156.45420837 172.26805115]
[-144.84373474 162.29531860]
[-129.92601013 158.87185669]
[-115.12902069 162.78436279]
[-103.85300446 173.13375854]
[-89.75761414 168.00344849]
[-75.66222382 162.87315369]
[-61.56683731 157.74284363]
[-47.47144699 152.61254883]
[-33.49132919 147.17597961]
[-19.63313484 141.43572998]
[-16.34171295 126.93384552]
[-5.00805759 117.03372955]
[10.15926075 115.68991089]
[23.36217499 123.62648773]
[37.22036743 117.88623047]
[51.07855988 112.14598083]
[64.93675232 106.40573120]
[78.79494476 100.66548157]
[84.62803650 85.37809753]
[99.60475159 78.78818512]
[114.81656647 84.81558228]
[124.05384827 71.97100830]
[138.85859680 73.60460663]
[152.45321655 67.26532745]
[166.04783630 60.92605591]
[175.28511047 48.08147430]
[190.08985901 49.71507263]
[203.68447876 43.37580109]
[217.27909851 37.03652573]
[230.87371826 30.69725227]
[237.68983459 16.17416573]
[253.32705688 12.58852482]
[265.78985596 22.69092751]
[265.51779175 38.73167419]
[252.71963501 48.40567780]
[237.21298218 44.29187012]
[223.61836243 50.63114166]
[210.02375793 56.97041702]
[196.42913818 63.30968857]
[188.16423035 75.70084381]
[172.38710022 74.52067566]
[158.79249573 80.85994720]
[145.19787598 87.19921875]
[136.93296814 99.59037018]
[121.15584564 98.41020203]
[118.18975830 110.91924286]
[108.54447174 119.41878510]
[95.76168823 120.78782654]
[84.53519440 114.52367401]
[70.67700195 120.26392365]
[56.81881332 126.00417328]
[42.96061707 131.74443054]
[29.10242653 137.48468018]
[25.37856293 152.43255615]
[13.70342350 162.20724487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[37 61]
[39 59]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
