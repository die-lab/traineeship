%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAUGGGGAGUCCCCCACUCUAUAGCGUCCAAGGCUAUUGUUUUGGUAAACUAUUGCCUGUUUUGUUAUG\
) } def
/len { sequence length } bind def

/coor [
[9.51339149 202.50697327]
[0.91304946 211.86514282]
[-10.82992840 216.53242493]
[-23.36142921 215.64175415]
[-34.19889450 209.43347168]
[-46.84976578 217.49296570]
[-59.50063705 225.55245972]
[-72.15150452 233.61195374]
[-84.80238342 241.67144775]
[-91.89059448 256.45959473]
[-108.26010132 257.44512939]
[-117.07135773 243.61424255]
[-109.26009369 229.19494629]
[-92.86187744 229.02058411]
[-80.21100616 220.96109009]
[-67.56012726 212.90159607]
[-54.90925980 204.84210205]
[-42.25838852 196.78260803]
[-42.15478516 179.37858582]
[-31.72282028 165.25628662]
[-14.82590008 159.94958496]
[2.09728622 165.66984558]
[13.99758625 156.53843689]
[25.89788628 147.40701294]
[37.79818726 138.27558899]
[49.69848633 129.14416504]
[61.59878540 120.01274109]
[73.49908447 110.88132477]
[71.60417175 96.20809937]
[77.28287506 82.54624176]
[89.02059174 73.53957367]
[103.68669128 71.59031677]
[117.36949158 77.21837616]
[129.26979065 68.08695221]
[141.17008972 58.95553589]
[153.07038879 49.82411194]
[159.30863953 35.28468704]
[174.11602783 33.67522812]
[186.01632690 24.54380608]
[192.25457764 10.00438118]
[207.06196594 8.39492130]
[218.96226501 -0.73649985]
[230.86256409 -9.86792088]
[242.76286316 -18.99934196]
[248.53523254 -34.34899521]
[264.75656128 -36.75748444]
[274.73971558 -23.74716759]
[268.21490479 -8.70193958]
[251.89428711 -7.09904242]
[239.99398804 2.03237891]
[228.09368896 11.16380024]
[216.19338989 20.29522133]
[210.80633545 34.18150711]
[195.14775085 36.44410706]
[183.24745178 45.57552719]
[177.86039734 59.46181488]
[162.20181274 61.72441101]
[150.30151367 70.85583496]
[138.40121460 79.98725891]
[126.50091553 89.11867523]
[128.39582825 103.79190063]
[122.71712494 117.45375824]
[110.97940826 126.46042633]
[96.31330872 128.40968323]
[82.63050842 122.78162384]
[70.73020935 131.91304016]
[58.82990646 141.04446411]
[46.92960739 150.17588806]
[35.02930832 159.30731201]
[23.12900734 168.43873596]
[11.22870731 177.57014465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[33 60]
[34 59]
[35 58]
[36 57]
[38 55]
[39 54]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
