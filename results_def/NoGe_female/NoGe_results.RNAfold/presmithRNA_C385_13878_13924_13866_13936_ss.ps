%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGGUUUCUGUUAAUUCUGGUCGUUGGGCUUGCACAUGAGUGGUAUGAGGGGUCGCUGGACUGGGUUGA\
) } def
/len { sequence length } bind def

/coor [
[148.22686768 246.96852112]
[143.09655762 232.87312317]
[129.53097534 226.83074951]
[124.12731934 212.60910034]
[130.55709839 198.42123413]
[125.42679596 184.32585144]
[120.29649353 170.23045349]
[106.28607941 159.89031982]
[109.22148132 141.86106873]
[103.48123169 128.00288391]
[97.74098206 114.14469147]
[86.76640320 105.48153687]
[88.40082550 91.59556580]
[82.66057587 77.73736572]
[76.92032623 63.87917709]
[63.79627609 60.10464096]
[55.44444275 49.54973984]
[54.80757141 36.30202103]
[61.89531708 25.32489395]
[56.76501465 11.22950459]
[51.63471222 -2.86588478]
[39.64409256 -13.18749237]
[42.56179428 -27.79352760]
[37.43149185 -41.88891602]
[32.30118942 -55.98430634]
[27.17088699 -70.07969666]
[21.73431587 -84.05981445]
[15.99406528 -97.91800690]
[1.29872930 -103.73373413]
[-4.90334558 -118.27023315]
[1.06742179 -132.90325928]
[15.66868114 -138.95129395]
[30.23776436 -132.82615662]
[36.13109207 -118.16176605]
[29.85225868 -103.65825653]
[35.59251022 -89.80006409]
[41.23809433 -84.66740417]
[41.26627731 -75.20999908]
[46.39657974 -61.11460876]
[51.52688217 -47.01921844]
[56.65718460 -32.92383194]
[68.28085327 -23.61042023]
[65.73010254 -7.99618721]
[70.86040497 6.09920216]
[75.99070740 20.19459152]
[91.42530823 26.50360680]
[97.78678131 42.27687073]
[90.77851868 58.13892365]
[96.51876831 71.99711609]
[102.25901794 85.85530853]
[113.23359680 94.51846313]
[111.59917450 108.40443420]
[117.33942413 122.26263428]
[123.07967377 136.12081909]
[134.84028625 141.89712524]
[139.24481201 153.80621338]
[134.39189148 165.10015869]
[139.52218628 179.19554138]
[144.65248108 193.29093933]
[158.69776917 200.02648926]
[163.69982910 214.39430237]
[157.19195557 227.74282837]
[162.32225037 241.83821106]
[177.39288330 245.13664246]
[188.27165222 256.07537842]
[191.48716736 271.16394043]
[186.01338196 285.58755493]
[173.59696960 294.74377441]
[158.19995117 295.71081543]
[144.73544312 288.18017578]
[137.49995422 274.55477905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[5 59]
[6 58]
[7 57]
[9 54]
[10 53]
[11 52]
[13 50]
[14 49]
[15 48]
[19 45]
[20 44]
[21 43]
[23 41]
[24 40]
[25 39]
[26 38]
[27 36]
[28 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
