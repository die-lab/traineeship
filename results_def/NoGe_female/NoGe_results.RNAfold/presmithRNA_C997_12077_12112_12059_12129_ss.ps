%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAGUUUUUCGUGCUGGUGAUACAACUGUUUUUGUUGGGAGAGGUUACUUUAUUAGUAUAAUGGAGUA\
) } def
/len { sequence length } bind def

/coor [
[153.92942810 147.96340942]
[141.27854919 139.90391541]
[128.62768555 131.84442139]
[115.97681427 123.78493500]
[103.32594299 115.72544098]
[88.32950592 115.39821625]
[75.33912659 122.89821625]
[62.34874725 130.39820862]
[59.81167221 145.82861328]
[47.91607285 155.97891235]
[32.27867889 156.05645752]
[20.28299904 146.02462769]
[17.59301949 130.62014771]
[25.47886848 117.11654663]
[40.21709061 111.88980103]
[54.84874725 117.40783691]
[67.83912659 109.90783691]
[80.82950592 102.40783691]
[66.69900513 107.44062042]
[52.44448471 102.77065277]
[44.03123093 90.35223389]
[44.98004913 75.38227081]
[54.89387894 64.12545776]
[69.62394714 61.29257584]
[83.00595093 68.06914520]
[89.43988800 81.62054443]
[85.55760193 67.13166046]
[81.67531586 52.64276886]
[77.79302979 38.15388107]
[63.54505157 31.70957565]
[56.81941605 17.59221458]
[60.79177094 2.46758485]
[73.58648682 -6.52292538]
[89.16229248 -5.13427258]
[100.16476440 5.97786427]
[101.39887238 21.56667328]
[92.28191376 34.27159500]
[96.16419983 48.76048279]
[100.04648590 63.24937057]
[103.92877197 77.73825836]
[111.06724548 83.45820618]
[114.51563263 90.77396393]
[114.33097076 97.81628418]
[111.38543701 103.07456970]
[124.03630829 111.13406372]
[136.68717957 119.19355774]
[149.33804321 127.25305176]
[161.98892212 135.31254578]
[174.81259155 143.09414673]
[187.80297852 150.59414673]
[200.79336548 158.09414673]
[213.78373718 165.59414673]
[226.77412415 173.09414673]
[239.76451111 180.59414673]
[252.75488281 188.09414673]
[265.74526978 195.59414673]
[278.73565674 203.09414673]
[291.72601318 210.59414673]
[308.46627808 213.27742004]
[310.52203369 230.10627747]
[294.91995239 236.74037170]
[284.22601318 223.58451843]
[271.23565674 216.08451843]
[258.24526978 208.58451843]
[245.25488281 201.08451843]
[232.26451111 193.58451843]
[219.27412415 186.08451843]
[206.28373718 178.58451843]
[193.29336548 171.08451843]
[180.30297852 163.58451843]
[167.31259155 156.08451843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 18]
[7 17]
[8 16]
[26 40]
[27 39]
[28 38]
[29 37]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
