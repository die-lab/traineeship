%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGUGAGUUUCAAAAUUUAUCUUAUUGGUCUCGAAACUCUGUGAUCUACUCCUUUUACGUUUAGGACUU\
) } def
/len { sequence length } bind def

/coor [
[13.34660816 172.51898193]
[-1.49521625 174.94412231]
[-15.85891724 170.70223999]
[-26.91070175 160.68608093]
[-40.76889420 166.42633057]
[-54.62708664 172.16658020]
[-68.48528290 177.90682983]
[-82.34347534 183.64707947]
[-96.20166779 189.38732910]
[-110.05986023 195.12757874]
[-123.91805267 200.86782837]
[-133.46650696 214.20045471]
[-149.75846863 212.32850647]
[-156.03414917 197.17765808]
[-145.83767700 184.33383179]
[-129.65830994 187.00964355]
[-115.80010986 181.26939392]
[-101.94191742 175.52914429]
[-88.08372498 169.78889465]
[-74.22553253 164.04862976]
[-60.36734009 158.30838013]
[-46.50914764 152.56813049]
[-32.65095520 146.82788086]
[-31.91865921 131.93058777]
[-24.76144791 118.77445984]
[-12.55186653 109.99453735]
[2.31965399 107.37574768]
[16.91272354 111.49027252]
[28.31835938 121.57356262]
[42.17655182 115.83331299]
[56.03474426 110.09306335]
[69.89293671 104.35281372]
[83.75112915 98.61255646]
[88.97412109 87.98414612]
[100.01133728 83.69200897]
[111.04257965 87.99949646]
[125.13796997 82.86919403]
[139.23336792 77.73889160]
[153.32875061 72.60858917]
[157.07151794 68.08496094]
[161.76623535 65.90666962]
[166.25765991 66.01550293]
[169.61320496 67.86210632]
[184.25764465 64.61550903]
[198.90208435 61.36891556]
[213.54652405 58.12232208]
[218.08843994 43.45035553]
[229.36874390 33.02680588]
[244.35307312 29.65554619]
[259.01074219 34.24343491]
[269.39886475 45.55635071]
[272.72314453 60.55117416]
[268.08932495 75.19437408]
[256.74392700 85.54701233]
[241.73873901 88.82426453]
[227.11013794 84.14457703]
[216.79312134 72.76676178]
[202.14868164 76.01335144]
[187.50424194 79.25994873]
[172.85980225 82.50654602]
[158.45904541 86.70397949]
[144.36366272 91.83428192]
[130.26828003 96.96458435]
[116.17288208 102.09488678]
[105.91063690 115.19918060]
[89.49138641 112.47075653]
[75.63318634 118.21100616]
[61.77499771 123.95125580]
[47.91680527 129.69151306]
[34.05861282 135.43176270]
[33.12357330 150.62672424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[36 64]
[37 63]
[38 62]
[39 61]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
