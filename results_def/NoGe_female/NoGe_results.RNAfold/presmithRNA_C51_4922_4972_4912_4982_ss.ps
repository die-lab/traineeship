%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCUUAAGUUGGAGAAGAAGGAACUCGGCAAAUUAGUGACUCCGUCUGUUUAGCAAAAACAUAGCUUGU\
) } def
/len { sequence length } bind def

/coor [
[132.74526978 381.45785522]
[140.79336548 367.16940308]
[140.13908386 352.18368530]
[139.48478699 337.19796753]
[138.83050537 322.21224976]
[138.17620850 307.22650146]
[120.58364868 297.93206787]
[111.54783630 280.06072998]
[114.53002167 260.12792969]
[128.57916260 245.49774170]
[124.69687653 231.00885010]
[120.81459045 216.51995850]
[116.93230438 202.03106689]
[113.05001831 187.54219055]
[109.16773224 173.05329895]
[98.71450806 166.58537292]
[95.49171448 154.30368042]
[101.81228638 142.82640076]
[98.56569672 128.18196106]
[95.31909943 113.53752136]
[86.01558685 103.10026550]
[90.03646088 89.70906830]
[86.78986359 75.06462860]
[83.54327393 60.42018890]
[72.96437836 52.68943405]
[70.69474792 40.19643021]
[77.43512726 29.91677475]
[74.83040619 15.14465904]
[72.22568512 0.37254289]
[67.52138519 -7.83190107]
[69.84427643 -15.09970951]
[57.15489197 -24.52070045]
[54.92647171 -40.16709518]
[64.48109436 -52.75616837]
[80.15017700 -54.81903839]
[92.63752747 -45.13185120]
[94.53462219 -29.44183540]
[84.71595001 -17.05760193]
[86.99780273 -2.23217988]
[89.60252380 12.53993607]
[92.20724487 27.31205368]
[104.20926666 39.92797470]
[98.18771362 57.17359543]
[101.43430328 71.81803131]
[104.68090057 86.46247864]
[113.98441315 96.89973450]
[109.96353912 110.29093170]
[113.21013641 124.93537140]
[116.45672607 139.57980347]
[129.20242310 152.66482544]
[123.65661621 169.17102051]
[127.53890228 183.65989685]
[131.42118835 198.14878845]
[135.30348206 212.63768005]
[139.18576050 227.12655640]
[143.06805420 241.61544800]
[153.72398376 243.04888916]
[163.34886169 247.77268982]
[170.95855713 255.28244019]
[175.78175354 264.78997803]
[177.33816528 275.30609131]
[175.48631287 285.74343872]
[170.43606567 295.02893066]
[162.72517395 302.21420288]
[153.16192627 306.57223511]
[153.81622314 321.55795288]
[154.47052002 336.54367065]
[155.12480164 351.52938843]
[155.77909851 366.51510620]
[165.04190063 380.04776001]
[157.71064758 394.71694946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[18 49]
[19 48]
[20 47]
[22 45]
[23 44]
[24 43]
[27 41]
[28 40]
[29 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
