%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUGCUGGUGGGUUCUGGCUAGUUUGGUUCUGGCUGUUUGCUUGGCUUUGCCCAGGUUUGCACAUGAU\
) } def
/len { sequence length } bind def

/coor [
[44.93837738 130.00904846]
[36.80101776 123.21472931]
[22.02890396 125.81945038]
[15.50327682 137.81544495]
[3.39090085 143.68481445]
[-9.68063831 141.43925476]
[-18.86349487 132.14363098]
[-33.73516846 134.10151672]
[-48.60684204 136.05941772]
[-63.47851562 138.01730347]
[-78.35018921 139.97520447]
[-93.22186279 141.93309021]
[-100.50733948 155.63349915]
[-114.46904755 162.40480042]
[-129.73841858 159.64326477]
[-140.44406128 148.41078186]
[-142.46945190 133.02645874]
[-135.03576660 119.40588379]
[-121.00142670 112.78644562]
[-105.76291656 115.71345520]
[-95.17975616 127.06141663]
[-80.30808258 125.10352325]
[-65.43640900 123.14562988]
[-50.56473541 121.18773651]
[-35.69306183 119.22985077]
[-20.82138824 117.27195740]
[-11.32126427 103.56874084]
[5.45498562 100.77201080]
[19.42418098 111.04733276]
[34.19629669 108.44261169]
[47.68956757 94.86226654]
[66.60411072 101.18383026]
[81.09300232 97.30154419]
[88.42846680 84.80606079]
[102.42427063 81.05589294]
[115.02471161 88.20957184]
[122.78793335 82.80811310]
[130.23052979 84.48873138]
[144.87496948 81.24213409]
[159.51940918 77.99553680]
[168.03062439 64.94958496]
[182.92842102 61.86568832]
[195.31329346 70.06022644]
[209.95773315 66.81362915]
[224.60217285 63.56703949]
[239.24661255 60.32044601]
[253.89105225 57.07384872]
[268.53549194 53.82725525]
[276.81469727 40.36506653]
[292.20733643 36.78145218]
[305.58123779 45.20250702]
[309.00189209 60.63217163]
[300.43991089 73.91629791]
[284.97494507 77.17364502]
[271.78210449 68.47169495]
[257.13766479 71.71829224]
[242.49320984 74.96488190]
[227.84877014 78.21147919]
[213.20433044 81.45807648]
[198.55989075 84.70466614]
[190.79853821 97.36551666]
[175.99324036 100.86663818]
[162.76600647 92.63997650]
[148.12156677 95.88657379]
[133.47712708 99.13317108]
[118.90699768 102.69845581]
[111.57153320 115.19393921]
[97.57572937 118.94410706]
[84.97528839 111.79042816]
[70.48639679 115.67271423]
[65.39333344 125.72795868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[32 70]
[33 69]
[36 66]
[38 65]
[39 64]
[40 63]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
