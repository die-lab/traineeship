%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCGGGCUCAUACCCCGGAAAUGAGUGUUGUGGUGGGCUCCUCUGCUGGUGGGUUCUGGCUAGUUUGG\
) } def
/len { sequence length } bind def

/coor [
[142.67912292 316.05545044]
[140.07440186 301.28332520]
[137.46968079 286.51123047]
[134.54331970 271.79943848]
[131.29673767 257.15499878]
[128.05014038 242.51055908]
[124.80354309 227.86611938]
[121.55694580 213.22167969]
[118.31035614 198.57723999]
[114.74506378 184.00711060]
[110.86277771 169.51821899]
[106.98049164 155.02932739]
[103.09820557 140.54045105]
[99.21591949 126.05155945]
[86.36861420 122.21449280]
[77.12885284 112.49835968]
[73.94194031 99.47454071]
[77.65129852 86.58977509]
[87.27524567 77.25403595]
[84.02864838 62.60959244]
[80.78205872 47.96515274]
[77.53546143 33.32071304]
[67.71195221 27.79389381]
[62.81580353 17.89007759]
[64.32716370 7.17166519]
[71.46996307 -0.66158402]
[69.51206970 -15.53325653]
[67.55418396 -30.40493011]
[65.59629059 -45.27660370]
[56.12389755 -57.94879150]
[62.13376236 -71.57710266]
[49.44437790 -80.99809265]
[47.21595383 -96.64448547]
[56.77058029 -109.23355865]
[72.43965912 -111.29643250]
[84.92700958 -101.60924530]
[86.82410431 -85.91922760]
[77.00543213 -73.53499603]
[86.33778381 -61.92652512]
[80.46795654 -47.23449707]
[82.42584991 -32.36282349]
[84.38374329 -17.49114990]
[86.34163666 -2.61947680]
[99.32048798 11.45331669]
[92.17990112 30.07411957]
[95.42649841 44.71855927]
[98.67308807 59.36299896]
[101.91968536 74.00743866]
[116.83563232 80.10376740]
[125.31642914 93.80510712]
[124.12044525 109.87434387]
[113.70481110 122.16927338]
[117.58709717 136.65815735]
[121.46938324 151.14704895]
[125.35166931 165.63594055]
[129.23394775 180.12481689]
[134.63540649 187.88803101]
[132.95478821 195.33064270]
[136.20138550 209.97508240]
[139.44798279 224.61952209]
[142.69458008 239.26396179]
[145.94117737 253.90840149]
[149.18775940 268.55285645]
[154.24545288 276.54428101]
[152.24179077 283.90649414]
[154.84651184 298.67861938]
[157.45124817 313.45071411]
[169.71531677 323.79345703]
[169.13157654 339.82586670]
[156.14779663 349.24929810]
[140.72402954 344.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[19 48]
[20 47]
[21 46]
[22 45]
[26 43]
[27 42]
[28 41]
[29 40]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
