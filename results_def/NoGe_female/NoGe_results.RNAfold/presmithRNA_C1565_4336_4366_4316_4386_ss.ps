%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 08:25:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUUUGGCUUCUUUUGAUCUCUUUUUCUUUUGUCGCUGGUUCGGUUUUUGAUAAAACAUGUUUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[102.33614349 136.85171509]
[93.73249817 149.13899231]
[85.12885284 161.42626953]
[76.52519989 173.71354675]
[67.92155457 186.00083923]
[63.78947449 202.44352722]
[46.84549332 203.02471924]
[41.59645081 186.90380859]
[55.63427734 177.39718628]
[64.23792267 165.10990906]
[72.84156799 152.82263184]
[81.44521332 140.53533936]
[90.04885864 128.24806213]
[88.58568573 120.89217377]
[75.49822998 128.22146606]
[64.48342896 118.03942871]
[70.76338959 104.41730499]
[85.65933228 106.18039703]
[84.19615173 98.82450867]
[71.54528046 90.76501465]
[57.15782166 96.57711792]
[42.11003113 92.78981781]
[32.18809128 80.85940552]
[31.20719719 65.37336731]
[39.54451370 52.28639603]
[53.99417877 46.63070679]
[69.00000000 50.58102417]
[78.79193115 62.61837006]
[79.60477448 78.11414337]
[92.25564575 86.17363739]
[107.16648865 84.54063416]
[117.77309418 73.93402863]
[128.37969971 63.32742691]
[138.98629761 52.72082520]
[149.59289551 42.11422348]
[160.19949341 31.50762367]
[170.80610657 20.90102196]
[180.44792175 9.41035461]
[189.05155945 -2.87692595]
[197.65521240 -15.16420650]
[206.25885010 -27.45148659]
[210.39093018 -43.89418411]
[227.33491516 -44.47537613]
[232.58395386 -28.35445976]
[218.54614258 -18.84784126]
[209.94248962 -6.56056023]
[201.33883667 5.72672033]
[192.73519897 18.01400185]
[193.33567810 21.06611633]
[192.56295776 24.56845665]
[190.22700500 27.91345596]
[186.39674377 30.43368149]
[181.41270447 31.50762367]
[170.80610657 42.11422348]
[160.19949341 52.72082520]
[149.59289551 63.32742691]
[138.98629761 73.93402863]
[128.37969971 84.54063416]
[117.77309418 95.14723206]
[131.20764160 88.47543335]
[146.14167786 87.07022095]
[160.58496094 91.11887360]
[172.61265564 100.08181763]
[180.62187195 112.76458740]
[183.54519653 127.47696686]
[180.99307251 142.25825500]
[173.30561829 155.13859558]
[161.50730896 164.40141296]
[147.17050171 168.81228638]
[132.20582581 167.78338623]
[118.60761261 161.45182800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[19 30]
[20 29]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
