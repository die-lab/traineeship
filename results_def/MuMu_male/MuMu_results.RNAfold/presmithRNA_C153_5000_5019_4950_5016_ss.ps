%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:51:48 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGUUUAGGAUAUACUAGUCCGCGAGCCUUCAAAGCCCUAAGAAAACACACAAGUUUAACUUCUG\
) } def
/len { sequence length } bind def

/coor [
[94.33454895 207.65351868]
[93.64179230 192.66952515]
[92.94904327 177.68553162]
[92.25629425 162.70153809]
[91.56353760 147.71754456]
[90.87078857 132.73353577]
[90.17803192 117.74954987]
[85.87648773 115.72028351]
[82.01352692 112.63354492]
[78.85086823 108.58995819]
[63.86687469 109.28271484]
[48.88288116 109.97546387]
[33.89888763 110.66821289]
[23.43816566 122.51510620]
[7.65933895 123.41188049]
[-4.07629395 112.82648468]
[-4.80619049 97.03906250]
[5.90268373 85.41600037]
[21.69694328 84.85305786]
[33.20613480 95.68421936]
[48.19012833 94.99147034]
[63.17412567 94.29871368]
[78.15811920 93.60596466]
[86.91873932 81.43010712]
[82.81379700 67.00272369]
[67.81935120 63.93266296]
[55.97650146 54.23701859]
[50.00664902 40.14377594]
[51.28161621 24.89146423]
[59.50843048 11.98494911]
[72.79662323 4.39005375]
[88.09267426 3.85203004]
[101.88165283 10.49451160]
[110.99496460 22.79110527]
[113.33842468 37.91614151]
[108.37353516 52.39400101]
[97.24118042 62.89777756]
[101.34612274 77.32516479]
[101.06478119 62.32780075]
[110.02262878 50.29629898]
[124.47094727 46.26564789]
[138.36334229 51.92260742]
[145.88609314 64.89983368]
[143.89102173 79.76656342]
[133.21305847 90.30131531]
[118.31951141 92.09520721]
[133.17565918 94.16754913]
[148.03181458 96.23989868]
[162.88798523 98.31224060]
[175.34744263 88.58921814]
[191.02238464 90.60707092]
[200.61314392 103.16864014]
[198.42967224 118.82137299]
[185.76741028 128.27877808]
[170.13864136 125.92994690]
[160.81562805 113.16839600]
[145.95947266 111.09605408]
[131.10331726 109.02370453]
[116.24716187 106.95136261]
[105.16203308 117.05679321]
[105.85478210 132.04078674]
[106.54753113 147.02478027]
[107.24028778 162.00877380]
[107.93303680 176.99276733]
[108.62578583 191.97677612]
[109.31854248 206.96076965]
[112.39642334 226.09651184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[10 23]
[11 22]
[12 21]
[13 20]
[24 38]
[25 37]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
