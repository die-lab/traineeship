%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:51:48 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGUGUAGCUUAAUAUUAAAGCAUCUGGCCUACACCCAGAAGAUUUCAUGACCAAUGAACACUCUGA\
) } def
/len { sequence length } bind def

/coor [
[110.30428314 235.89880371]
[109.63131714 220.91390991]
[101.33079529 208.54658508]
[108.44116211 194.41317749]
[107.76818848 179.42828369]
[107.09522247 164.44338989]
[106.42224884 149.45849609]
[105.74927521 134.47360229]
[83.17453003 127.38059235]
[72.01586914 108.76432800]
[57.03096771 109.43730164]
[42.04607391 110.11027527]
[27.06117821 110.78324890]
[17.70140839 123.31036377]
[2.46738124 126.84001160]
[-11.44786453 119.70558929]
[-17.47397423 105.27576447]
[-12.76560402 90.36384583]
[0.45409861 82.01079559]
[15.94319439 84.16065979]
[26.38820457 95.79834747]
[41.37310028 95.12537384]
[56.35799789 94.45240784]
[71.34289551 93.77943420]
[77.91657257 80.70629120]
[89.98899078 72.43725586]
[88.64440155 57.49763870]
[87.29981232 42.55802536]
[85.95522308 27.61841011]
[84.61063385 12.67879581]
[71.67620087 3.89047980]
[67.46663666 -11.16985226]
[73.96956635 -25.39117050]
[88.11450958 -32.05860519]
[103.22264862 -28.02399635]
[112.16039276 -15.19236279]
[110.70760345 0.37759009]
[99.55024719 11.33420658]
[100.89483643 26.27382088]
[102.23942566 41.21343613]
[103.58401489 56.15304947]
[104.92860413 71.09266663]
[113.02731323 72.68555450]
[120.60028839 76.56838226]
[126.99617004 82.56439972]
[131.62368774 90.31113434]
[134.00457764 99.28090668]
[133.81945801 108.81632233]
[148.68370056 110.82981873]
[163.54794312 112.84331512]
[178.41220093 114.85681915]
[191.99612427 106.32121277]
[207.09075928 111.75547791]
[212.11680603 126.99091339]
[203.21870422 140.34019470]
[187.22230530 141.56289673]
[176.39869690 129.72106934]
[161.53445435 127.70756531]
[146.67019653 125.69406128]
[131.80595398 123.68056488]
[120.73416901 133.80062866]
[121.40714264 148.78552246]
[122.08011627 163.77041626]
[122.75308990 178.75531006]
[123.42606354 193.74020386]
[131.77471924 207.17935181]
[124.61621094 220.24093628]
[125.28918457 235.22583008]
[128.34181213 254.36561584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[10 24]
[11 23]
[12 22]
[13 21]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
