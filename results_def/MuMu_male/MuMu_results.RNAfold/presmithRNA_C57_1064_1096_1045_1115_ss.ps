%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 19 09:04:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAUCUGGCCUACACCCAGAAGAUUUCAUGACCAAUGAACACUCUGAACUAAUCCUAGCCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[78.73844147 168.63362122]
[67.67983246 158.49916077]
[62.85950851 144.29478455]
[65.46605682 129.52299500]
[74.85675049 117.82621002]
[88.71484375 112.08879089]
[74.61945343 117.21909332]
[60.52406311 122.34939575]
[46.42867661 127.47969818]
[32.33328629 132.61000061]
[27.15529442 147.36541748]
[13.67783260 155.29586792]
[-1.73545706 152.65682983]
[-11.80688858 140.69438171]
[-11.78104115 125.05681610]
[-1.67011797 113.12772369]
[13.75181103 110.53965759]
[27.20298386 118.51461029]
[41.29837418 113.38430786]
[55.39376068 108.25401306]
[69.48915100 103.12371063]
[83.58454132 97.99340820]
[91.64403534 85.34253693]
[90.33670044 70.39961243]
[89.02936554 55.45669174]
[76.61988068 39.84493256]
[84.76625824 22.52065659]
[82.16153717 7.74854040]
[79.55681610 -7.02357578]
[76.95208740 -21.79569244]
[74.34736633 -36.56781006]
[62.08328629 -46.91052628]
[62.66703415 -62.94295502]
[75.65081024 -72.36638641]
[91.07457733 -67.95197296]
[97.10653687 -53.08607101]
[89.11948395 -39.17253113]
[91.72420502 -24.40041542]
[94.32893372 -9.62829876]
[96.93365479 5.14381790]
[99.53837585 19.91593361]
[108.70608521 25.23875618]
[113.37059021 35.00661087]
[111.67918396 45.92434692]
[103.97228241 54.14935684]
[105.27961731 69.09227753]
[106.58695221 84.03519440]
[107.10571289 69.04416656]
[113.72157288 55.58198929]
[125.27274323 46.01273346]
[139.73071289 42.01685715]
[154.55653381 44.29607010]
[167.14666748 52.45012283]
[175.29016113 65.04708862]
[177.55694580 79.87481689]
[173.54895020 94.32943726]
[163.97001648 105.87257385]
[150.50228882 112.47714996]
[135.51083374 112.98333740]
[121.62919617 107.30287170]
[131.76304626 118.36203766]
[147.55738831 122.77462769]
[151.37049866 138.72430420]
[139.27976990 149.80340576]
[123.72312927 144.61470032]
[120.70389557 128.49588013]
[110.57003784 117.43672943]
[120.21360016 128.92593384]
[123.14168549 143.63735962]
[118.63228607 157.94349670]
[107.79733276 168.31671143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[23 47]
[24 46]
[25 45]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
