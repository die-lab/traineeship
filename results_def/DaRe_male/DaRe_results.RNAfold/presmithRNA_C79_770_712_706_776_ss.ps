%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUAUACGCGCGACAAACCCCCUUACCCCCUUACGUCCAGCGAUUCCUGUUAUCCUUGUCAAACCCCUA\
) } def
/len { sequence length } bind def

/coor [
[133.60012817 174.67353821]
[137.08219910 160.01162720]
[143.85223389 146.54821777]
[132.36155701 136.90640259]
[117.63846588 134.65258789]
[112.04035950 119.85488892]
[100.54969025 110.21307373]
[92.58586884 107.74844360]
[88.78005219 99.89138031]
[77.72089386 89.75752258]
[66.66173553 79.62367249]
[51.09328079 80.13455200]
[40.02207947 69.69983673]
[39.63098145 54.85454941]
[28.57182121 44.72069550]
[17.51266098 34.58684158]
[4.59039640 42.40935898]
[-10.01263618 46.27305222]
[-25.11263466 45.86470795]
[-39.48550797 41.21743393]
[-51.96611404 32.70795822]
[-61.54270554 21.02610970]
[-67.43894958 7.11888170]
[-69.17686462 -7.88632870]
[-66.61556244 -22.77311516]
[-59.96268845 -36.33467484]
[-49.75754547 -47.47163010]
[-36.82743073 -55.28116226]
[-22.22052383 -59.13018036]
[-7.12094355 -58.70666885]
[7.24725437 -54.04495621]
[19.71930504 -45.52294922]
[29.28415489 -33.83148575]
[35.16642380 -19.91834068]
[36.88926697 -4.91139269]
[34.31301498 9.97281361]
[27.64651489 23.52768326]
[38.70567322 33.66153717]
[49.76483536 43.79538727]
[64.58772278 42.89114761]
[75.94763947 53.01077652]
[76.79558563 68.56451416]
[87.85475159 78.69836426]
[98.91390991 88.83221436]
[110.19150543 98.72240448]
[121.68217468 108.36421967]
[137.22715759 111.30768585]
[142.00337219 125.41573334]
[153.49403381 135.05754089]
[165.57731628 126.05247498]
[179.41181946 120.07728577]
[194.25151062 117.45420837]
[209.29608154 118.32471466]
[223.73419189 122.64183807]
[236.78721619 130.17279053]
[247.75123596 140.51139832]
[256.03497314 153.10015869]
[261.19165039 167.26013184]
[262.94326782 182.22772217]
[261.19525146 197.19572449]
[256.04196167 211.35694885]
[247.76126099 223.94769287]
[236.79972839 234.28895569]
[223.74851990 241.82302856]
[209.31143188 246.14363098]
[194.26708984 247.01774597]
[179.42677307 244.39823914]
[165.59082031 238.42637634]
[153.50538635 229.42420959]
[143.82221985 217.87721252]
[137.06352234 204.40811157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[6 46]
[7 45]
[9 44]
[10 43]
[11 42]
[14 39]
[15 38]
[16 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
