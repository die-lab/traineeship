%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAAAGCCCUACUAGAUGGGAAGGCCUCGAUCCUACAAAAUCUUAGUUAACAGCUAAGCGCCCAAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.24031067 152.27494812]
[89.18466187 151.28190613]
[82.32891083 149.34103394]
[75.79976654 146.48820496]
[69.71791077 142.77615356]
[64.19574738 138.27349854]
[59.33534241 133.06343079]
[55.22652817 127.24226379]
[51.94524765 120.91758728]
[49.55214691 114.20630646]
[34.68047714 116.16419220]
[19.80880165 118.12208557]
[12.52331924 131.82250977]
[-1.43838644 138.59379578]
[-16.70775414 135.83226013]
[-27.41339874 124.59977722]
[-29.43878365 109.21545410]
[-22.00510597 95.59487915]
[-7.97076654 88.97544098]
[7.26774502 91.90245056]
[17.85091019 103.25041199]
[32.72258377 101.29252625]
[47.59425735 99.33463287]
[54.05077744 74.79139709]
[71.28125000 56.15894699]
[64.94197083 42.56433105]
[58.60269928 28.96971321]
[43.45213699 25.09744644]
[34.37722778 12.36245251]
[35.66286850 -3.22219205]
[46.70201492 -14.29789543]
[62.28232574 -15.63504887]
[75.04724884 -6.60229015]
[78.96958160 8.53538895]
[72.19731903 22.63043976]
[78.53659058 36.22505569]
[84.87586212 49.81967163]
[95.35978699 47.79584885]
[106.03630829 47.93880844]
[116.46228790 50.24261093]
[126.20498657 54.61163712]
[134.86001587 60.86454773]
[142.06816101 68.74180603]
[147.53022766 77.91646576]
[151.01950073 88.00772095]
[165.96243286 86.70038605]
[180.90534973 85.39305115]
[195.84826660 84.08571625]
[210.79118347 82.77838135]
[225.73411560 81.47103882]
[240.67703247 80.16370392]
[255.92890930 72.75990295]
[267.26550293 85.36616516]
[258.29019165 99.74948883]
[241.98435974 95.10662842]
[227.04144287 96.41396332]
[212.09852600 97.72129822]
[197.15560913 99.02863312]
[182.21267700 100.33596802]
[167.26976013 101.64331055]
[152.32684326 102.95064545]
[145.94921875 125.20860291]
[130.60374451 142.54663086]
[137.52996826 155.85179138]
[151.64405823 164.20190430]
[151.19915771 180.59501648]
[136.65293884 188.16729736]
[122.96930695 179.12904358]
[124.22480774 162.77803040]
[117.29857635 149.47285461]
[110.42838287 151.36198425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[25 37]
[26 36]
[27 35]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
