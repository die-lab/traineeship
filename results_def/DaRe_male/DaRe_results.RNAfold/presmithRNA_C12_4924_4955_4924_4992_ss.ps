%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:32:39 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAGGUCAGCUAAUUAAGCUACCGGGCCCAUACCCCGAACAUGAUGGUUAAAGUCCCUCCUUCAUCA\
) } def
/len { sequence length } bind def

/coor [
[113.73880005 225.87480164]
[113.06582642 210.88990784]
[112.39285278 195.90501404]
[111.71987915 180.92012024]
[111.04690552 165.93522644]
[110.37393188 150.95033264]
[109.70096588 135.96543884]
[92.05989838 134.70069885]
[77.78789520 125.66780853]
[69.88304138 111.64811707]
[55.01879501 113.66161346]
[40.15454865 115.67511749]
[25.29030228 117.68861389]
[14.46668720 129.53044128]
[-1.52970493 128.30773926]
[-10.42781162 114.95846558]
[-5.40176725 99.72303009]
[9.69287682 94.28876495]
[23.27680206 102.82436371]
[38.14104843 100.81086731]
[53.00529480 98.79737091]
[67.86954498 96.78386688]
[70.54464722 86.76776123]
[76.25589752 78.11558533]
[84.41460419 71.71916962]
[80.42404938 57.25972748]
[76.43350220 42.80028534]
[72.44294739 28.34084129]
[58.14716339 22.00329018]
[51.31612015 7.93663073]
[55.17523193 -7.21728897]
[67.90234375 -16.30325127]
[83.48809814 -15.03114319]
[94.57337952 -4.00161457]
[95.92406464 11.57752800]
[86.90238953 24.35029030]
[90.89294434 38.80973434]
[94.88349152 53.26917648]
[98.87404633 67.72861481]
[109.04544830 68.14158630]
[118.83357239 71.75977325]
[127.23028564 78.37762451]
[133.32083130 87.47377014]
[136.38209534 98.25006104]
[135.96543884 109.70096588]
[150.95033264 110.37393188]
[165.08374023 103.26356506]
[177.45106506 111.56408691]
[192.43595886 112.23706055]
[202.88096619 100.59937286]
[218.37007141 98.44950104]
[231.58976746 106.80255127]
[236.29814148 121.71446991]
[230.27203369 136.14430237]
[216.35678101 143.27871704]
[201.12275696 139.74906921]
[191.76298523 127.22195435]
[176.77809143 126.54898071]
[163.71650696 133.70748901]
[150.27735901 125.35883331]
[135.29246521 124.68585968]
[124.68585968 135.29246521]
[125.35883331 150.27735901]
[126.03180695 165.26225281]
[126.70477295 180.24714661]
[127.37774658 195.23204041]
[128.05072021 210.21693420]
[128.72369385 225.20184326]
[131.77632141 244.34162903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[10 22]
[11 21]
[12 20]
[13 19]
[25 39]
[26 38]
[27 37]
[28 36]
[45 61]
[46 60]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
