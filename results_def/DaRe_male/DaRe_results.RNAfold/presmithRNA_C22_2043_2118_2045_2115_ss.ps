%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAGCUAGCUUAACCAUCAAGAUCAACUUAAAAACAUCAAUAACCUAUAAUCAACCUAAAACCACAAA\
) } def
/len { sequence length } bind def

/coor [
[162.78845215 237.76464844]
[164.36117554 222.77165222]
[169.47691345 208.59094238]
[177.83825684 196.04695129]
[167.70440674 184.98779297]
[157.57055664 173.92863464]
[147.43669128 162.86947632]
[134.43966675 170.82881165]
[120.15299988 176.13584900]
[105.11167145 178.59187317]
[89.87892914 178.10488892]
[75.02518463 174.69316101]
[61.10665512 168.48443604]
[48.64455032 159.71121216]
[38.10552597 148.70201111]
[29.88423729 135.86907959]
[24.28853607 121.69297791]
[21.52796745 106.70455170]
[21.70590210 91.46506500]
[24.81567764 76.54518127]
[30.74084282 62.50359726]
[39.25952148 49.86612320]
[28.65292168 39.25952148]
[18.04631996 28.65292168]
[2.06783175 27.21505165]
[-6.64981318 13.74722862]
[-1.41918361 -1.41918361]
[13.74722862 -6.64981318]
[27.21505165 2.06783175]
[28.65292168 18.04631996]
[39.25952148 28.65292168]
[49.86612320 39.25952148]
[62.04322052 30.99207497]
[75.54595184 25.13471794]
[89.90273285 21.89202118]
[104.61216736 21.37723732]
[119.16051483 23.60834122]
[133.03968811 28.50741386]
[145.76495361 35.90335846]
[156.89189148 45.53786469]
[166.03187561 57.07445908]
[172.86570740 70.11022186]
[177.15472412 84.18987274]
[178.74911499 98.82170105]
[177.59320068 113.49467468]
[173.72735596 127.69635010]
[167.28659058 140.93074036]
[158.49584961 152.73562622]
[168.62971497 163.79478455]
[178.76356506 174.85394287]
[188.89741516 185.91310120]
[202.12240601 178.67686462]
[216.69502258 174.81651306]
[231.76803589 174.55650330]
[246.46511841 177.91194153]
[259.93182373 184.68775940]
[271.38519287 194.48999023]
[280.15933228 206.74877930]
[285.74414062 220.75138855]
[287.81494141 235.68374634]
[286.25131226 250.67770386]
[281.14416504 264.86151123]
[272.79043579 277.41055298]
[261.67578125 287.59524536]
[248.44641113 294.82348633]
[233.87145996 298.67498779]
[218.79827881 298.92587280]
[204.10322571 295.56152344]
[190.64064026 288.77752686]
[179.19322205 278.96835327]
[170.42651367 266.70425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 48]
[22 32]
[23 31]
[24 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
