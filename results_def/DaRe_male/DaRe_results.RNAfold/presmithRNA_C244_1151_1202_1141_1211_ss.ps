%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUUUAGCCCAAGACGCCUAGCCAAGCCACACCCCCAAGGGGAUCCAGCAGUGACAAACAUUAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[73.48058319 267.32391357]
[64.52467346 279.99560547]
[49.82017899 284.95114136]
[35.02128220 280.28506470]
[25.81845665 267.79156494]
[25.75037766 252.27464294]
[34.84322357 239.70088196]
[49.60060883 234.90512085]
[54.11119461 220.59936523]
[58.62178421 206.29362488]
[63.13237000 191.98786926]
[56.04842758 178.93591309]
[60.41901398 164.36358643]
[74.15712738 157.02178955]
[78.66771698 142.71604919]
[66.51674652 134.03819275]
[57.64035416 122.03150177]
[52.90661621 107.87018585]
[52.77848434 92.93919373]
[57.26848602 78.69872284]
[65.93751526 66.54146576]
[77.93775940 57.65635681]
[92.09563446 52.91234207]
[107.02652740 52.77337265]
[111.53711700 38.46761703]
[105.79311371 28.76949501]
[106.50483704 17.74446487]
[113.17292023 9.21772957]
[123.27539062 6.00533628]
[129.01564026 -7.85285664]
[118.86912537 -20.71705818]
[116.51690674 -36.83767700]
[122.49603271 -51.89232254]
[135.12213135 -61.89111710]
[150.96273804 -64.23405457]
[156.09303284 -78.32944489]
[161.22334290 -92.42482758]
[166.35363770 -106.52021790]
[166.08923340 -123.47210693]
[182.30545044 -128.41891479]
[191.54803467 -114.20586395]
[180.44902039 -101.38991547]
[175.31872559 -87.29453278]
[170.18841553 -73.19914246]
[165.05812073 -59.10375214]
[174.59996033 -49.10146713]
[178.85729980 -35.87957764]
[176.92591858 -22.05665779]
[169.13333130 -10.39698505]
[156.98501587 -3.25775027]
[142.87384033 -2.11260509]
[137.13359070 11.74558830]
[141.33720398 30.42240906]
[125.84287262 42.97820282]
[121.33228302 57.28395844]
[133.48324585 65.96180725]
[142.35964966 77.96849823]
[147.09338379 92.12981415]
[147.22151184 107.06080627]
[142.73152161 121.30127716]
[134.06248474 133.45854187]
[122.06224060 142.34364319]
[107.90436554 147.08766174]
[92.97347260 147.22662354]
[88.46288300 161.53237915]
[95.50540924 175.42628479]
[90.72724152 189.87010193]
[77.43812561 196.49844360]
[72.92753601 210.80419922]
[68.41694641 225.10995483]
[63.90636444 239.41571045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[14 65]
[15 64]
[24 55]
[25 54]
[29 52]
[30 51]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
