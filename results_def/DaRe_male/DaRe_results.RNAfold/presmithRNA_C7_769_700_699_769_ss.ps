%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUUUUGGUAUACGCGCGACAAACCCCCUUACCCCCUUACGUCCAGCGAUUCCUGUUAUCCUUGUCAA\
) } def
/len { sequence length } bind def

/coor [
[92.89315796 274.49926758]
[82.23917389 263.84143066]
[74.33074188 251.01359558]
[69.59436798 236.70753479]
[68.28546143 221.69476318]
[70.47462463 206.78488159]
[76.04379272 192.78198242]
[84.69262695 180.44122314]
[95.95470428 170.42811584]
[109.22268677 163.28266907]
[105.34040070 148.79377747]
[94.57267761 138.50274658]
[98.47458649 123.17023468]
[94.59230042 108.68135071]
[89.48237610 102.09458160]
[90.87145996 93.47552490]
[87.62487030 78.83108521]
[84.37827301 64.18664551]
[71.33231354 55.67543411]
[68.24842072 40.77764130]
[76.44296265 28.39276505]
[73.19636536 13.74832439]
[69.94977570 -0.89611524]
[54.87766266 -1.90019190]
[40.69943619 -7.11119556]
[28.56445694 -16.10669327]
[19.45645714 -28.15746117]
[14.11377716 -42.28659439]
[12.96952629 -57.34871292]
[16.11646461 -72.12279510]
[23.29948235 -85.41117096]
[33.93628311 -96.13661194]
[47.16459656 -103.42965698]
[61.91205215 -106.69908905]
[76.98314667 -105.67987061]
[91.15612793 -100.45462799]
[103.28206635 -91.44694519]
[112.37796021 -79.38703156]
[117.70643616 -65.25253296]
[118.83555603 -50.18927765]
[115.67378235 -35.41836548]
[108.47741699 -22.13721275]
[97.82984161 -11.42246151]
[84.59421539 -4.14270926]
[87.84080505 10.50173092]
[91.08740234 25.14617157]
[103.74825287 32.90751648]
[107.24937439 47.71281433]
[99.02271271 60.94005203]
[102.26931000 75.58449554]
[105.51589966 90.22893524]
[109.08119202 104.79906464]
[112.96347809 119.28794861]
[124.00888062 130.61532593]
[119.82928467 144.91149902]
[123.71157074 159.40037537]
[138.77470398 158.95454407]
[153.53450012 161.99510193]
[167.19499207 168.35809326]
[179.01948547 177.70037842]
[188.37028503 189.51812744]
[194.74313354 203.17402649]
[197.79434204 217.93162537]
[197.35935974 232.99507141]
[193.46165466 247.55201721]
[186.31141663 260.81741333]
[176.29425049 272.07589722]
[163.95036316 280.72027588]
[149.94546509 286.28439331]
[135.03480530 288.46817017]
[120.02249908 287.15386963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[13 53]
[14 52]
[16 51]
[17 50]
[18 49]
[21 46]
[22 45]
[23 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
