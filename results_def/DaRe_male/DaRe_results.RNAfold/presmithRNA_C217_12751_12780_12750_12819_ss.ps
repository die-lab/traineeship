%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 15:32:39 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGAAGAGUAGGAAAACAGUAAAUGCUGCUAAUAUUUACCAACCAUGGUUAAACUCCAUGGCUUCCUU\
) } def
/len { sequence length } bind def

/coor [
[97.80328369 241.76791382]
[100.84381104 222.62620544]
[101.50730896 207.64088440]
[102.17080688 192.65556335]
[102.83431244 177.67024231]
[103.49781036 162.68492126]
[104.16130829 147.69960022]
[104.82481384 132.71429443]
[87.33531189 127.56034851]
[76.66326904 114.72455597]
[62.27940750 118.97948456]
[54.95429611 132.98370361]
[39.84742355 137.62675476]
[25.92142487 130.15399170]
[21.43835258 114.99887848]
[29.05793190 101.15267181]
[44.25960159 96.83007812]
[58.02447891 104.59561920]
[72.40834808 100.34069061]
[75.06369781 88.18490601]
[82.78920746 78.43141174]
[76.97238922 64.60517883]
[71.15557861 50.77894592]
[65.33876801 36.95271301]
[59.52195358 23.12648201]
[53.70514297 9.30025101]
[47.88832855 -4.52598095]
[32.89627075 -8.97256851]
[24.31306267 -22.04401016]
[26.19143486 -37.56836700]
[37.64447784 -48.21551895]
[53.26441574 -48.95820236]
[65.67598724 -39.44574356]
[69.01883698 -24.16963768]
[61.71456146 -10.34279346]
[67.53137207 3.48343825]
[73.34819031 17.30966949]
[79.16500092 31.13590240]
[84.98181152 44.96213531]
[90.79862213 58.78836823]
[96.61544037 72.61460114]
[110.33094788 72.94284058]
[122.83580017 80.03770447]
[130.86006165 92.75299072]
[131.98170471 108.40678406]
[146.94868469 109.40162659]
[161.91564941 110.39646912]
[176.88262939 111.39131165]
[191.84959412 112.38616180]
[206.81657410 113.38100433]
[217.50926208 101.97046661]
[233.04098511 100.15396118]
[246.07812500 108.78917694]
[250.46495056 123.79882812]
[244.13012695 138.09582520]
[230.06477356 144.92956543]
[214.91012573 141.07334900]
[205.82173157 128.34797668]
[190.85475159 127.35313416]
[175.88778687 126.35829163]
[160.92080688 125.36344147]
[145.95382690 124.36859894]
[130.98686218 123.37375641]
[119.81012726 133.37779236]
[119.14662933 148.36311340]
[118.48313141 163.34841919]
[117.81962585 178.33374023]
[117.15612793 193.31906128]
[116.49263000 208.30438232]
[115.82912445 223.28970337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[10 19]
[11 18]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
