%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAUGGUCCCGACCUUUUGAUCAGCUUUUACCUAAUUUACACAUGCAAGUCUCCGCACCCCUGUGAAUA\
) } def
/len { sequence length } bind def

/coor [
[76.85217285 113.96701050]
[62.36328506 117.84929657]
[47.87440109 121.73158264]
[33.38551331 125.61386871]
[25.62229538 131.01533508]
[18.17968941 129.33471680]
[3.53524947 132.58129883]
[-11.10919094 135.82789612]
[-25.75363159 139.07449341]
[-40.39807129 142.32109070]
[-44.93999100 156.99305725]
[-56.22029114 167.41661072]
[-71.20462036 170.78785706]
[-85.86227417 166.19996643]
[-96.25041962 154.88705444]
[-99.57469177 139.89222717]
[-94.94087982 125.24903107]
[-83.59545898 114.89640045]
[-68.59028625 111.61914062]
[-53.96168518 116.29882812]
[-43.64466476 127.67665100]
[-29.00022507 124.43005371]
[-14.35578442 121.18345642]
[0.28865525 117.93686676]
[14.93309498 114.69026947]
[29.50322723 111.12498474]
[43.99211502 107.24269867]
[58.48100281 103.36041260]
[72.96988678 99.47812653]
[74.78461456 90.24891663]
[79.65152740 82.20002747]
[86.98151398 76.30573273]
[95.88732147 73.27950287]
[105.29094696 73.48764038]
[114.05413055 76.90496063]
[121.11613464 83.11781311]
[125.62214661 91.37416840]
[140.60786438 90.71987915]
[155.59359741 90.06558990]
[170.57931519 89.41129303]
[185.56503296 88.75700378]
[200.55076599 88.10271454]
[215.53648376 87.44842529]
[227.47442627 73.06587982]
[245.80235291 71.67301178]
[259.31192017 83.67375183]
[274.18359375 81.71585846]
[289.05526733 79.75796509]
[296.34075928 66.05754852]
[310.30245972 59.28625488]
[325.57183838 62.04778671]
[336.27749634 73.28027344]
[338.30285645 88.66459656]
[330.86920166 102.28517151]
[316.83483887 108.90460968]
[301.59634399 105.97760010]
[291.01318359 94.62963867]
[276.14151001 96.58752441]
[261.26983643 98.54541779]
[256.25054932 109.19512177]
[246.52914429 116.04996490]
[234.56971741 117.22525787]
[223.47709656 112.29503632]
[216.19078064 102.43414307]
[201.20504761 103.08843994]
[186.21932983 103.74272919]
[171.23361206 104.39701843]
[156.24787903 105.05130768]
[141.26216125 105.70559692]
[126.27643585 106.35989380]
[114.04445648 123.10092163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
