%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGUUUAGUUUAAAGUAAAAUUUUAGAUCGUGACUCUAAAGAUAGGGGUUAAAGCCCCCUCACUCACC\
) } def
/len { sequence length } bind def

/coor [
[68.03792572 134.06343079]
[60.84822845 125.47607422]
[55.90932465 115.42412567]
[53.50513840 104.48545837]
[53.77389145 93.28893280]
[39.46813965 88.77834320]
[25.16238403 84.26776123]
[10.85663033 79.75717163]
[-4.33425522 88.12123871]
[-20.60193634 83.15869904]
[-28.23215675 68.33270264]
[-42.72104263 64.45041656]
[-57.20993042 60.56813049]
[-71.69882202 56.68584442]
[-86.18770599 52.80355835]
[-100.67658997 48.92127228]
[-115.16548157 45.03898621]
[-129.65437317 41.15670013]
[-144.14324951 37.27441788]
[-161.00758362 39.01526260]
[-167.34892273 23.29190636]
[-153.99548340 12.84574413]
[-140.26097107 22.78552818]
[-125.77207947 26.66781425]
[-111.28319550 30.55010033]
[-96.79430389 34.43238449]
[-82.30541992 38.31467056]
[-67.81653595 42.19695663]
[-53.32764435 46.07924271]
[-38.83875656 49.96152878]
[-24.34987068 53.84381485]
[-14.03225136 45.82631683]
[-0.77943736 45.30614853]
[10.46321011 52.70628357]
[15.36721706 65.45141602]
[29.67297173 69.96200562]
[43.97872543 74.47259521]
[58.28448105 78.98317719]
[70.44148254 63.83115387]
[87.71088409 54.93483353]
[107.10578918 53.83292007]
[125.27169037 60.71599579]
[139.06663513 74.39357758]
[146.10467529 92.50000000]
[161.10467529 92.50000000]
[170.94187927 83.84511566]
[183.62998962 84.33325958]
[192.20707703 93.13879395]
[207.19281006 93.79308319]
[222.17852783 94.44737244]
[237.16426086 95.10166168]
[252.14997864 95.75595856]
[266.43844604 87.70784760]
[280.41284180 96.28969574]
[279.69750977 112.67324066]
[265.02832031 120.00448608]
[251.49568176 110.74167633]
[236.50996399 110.08738708]
[221.52424622 109.43309784]
[206.53851318 108.77880859]
[191.55279541 108.12451935]
[176.63819885 117.11145782]
[161.10467529 107.50000000]
[146.10467529 107.50000000]
[142.99412537 118.25913239]
[137.41189575 127.96857452]
[129.67890930 136.07012939]
[120.23970032 142.09805298]
[109.63694000 145.70581055]
[98.48015594 146.68598938]
[87.41075134 144.98223877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 38]
[6 37]
[7 36]
[8 35]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[44 64]
[45 63]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
