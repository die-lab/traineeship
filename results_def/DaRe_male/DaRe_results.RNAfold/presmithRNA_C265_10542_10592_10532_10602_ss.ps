%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCAGUAUAAAUGACUUCCAAUCAUUUGGUCUUGGUGAAAAAUCCAGGGAAAGGUAAUGAAUUUAUUUG\
) } def
/len { sequence length } bind def

/coor [
[60.16445923 271.25155640]
[54.33137131 285.45965576]
[42.16590881 294.83502197]
[26.94051552 296.85565186]
[12.75074959 290.97805786]
[3.41358471 278.78326416]
[1.44067204 263.55160522]
[7.36271477 249.38034058]
[19.58671379 240.08145142]
[34.82447433 238.15629578]
[40.56472397 224.29809570]
[46.30497742 210.43991089]
[52.04522705 196.58171082]
[57.78548050 182.72352600]
[63.52573013 168.86532593]
[69.26598358 155.00714111]
[66.98816681 140.28773499]
[79.41759491 130.49897766]
[85.15784454 116.64077759]
[90.89810181 102.78258514]
[89.95195770 97.27209473]
[92.34406281 91.68093109]
[97.79040527 88.00199127]
[104.71662903 74.69683075]
[104.22577667 58.88323975]
[116.96564484 51.16669846]
[123.89186859 37.86153793]
[130.81809998 24.55637360]
[137.74432373 11.25121117]
[133.22145081 -3.65453577]
[140.43516541 -17.04919624]
[154.67338562 -21.26921272]
[161.59962463 -34.57437515]
[168.52584839 -47.87953949]
[175.45207214 -61.18470001]
[182.37831116 -74.48986053]
[189.30453491 -87.79502869]
[182.26058960 -101.62117767]
[184.72198486 -116.94179535]
[195.74224854 -127.86577606]
[211.08386230 -130.19264221]
[224.84768677 -123.02764893]
[231.74122620 -109.12590027]
[229.11378479 -93.83288574]
[217.97566223 -83.02909088]
[202.60969543 -80.86879730]
[195.68347168 -67.56363678]
[188.75724792 -54.25847244]
[181.83100891 -40.95330811]
[174.90478516 -27.64814568]
[167.97856140 -14.34298420]
[172.68843079 -0.25921056]
[165.85379028 13.33278275]
[151.04949951 18.17744064]
[144.12326050 31.48260307]
[137.19703674 44.78776550]
[130.27081299 58.09292984]
[131.25708008 72.95484161]
[118.02179718 81.62306213]
[111.09556580 94.92822266]
[104.75629425 108.52283478]
[99.01603699 122.38102722]
[93.27578735 136.23922729]
[95.14302826 151.94985962]
[83.12417603 160.74739075]
[77.38392639 174.60557556]
[71.64366913 188.46377563]
[65.90341949 202.32196045]
[60.16316986 216.18016052]
[54.42291641 230.03834534]
[48.68266678 243.89654541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[18 63]
[19 62]
[20 61]
[23 60]
[24 59]
[26 57]
[27 56]
[28 55]
[29 54]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
