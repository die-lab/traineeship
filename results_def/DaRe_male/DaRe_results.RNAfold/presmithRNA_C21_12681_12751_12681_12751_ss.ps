%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr  5 20:10:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGUUUAGUUUAAAGUAAAAUUUUAGAUCGUGACUCUAAAGAUAGGGGUUAAAGCCCCCUCACUCACCG\
) } def
/len { sequence length } bind def

/coor [
[63.21760178 128.79142761]
[57.42140198 119.20819092]
[54.07300186 108.52068329]
[53.36488724 97.34333801]
[38.72044754 94.09674835]
[24.07600784 90.85015106]
[9.43156910 87.60356140]
[-4.97253370 97.25977325]
[-21.61082458 93.73393250]
[-30.50418091 79.62937164]
[-45.27629852 77.02465057]
[-60.04841232 74.41992950]
[-74.82053375 71.81520844]
[-89.59264374 69.21047974]
[-104.36476135 66.60575867]
[-119.13687897 64.00103760]
[-133.90899658 61.39631653]
[-148.68110657 58.79159164]
[-165.32954407 61.99563980]
[-173.01712036 46.88479614]
[-160.62495422 35.31455612]
[-146.07638550 44.01947784]
[-131.30427551 46.62419891]
[-116.53215790 49.22891998]
[-101.76004028 51.83364487]
[-86.98792267 54.43836594]
[-72.21580505 57.04309082]
[-57.44369125 59.64781189]
[-42.67157364 62.25253677]
[-27.89945793 64.85725403]
[-18.31987190 55.97103119]
[-5.16282415 54.29778290]
[6.68200493 60.68989563]
[12.67816257 72.95912170]
[27.32260323 76.20571136]
[41.96704483 79.45230865]
[56.61148453 82.69889832]
[67.40164185 66.54498291]
[83.82996368 56.17738724]
[103.05503082 53.38928986]
[121.75170135 58.66291046]
[136.68623352 71.08612823]
[145.27557373 88.51025391]
[160.21849060 87.20291901]
[169.26393127 77.72359467]
[181.94630432 77.10404968]
[191.25820923 85.12852478]
[206.24394226 84.47423553]
[221.22966003 83.81994629]
[236.21537781 83.16564941]
[251.20111084 82.51136017]
[264.73376465 73.24855804]
[279.40292358 80.57980347]
[280.11825562 96.96334076]
[266.14385986 105.54519653]
[251.85539246 97.49708557]
[236.86967468 98.15137482]
[221.88395691 98.80566406]
[206.89822388 99.45996094]
[191.91250610 100.11425018]
[177.83793640 110.36688232]
[161.52581787 102.14583588]
[146.58290100 103.45317078]
[144.42192078 114.44246674]
[139.70715332 124.60147858]
[132.70968628 133.34617615]
[123.83176422 140.17384338]
[113.58378601 144.69197083]
[102.55489349 146.64079285]
[91.37911987 145.90829468]
[80.69895172 142.53659058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[7 34]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[43 63]
[44 62]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
