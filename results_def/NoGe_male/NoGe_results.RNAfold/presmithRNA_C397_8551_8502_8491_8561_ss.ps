%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCGGUAGCUUUAGCGGACGGAACGUAGUUCUUCCUCCAAUUUACAAGAUUGGUGCUUCUGGAAAGCU\
) } def
/len { sequence length } bind def

/coor [
[89.36267090 280.22122192]
[82.73475647 266.42523193]
[83.28894043 251.12974548]
[90.89787292 237.84959412]
[103.81306458 229.63641357]
[102.50572968 214.69349670]
[101.19839478 199.75056458]
[99.89105988 184.80764771]
[91.07394409 172.80316162]
[97.57904053 158.38114929]
[96.27170563 143.43823242]
[94.96437073 128.49531555]
[86.95247650 125.82833099]
[80.05164337 120.96195221]
[74.84949493 114.31056976]
[71.78902435 106.44058228]
[71.13083649 98.02214813]
[72.93099213 89.77214050]
[77.03618622 82.39307404]
[67.90476990 70.49277496]
[58.77334595 58.59247589]
[50.81219482 53.48724747]
[49.51671982 45.96803284]
[40.91307449 33.68075180]
[32.30942917 21.39347076]
[23.70578194 9.10619068]
[15.10213470 -3.18109035]
[1.06431031 -12.68770981]
[6.31335115 -28.80862617]
[23.25733376 -28.22743225]
[27.38941574 -11.78473663]
[35.99306107 0.50254375]
[44.59671021 12.78982449]
[53.20035553 25.07710457]
[61.80400085 37.36438751]
[70.67364502 49.46105576]
[79.80506897 61.36135483]
[88.93649292 73.26165771]
[105.64529419 71.61917877]
[120.45367432 79.53081512]
[133.44406128 72.03081512]
[146.43443298 64.53081512]
[159.42481995 57.03081131]
[172.41519165 49.53081131]
[185.40557861 42.03081131]
[198.39596558 34.53081131]
[209.08987427 21.37496185]
[224.69197083 28.00905991]
[222.63621521 44.83790970]
[205.89596558 47.52119446]
[192.90557861 55.02119446]
[179.91519165 62.52119446]
[166.92481995 70.02119446]
[153.93443298 77.52119446]
[140.94406128 85.02119446]
[127.95367432 92.52119446]
[125.66728210 113.36154175]
[109.90728760 127.18797302]
[111.21462250 142.13088989]
[112.52195740 157.07382202]
[121.43257904 170.14712524]
[114.83397675 183.50032043]
[116.14131927 198.44323730]
[117.44865417 213.38615417]
[118.75598907 228.32907104]
[132.90118408 234.17477417]
[142.70059204 245.93190002]
[145.90237427 260.89877319]
[141.77081299 275.63610840]
[131.25527954 286.75735474]
[116.77218628 291.70693970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 65]
[6 64]
[7 63]
[8 62]
[10 60]
[11 59]
[12 58]
[19 38]
[20 37]
[21 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
