%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGUUAGUCUGUUCGACUAUUAAAGUGGCACGUGAGUUGAGUUCAGACCGGCGUGAGCCAGGUUGGUUU\
) } def
/len { sequence length } bind def

/coor [
[183.90754700 152.13487244]
[170.60238647 145.20863342]
[157.29722595 138.28240967]
[144.80868530 146.40040588]
[129.83389282 147.18260193]
[116.38934326 140.31890869]
[108.13126373 127.56348419]
[107.36151886 112.28752899]
[93.38594055 112.70549774]
[85.71224976 101.01763153]
[72.40708923 94.09140015]
[58.95399475 87.45706940]
[45.35937881 81.11779785]
[31.76476288 74.77852631]
[15.98763371 75.95869446]
[7.72273254 63.56754303]
[-8.05439568 64.74771118]
[-16.31929588 52.35655975]
[-29.91391373 46.01728439]
[-43.50852966 39.67801285]
[-59.01517868 43.79182053]
[-71.81335449 34.11781693]
[-72.08538818 18.07707214]
[-59.62260056 7.97466898]
[-43.98537827 11.56030846]
[-37.16925812 26.08339500]
[-23.57464027 32.42266846]
[-9.98002243 38.76194382]
[4.82472754 37.12834549]
[14.06200695 49.97292709]
[28.86675644 48.33932877]
[38.10403442 61.18390656]
[51.69865417 67.52318573]
[65.29326630 73.86245728]
[72.92321014 73.83255005]
[79.33331299 80.78623962]
[92.63848114 87.71247101]
[106.61405945 87.29450226]
[114.28775024 98.98236847]
[127.24258423 90.85097504]
[142.42785645 90.29938507]
[155.76174927 97.37567139]
[163.71018982 110.09094238]
[164.22344971 124.97724915]
[177.52861023 131.90347290]
[190.83377075 138.82971191]
[204.28686523 145.46403503]
[217.88148499 151.80331421]
[231.47610474 158.14257812]
[245.07072449 164.48185730]
[258.66534424 170.82113647]
[272.25994873 177.16040039]
[285.85455322 183.49967957]
[299.44918823 189.83895874]
[315.22631836 188.65878296]
[323.49121094 201.04994202]
[337.08584595 207.38920593]
[353.99624634 208.60327148]
[357.51089478 225.18891907]
[342.54638672 233.15757751]
[330.74655151 220.98382568]
[317.15194702 214.64454651]
[302.34719849 216.27815247]
[293.10992432 203.43357849]
[279.51528931 197.09429932]
[265.92068481 190.75502014]
[252.32606506 184.41575623]
[238.73144531 178.07647705]
[225.13682556 171.73719788]
[211.54220581 165.39793396]
[197.94758606 159.05865479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[8 39]
[10 37]
[11 36]
[12 34]
[13 33]
[14 32]
[16 30]
[18 28]
[19 27]
[20 26]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
