%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUAUUGAGGAAGAAGGUUGCGACCUCGAUGUUGACUUGCCGCCCCCUCUUUUAGGUGUAGCAGCUGGGA\
) } def
/len { sequence length } bind def

/coor [
[144.48585510 207.84370422]
[130.83229065 214.05502319]
[116.07257080 211.38095093]
[105.46596527 200.77433777]
[102.79190063 186.01461792]
[109.00320435 172.36106873]
[121.88663483 164.67878723]
[136.85147095 165.70520020]
[128.24783325 153.41792297]
[119.64418030 141.13064575]
[111.04053497 128.84336853]
[97.42306519 130.77648926]
[84.31667328 126.60575867]
[74.32073212 117.15833282]
[69.41773224 104.30792236]
[70.58007812 90.60312653]
[77.57723236 78.76200104]
[69.51773834 66.11112976]
[61.45824432 53.46025467]
[45.00586700 45.52364349]
[44.57177353 28.11612892]
[35.70212936 16.01946068]
[26.57070732 4.11916065]
[17.43928719 -7.78113985]
[8.30786514 -19.68144035]
[-7.39195967 -21.49556541]
[-17.14502716 -33.93153000]
[-15.16501427 -49.61129761]
[-2.62662911 -59.23233795]
[13.03132820 -57.08666229]
[22.51926804 -44.44725800]
[20.20816612 -28.81286049]
[29.33958626 -16.91256142]
[38.47100830 -5.01226091]
[47.60242844 6.88803911]
[54.38407516 10.38462543]
[56.85905457 19.51248360]
[68.89403534 22.01512718]
[76.12305450 32.45388794]
[74.10911560 45.40076065]
[82.16860962 58.05163574]
[90.22810364 70.70250702]
[106.12172699 69.72859955]
[120.38802338 76.80168915]
[129.23460388 90.04153442]
[130.30981445 105.92862701]
[123.32781219 120.23971558]
[131.93145752 132.52699280]
[140.53511047 144.81428528]
[149.13874817 157.10156250]
[159.74536133 167.70816040]
[172.03263855 176.31181335]
[184.31991577 184.91545105]
[196.60719299 193.51910400]
[208.89447021 202.12274170]
[221.18176270 210.72639465]
[236.92413330 212.30381775]
[242.91177368 225.94190979]
[255.19905090 234.54556274]
[271.64175415 238.67764282]
[272.22293091 255.62162781]
[256.10202026 260.87066650]
[246.59539795 246.83283997]
[234.30812073 238.22918701]
[219.44461060 237.26715088]
[212.57810974 223.01367188]
[200.29083252 214.41003418]
[188.00355530 205.80638123]
[175.71626282 197.20274353]
[163.42898560 188.59909058]
[151.14170837 179.99543762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 50]
[9 49]
[10 48]
[11 47]
[17 42]
[18 41]
[19 40]
[21 37]
[22 35]
[23 34]
[24 33]
[25 32]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
