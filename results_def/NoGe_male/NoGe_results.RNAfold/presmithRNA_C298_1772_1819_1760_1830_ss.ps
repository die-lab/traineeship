%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUUUGGAGUGUCAGGAGAUUGAGGCUGUUUGGACUGUGUUGCCGGGGGCUGUUUUGGUUUUUUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[1.34125638 161.36549377]
[-11.30961514 169.42498779]
[-23.96048737 177.48448181]
[-36.61135864 185.54397583]
[-49.26222992 193.60346985]
[-61.91310120 201.66296387]
[-74.56397247 209.72245789]
[-87.21484375 217.78195190]
[-90.39039612 233.26391602]
[-103.62907410 241.89601135]
[-119.07660675 238.55694580]
[-127.56824493 225.22775269]
[-124.06605530 209.81637573]
[-110.64781952 201.46614075]
[-95.27433777 205.13107300]
[-82.62346649 197.07157898]
[-69.97259521 189.01208496]
[-57.32172394 180.95259094]
[-44.67085266 172.89309692]
[-32.01998138 164.83360291]
[-19.36911011 156.77410889]
[-6.71823788 148.71461487]
[-5.30892372 138.20779419]
[1.93037093 130.16036987]
[12.66431618 127.54498291]
[23.21253777 131.51765442]
[36.51770020 124.59143066]
[49.82286072 117.66519928]
[63.12802505 110.73896790]
[76.43318939 103.81274414]
[78.66391754 89.29003906]
[88.97656250 78.82417297]
[103.46479034 76.37952423]
[116.64058685 82.88209534]
[129.94573975 75.95586395]
[143.25091553 69.02964020]
[156.55607605 62.10340881]
[169.86123657 55.17717743]
[183.16639709 48.25094986]
[183.66265869 31.87434196]
[192.22288513 18.01325798]
[206.48010254 10.32403374]
[222.57936096 10.78041553]
[236.21997070 19.16776466]
[249.21035767 11.66776371]
[262.20074463 4.16776371]
[272.89465332 -8.98808575]
[288.49673462 -2.35398912]
[286.44100952 14.47486210]
[269.70074463 17.15814400]
[256.71035767 24.65814400]
[243.71997070 32.15814590]
[244.60009766 45.95371246]
[239.36254883 58.81883621]
[228.99781799 68.16633606]
[215.53366089 72.08918762]
[201.63850403 69.74937439]
[190.09262085 61.55611420]
[176.78746033 68.48233795]
[163.48229980 75.40856934]
[150.17713928 82.33480072]
[136.87197876 89.26103210]
[123.56681061 96.18725586]
[121.33608246 110.70996094]
[111.02343750 121.17582703]
[96.53520966 123.62047577]
[83.35941315 117.11790466]
[70.05425262 124.04413605]
[56.74909210 130.97036743]
[43.44392776 137.89659119]
[30.13876724 144.82281494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
