%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGGGCUUCUAACCCUUGCUUGAGUAGUUAGAGUCUAUUCUUGCCUCUGUGGUUUUGGGUUUUCCUUU\
) } def
/len { sequence length } bind def

/coor [
[74.33721924 123.47666931]
[61.34683990 130.97666931]
[48.35645676 138.47666931]
[35.36607742 145.97666931]
[22.37569618 153.47666931]
[9.38531399 160.97666931]
[-3.60506678 168.47666931]
[-16.59544754 175.97666931]
[-19.13252068 191.40707397]
[-31.02812386 201.55737305]
[-46.66551590 201.63491821]
[-58.66119766 191.60308838]
[-61.35117722 176.19860840]
[-53.46532440 162.69499207]
[-38.72710419 157.46826172]
[-24.09544754 162.98628235]
[-11.10506725 155.48628235]
[1.88531423 147.98628235]
[14.87569523 140.48628235]
[27.86607552 132.98628235]
[40.85645676 125.48628998]
[53.84683990 117.98628998]
[66.83721924 110.48628998]
[68.47752380 85.30082703]
[86.71633911 67.85538483]
[84.11161041 53.08326340]
[81.50688934 38.31114960]
[78.90216827 23.53903198]
[76.29744720 8.76691628]
[73.69272614 -6.00519991]
[60.06061935 -13.66677761]
[54.59098816 -28.31659508]
[59.86642456 -43.03745651]
[73.39602661 -50.87862396]
[88.79153442 -48.13773346]
[98.78365326 -36.10895538]
[98.65441132 -20.47190475]
[88.46483612 -8.60992241]
[91.06956482 6.16219378]
[93.67428589 20.93430901]
[96.27900696 35.70642471]
[98.88372803 50.47854233]
[101.48845673 65.25065613]
[113.30134583 67.86269379]
[123.50489807 74.36307526]
[130.86454773 83.96529388]
[145.35343933 80.08300781]
[159.84233093 76.20072937]
[169.07679749 63.08188629]
[185.09910583 62.26609421]
[195.61828613 74.37915802]
[192.56494141 90.12897491]
[178.28132629 97.43362427]
[163.72460938 90.68961334]
[149.23571777 94.57189941]
[134.74684143 98.45418549]
[134.43409729 104.90152740]
[132.93536377 111.18005371]
[130.30227661 117.07350922]
[126.62548828 122.37891388]
[135.75691223 134.27920532]
[144.88833618 146.17951965]
[160.23797607 151.95187378]
[162.64646912 168.17320251]
[149.63615417 178.15637207]
[134.59092712 171.63156128]
[132.98802185 155.31092834]
[123.85660553 143.41062927]
[114.72518921 131.51033020]
[104.17768860 134.52938843]
[93.21452332 134.11289978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[46 56]
[47 55]
[48 54]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
