%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGGUAAGCUAAGAUGUGUAAGCUGUCGGGCUCAUACCCCGGAAAUGAGUGUUGUGGUGGGCUCCUCUGCUG\
) } def
/len { sequence length } bind def

/coor [
[82.89689636 150.65325928]
[72.59808350 139.74754333]
[70.36428070 124.91481018]
[76.99434662 111.45960999]
[90.11623383 104.19408417]
[76.14236450 98.74146271]
[62.16849899 93.28884125]
[48.19463348 87.83622742]
[34.22076416 82.38360596]
[20.03350830 77.51311493]
[5.65709496 73.23307037]
[-8.71931744 68.95302582]
[-23.09572983 64.67298126]
[-34.97729492 70.15751648]
[-46.98804474 66.08760071]
[-52.70978546 55.22560883]
[-66.89704132 50.35511780]
[-81.08430481 45.48462677]
[-95.36918640 40.90837860]
[-109.74559784 36.62833786]
[-125.56262207 40.95890045]
[-137.02964783 29.23544312]
[-132.35037231 13.51804924]
[-116.33844757 9.97542858]
[-105.46556091 22.25192451]
[-91.08914185 26.53196716]
[-83.56488037 25.38844109]
[-76.21381378 31.29736710]
[-62.02655029 36.16785812]
[-47.83929443 41.03834915]
[-30.97683716 36.65052414]
[-18.81568527 50.29656982]
[-4.43927383 54.57661438]
[9.93713856 58.85665894]
[24.31355095 63.13669968]
[29.09673500 61.53697968]
[34.93368149 63.14155579]
[39.67338562 68.40973663]
[53.64725113 73.86235809]
[67.62111664 79.31497955]
[81.59498596 84.76760101]
[95.56884766 90.22021484]
[110.24960327 93.29844666]
[125.23679352 93.91831970]
[140.22398376 94.53820038]
[155.21116638 95.15807343]
[163.04965210 87.10218048]
[173.84428406 84.90060425]
[183.79962158 89.07121277]
[189.55825806 97.93527985]
[204.44306946 99.79067230]
[219.32788086 101.64606476]
[234.21269226 103.50144958]
[248.86392212 97.53054810]
[260.53640747 106.78269958]
[272.85272217 96.87894440]
[288.55541992 98.66790009]
[298.32839966 111.08821106]
[296.37353516 126.77113342]
[283.85058594 136.41226196]
[268.18920898 134.29168701]
[258.68103027 121.66751099]
[245.09445190 127.77112579]
[232.35729980 118.38626099]
[217.47248840 116.53086853]
[202.58767700 114.67548370]
[187.70286560 112.82009125]
[170.78544617 121.81532288]
[154.59129333 110.14525604]
[139.60409546 109.52538300]
[124.61691284 108.90550995]
[109.62973022 108.28563690]
[118.72821045 120.21113586]
[119.39437103 135.19633484]
[111.38996887 147.88214111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 35]
[11 34]
[12 33]
[13 32]
[16 30]
[17 29]
[18 28]
[19 26]
[20 25]
[43 72]
[44 71]
[45 70]
[46 69]
[50 67]
[51 66]
[52 65]
[53 64]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
