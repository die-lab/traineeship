%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAGGACUUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAGUGAUAUGCUUUCGAAC\
) } def
/len { sequence length } bind def

/coor [
[119.02372742 200.67683411]
[105.29431915 194.63502502]
[95.36565399 183.39129639]
[91.06926727 169.01976013]
[93.19771576 154.17153931]
[101.35836029 141.58567810]
[114.04581451 133.58389282]
[128.91658020 131.64201355]
[117.01627350 122.51058960]
[105.11597443 113.37917328]
[91.28013611 111.36395264]
[85.75260162 98.52113342]
[73.85230255 89.38970947]
[61.95200348 80.25828552]
[46.29341888 77.99568939]
[40.90636444 64.10940552]
[29.00606537 54.97798157]
[17.10576630 45.84656143]
[5.20546532 36.71513748]
[-6.69483471 27.58371735]
[-18.59513474 18.45229530]
[-30.49543571 9.32087421]
[-46.12983322 11.63197708]
[-58.76923370 2.14403653]
[-60.91491318 -13.51392078]
[-51.29387283 -26.05230522]
[-35.61410522 -28.03231812]
[-23.17813873 -18.27925110]
[-21.36401367 -2.57942605]
[-9.46371365 6.55199528]
[2.43658662 15.68341637]
[14.33688641 24.81483841]
[26.23718643 33.94625854]
[38.13748550 43.07768250]
[50.03778839 52.20910263]
[64.84518433 53.81856155]
[71.08341980 68.35798645]
[82.98372650 77.48941040]
[94.88402557 86.62082672]
[108.71986389 88.63604736]
[114.24739838 101.47886658]
[126.14769745 110.61029053]
[138.04800415 119.74171448]
[146.54147339 120.67121124]
[152.11581421 125.93169403]
[166.88792419 128.53642273]
[181.66003418 131.14114380]
[196.43215942 133.74586487]
[211.20426941 136.35058594]
[225.97639465 138.95530701]
[240.74850464 141.56002808]
[251.14035034 130.15769958]
[266.05294800 126.20578766]
[280.72778320 130.96533203]
[290.48211670 142.91758728]
[292.20339966 158.24862671]
[285.34240723 172.06636047]
[272.08840942 179.96162415]
[256.67071533 179.41505432]
[244.00909424 170.60105896]
[238.14378357 156.33215332]
[223.37167358 153.72743225]
[208.59954834 151.12271118]
[193.82743835 148.51797485]
[179.05531311 145.91325378]
[164.28320312 143.30853271]
[149.51107788 140.70381165]
[158.12709045 152.98242188]
[160.79779053 167.74275208]
[157.03050232 182.26197815]
[147.52018738 193.86170959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
