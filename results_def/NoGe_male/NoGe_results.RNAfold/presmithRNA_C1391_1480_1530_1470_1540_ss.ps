%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGACAAUCGUUUGCCUGCUGACUUCCAUAACUCUUCUGAGACUGGCUCUCUUGUUGUUUAGGGGUCUU\
) } def
/len { sequence length } bind def

/coor [
[91.09797668 115.38906860]
[78.81069946 123.99272156]
[66.52341461 132.59635925]
[54.23613739 141.20001221]
[41.94885635 149.80366516]
[36.50122452 157.53454590]
[28.93265915 158.50080872]
[16.28178787 166.56030273]
[3.63091540 174.61979675]
[-3.45729709 189.40794373]
[-19.82680321 190.39347839]
[-28.63805962 176.56257629]
[-20.82679939 162.14328003]
[-4.42857885 161.96891785]
[8.22229290 153.90942383]
[20.87316513 145.84992981]
[33.34520721 137.51637268]
[45.63248825 128.91273499]
[57.91976929 120.30908203]
[70.20705414 111.70543671]
[82.49433136 103.10179138]
[89.17723083 85.89549255]
[107.52690125 83.89362335]
[119.01757050 74.25180817]
[130.50823975 64.61000061]
[141.99890137 54.96818161]
[153.48956299 45.32637024]
[164.98023987 35.68455505]
[170.65084839 16.56476784]
[189.51463318 13.30109024]
[200.12124634 2.69448876]
[210.72784424 -7.91211271]
[221.33444214 -18.51871490]
[231.94104004 -29.12531662]
[227.34443665 -41.56091690]
[227.90353394 -54.75952148]
[233.49497986 -66.67584229]
[243.21846008 -75.47747040]
[255.54142761 -79.82665253]
[268.54064941 -79.08348846]
[280.20227051 -73.39984894]
[291.69293213 -83.04166412]
[303.18359375 -92.68347931]
[306.00860596 -108.47584534]
[320.18496704 -115.98651886]
[334.83779907 -109.45394897]
[338.72668457 -93.88937378]
[328.86840820 -81.23258972]
[312.82540894 -81.19281006]
[301.33474731 -71.55099487]
[289.84408569 -61.90918350]
[293.50469971 -45.35749435]
[288.43066406 -29.09206009]
[275.88119507 -17.43927956]
[259.11575317 -13.54345417]
[242.54765320 -18.51871490]
[231.94104004 -7.91211271]
[221.33444214 2.69448876]
[210.72784424 13.30109024]
[200.12124634 23.90769196]
[201.01942444 34.47048950]
[195.69351196 43.89403534]
[185.78007507 48.77067566]
[174.62205505 47.17522049]
[163.13137817 56.81703568]
[151.64071655 66.45884705]
[140.15005493 76.10066223]
[128.65937805 85.74247742]
[117.16871643 95.38429260]
[116.83723450 105.70763397]
[110.82276917 114.10450745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[7 16]
[8 15]
[9 14]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
