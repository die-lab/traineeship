%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[27.10239029 212.26963806]
[17.46057701 223.76029968]
[7.81876230 235.25096130]
[-1.57008982 246.94923401]
[-10.70151138 258.84951782]
[-12.30440807 275.17016602]
[-27.34963608 281.69497681]
[-40.35995483 271.71179199]
[-37.95146179 255.49047852]
[-22.60181046 249.71810913]
[-13.47039032 237.81781006]
[-11.84816647 230.36225891]
[-3.67190433 225.60914612]
[5.96990967 214.11848450]
[15.61172390 202.62782288]
[9.13252926 186.96324158]
[11.30501747 170.06382751]
[21.64035225 156.40888977]
[37.47460938 149.66094971]
[54.65493774 151.68360901]
[63.25858307 139.39633179]
[71.86222839 127.10904694]
[80.46587372 114.82176971]
[89.06952667 102.53448486]
[97.40307617 90.06244659]
[105.46257019 77.41157532]
[106.35182190 61.61537552]
[119.71575928 55.03855133]
[127.77525330 42.38768005]
[135.83474731 29.73680878]
[143.89424133 17.08593750]
[151.67584229 4.26225901]
[159.17584229 -8.72812176]
[158.80082703 -13.29935551]
[159.78887939 -17.36215019]
[161.81718445 -20.55371666]
[164.47915649 -22.65220070]
[167.33723450 -23.59161949]
[169.97669983 -23.45864487]
[180.11054993 -34.51780319]
[190.24441528 -45.57696533]
[189.30473328 -61.35329437]
[199.85815430 -73.11766815]
[215.64353943 -73.89050293]
[227.29568481 -63.21327972]
[227.90158081 -47.42060852]
[217.10176086 -35.88200378]
[201.30357361 -35.44311142]
[191.16972351 -24.38395119]
[181.03585815 -13.32479095]
[172.16621399 -1.22812212]
[164.66621399 11.76225853]
[164.03102112 19.36577034]
[156.54510498 25.14543152]
[148.48561096 37.79630280]
[140.42611694 50.44717407]
[132.36662292 63.09804535]
[132.05384827 77.98936462]
[118.11344147 85.47106934]
[110.05394745 98.12194061]
[108.64988708 106.33932495]
[101.35680389 111.13813019]
[92.75315857 123.42541504]
[84.14951324 135.71269226]
[75.54586792 147.99996948]
[66.94221497 160.28726196]
[73.62841034 171.73574829]
[75.36972046 184.83091736]
[71.93247223 197.53713989]
[63.88510132 207.89352417]
[52.50457001 214.31648254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 11]
[5 10]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 60]
[26 59]
[28 57]
[29 56]
[30 55]
[31 54]
[32 52]
[33 51]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
