%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[60.07701492 178.19644165]
[49.01785278 188.33030701]
[37.95869446 198.46415710]
[33.01138306 213.49195862]
[18.40060997 216.38583374]
[20.29092598 231.78733826]
[12.73801994 245.34216309]
[-1.35386181 251.83819580]
[-16.56610298 248.77758789]
[-27.04928780 237.33720398]
[-28.77241516 221.91609192]
[-21.07291031 208.44400024]
[-6.91138840 202.10122681]
[8.26675701 205.32667542]
[12.42304134 191.02371216]
[27.82484055 187.40499878]
[38.88399887 177.27114868]
[49.94316101 167.13728333]
[59.33201218 155.43902588]
[66.83201599 142.44863892]
[74.33201599 129.45825195]
[81.83201599 116.46788025]
[89.33201599 103.47749329]
[96.54684448 90.32659912]
[103.47307587 77.02143097]
[102.98221588 61.20784378]
[115.72208405 53.49130249]
[122.64831543 40.18613815]
[129.57453918 26.88097763]
[136.50077820 13.57581520]
[143.13510132 0.12272390]
[149.47438049 -13.47189331]
[148.70237732 -17.99304771]
[149.33258057 -22.12649536]
[151.07501221 -25.48269653]
[153.54394531 -27.80520058]
[156.30928040 -28.99014282]
[158.95028687 -29.08771896]
[168.08171082 -40.98801804]
[177.21313477 -52.88831711]
[174.90203857 -68.52271271]
[184.38996887 -81.16211700]
[200.04792786 -83.30780029]
[212.58631897 -73.68675232]
[214.56632996 -58.00698853]
[204.81326294 -45.57102203]
[189.11343384 -43.75689697]
[179.98200989 -31.85659790]
[170.85058594 -19.95629692]
[163.06898499 -7.13261890]
[156.72972107 6.46199799]
[156.75962830 14.09193611]
[149.80593872 20.50204468]
[142.87969971 33.80720520]
[135.95347595 47.11236954]
[129.02725220 60.41753006]
[130.01351929 75.27944946]
[116.77823639 83.94766235]
[109.85200500 97.25282288]
[109.16947937 105.56131744]
[102.32239532 110.97749329]
[94.82239532 123.96788025]
[87.32239532 136.95825195]
[79.82239532 149.94863892]
[72.32239532 162.93902588]
[87.22896576 161.26744080]
[99.91970825 169.26400757]
[104.84552765 183.43214417]
[99.85256195 197.57676697]
[87.12403107 205.51304626]
[72.22555542 203.77078247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 59]
[25 58]
[27 56]
[28 55]
[29 54]
[30 53]
[31 51]
[32 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
