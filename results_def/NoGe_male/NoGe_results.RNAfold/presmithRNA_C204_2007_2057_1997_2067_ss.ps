%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUUGCUUGAGGUUGAUCACCGGACUGUGGUGCCUGUGGGGGUUGACGUUCGGGUUUUGGUUACUGCU\
) } def
/len { sequence length } bind def

/coor [
[176.15344238 383.71365356]
[171.64285278 369.40789795]
[167.13226318 355.10214233]
[162.62167358 340.79638672]
[150.31613159 336.40240479]
[142.75669861 325.50457764]
[142.95724487 312.04653931]
[151.07145691 301.06256104]
[147.18917847 286.57369995]
[143.30688477 272.08480835]
[139.42460632 257.59591675]
[135.54231262 243.10702515]
[131.66003418 228.61813354]
[127.77774048 214.12925720]
[123.58030701 199.72850037]
[119.06971741 185.42274475]
[114.55913544 171.11698914]
[110.04854584 156.81123352]
[105.53795624 142.50549316]
[101.02737427 128.19973755]
[96.51678467 113.89397430]
[86.33901215 104.30729675]
[89.17745972 90.61660767]
[84.66687012 76.31085205]
[79.23030090 62.33073807]
[72.89102936 48.73611832]
[66.22356415 42.02879715]
[66.58625031 34.40742493]
[51.89091492 28.59170151]
[45.68884277 14.05520153]
[51.65960693 -0.57782543]
[66.26086426 -6.62586498]
[80.82994843 -0.50072217]
[86.72328186 14.16366386]
[80.44444275 28.66717339]
[86.48564148 42.39684677]
[92.82492065 55.99146271]
[96.33265686 57.52945709]
[99.15319824 61.02649307]
[100.28301239 66.07712555]
[98.97262573 71.80027008]
[103.48321533 86.10602570]
[113.66098785 95.69270325]
[110.82254028 109.38339233]
[115.33312988 123.68914795]
[119.84371185 137.99490356]
[124.35430145 152.30065918]
[128.86488342 166.60641479]
[133.37547302 180.91215515]
[137.88606262 195.21791077]
[143.62100220 202.73812866]
[142.26663208 210.24696350]
[146.14891052 224.73585510]
[150.03120422 239.22474670]
[153.91348267 253.71362305]
[157.79577637 268.20251465]
[161.67805481 282.69140625]
[165.56034851 297.18029785]
[180.77658081 305.49813843]
[185.33183289 321.88452148]
[176.92742920 336.28579712]
[181.43801880 350.59155273]
[185.94860840 364.89730835]
[190.45919800 379.20306396]
[205.21658325 383.99880981]
[214.30943298 396.57257080]
[214.24134827 412.08950806]
[205.03852844 424.58300781]
[190.23962402 429.24908447]
[175.53512573 424.29354858]
[166.57922363 411.62185669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 42]
[24 41]
[25 37]
[26 36]
[28 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
