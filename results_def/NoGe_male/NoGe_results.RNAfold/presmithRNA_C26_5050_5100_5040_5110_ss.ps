%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUGACCGUGCAAAGGUAGCAUAAUCAUUUGUCCUUUAAUUGUGGGCUGGGAUGAAGGGGAAGAUCGUG\
) } def
/len { sequence length } bind def

/coor [
[81.26031494 237.61221313]
[84.18732452 222.37370300]
[95.53528595 211.79054260]
[93.57739258 196.91886902]
[91.61949921 182.04719543]
[79.68328094 173.21191406]
[77.48584747 158.15782166]
[86.83403015 145.69790649]
[84.87613678 130.82623291]
[73.17787170 121.43738556]
[58.23494720 122.74472046]
[43.29202652 124.05206299]
[28.34910774 125.35939789]
[19.52856827 138.27188110]
[4.45778799 142.44387817]
[-9.74727249 135.90550232]
[-16.37941742 121.74398804]
[-12.30715179 106.64595032]
[0.54672575 97.74023438]
[16.11300850 99.23183441]
[27.04177094 110.41647339]
[41.98469162 109.10913849]
[56.92761230 107.80180359]
[71.87052917 106.49446869]
[75.68674469 88.71739197]
[88.68783569 78.00025177]
[104.20249176 77.72106934]
[111.70249176 64.73068237]
[119.20249176 51.74030685]
[126.70249176 38.74992371]
[134.20249939 25.75954247]
[141.70249939 12.76916218]
[148.62872314 -0.53600055]
[154.96800232 -14.13061714]
[161.30726624 -27.72523499]
[167.64654541 -41.31985092]
[159.32234192 -54.30873871]
[159.36476135 -69.73604584]
[167.76025391 -82.67897034]
[181.82984924 -89.00746918]
[197.08399963 -86.70215607]
[208.65515137 -76.49862671]
[212.85099792 -61.65280914]
[208.33265686 -46.90193558]
[196.54191589 -36.95296860]
[181.24116516 -34.98057556]
[174.90188599 -21.38595963]
[168.56260681 -7.79134321]
[162.22334290 5.80327320]
[163.11627197 10.79138279]
[160.65159607 16.35635567]
[154.69287109 20.26916122]
[147.19287109 33.25954437]
[139.69287109 46.24992371]
[132.19287109 59.24030685]
[124.69287109 72.23068237]
[117.19287109 85.22106934]
[124.70276642 101.31422424]
[118.35753632 119.53029633]
[99.74781036 128.86834717]
[101.70570374 143.74002075]
[113.96021271 153.35588074]
[115.73394012 168.46575928]
[106.49117279 180.08930969]
[108.44906616 194.96098328]
[110.40695953 209.83264160]
[124.10737610 217.11813354]
[130.87866211 231.07983398]
[128.11714172 246.34919739]
[116.88465118 257.05484009]
[101.50032806 259.08023071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[8 61]
[9 60]
[10 24]
[11 23]
[12 22]
[13 21]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 49]
[34 48]
[35 47]
[36 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
