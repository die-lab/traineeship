%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCGUUUUAGAUUGGAUAAUUGUUUUCGUUCUUUUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAU\
) } def
/len { sequence length } bind def

/coor [
[85.42525482 262.86660767]
[78.09478760 262.48516846]
[70.98933411 260.67782593]
[64.38316345 257.51782227]
[54.24930573 268.57699585]
[55.18898773 284.35330200]
[44.63555527 296.11767578]
[28.85017395 296.89053345]
[17.19803047 286.21328735]
[16.59213448 270.42062378]
[27.39195442 258.88201904]
[43.19014740 258.44311523]
[53.32400131 247.38397217]
[46.15237045 222.46586609]
[57.01964569 198.73260498]
[80.88454437 187.73657227]
[82.84243774 172.86489868]
[84.80033112 157.99322510]
[86.75822449 143.12155151]
[88.71611786 128.24989319]
[90.67401123 113.37821198]
[84.08102417 103.54076385]
[85.88253784 91.83618164]
[95.12854767 84.43659210]
[97.73326874 69.66447449]
[100.33799744 54.89236069]
[102.94271851 40.12024307]
[97.71933746 25.18615723]
[107.54915619 13.99580956]
[110.15388489 -0.77630639]
[112.75860596 -15.54842281]
[100.10971069 -24.02930641]
[92.00935364 -36.92520142]
[89.86097717 -52.00181961]
[94.03678131 -66.64704132]
[103.81330109 -78.32349396]
[117.49668884 -85.00816345]
[132.71621704 -85.54288483]
[146.83500671 -79.83502197]
[157.40689087 -68.87349701]
[162.60023499 -54.55745316]
[161.51525879 -39.36723709]
[154.33992004 -25.93464088]
[142.31742859 -16.58694839]
[127.53072357 -12.94369984]
[124.92599487 1.82841623]
[122.32127380 16.60053253]
[127.73096466 30.47801590]
[117.71483612 42.72496414]
[115.11010742 57.49708176]
[112.50538635 72.26919556]
[109.90066528 87.04131317]
[116.11819458 102.48082733]
[105.54567719 115.33610535]
[103.58779144 130.20777893]
[101.62989807 145.07945251]
[99.67200470 159.95112610]
[97.71411133 174.82279968]
[95.75621796 189.69447327]
[102.52523041 192.83410645]
[108.54139709 197.23333740]
[113.57379150 202.71910095]
[117.43005371 209.07667542]
[119.96376801 216.05816650]
[121.08002472 223.39205933]
[120.73895264 230.79391479]
[118.95715332 237.97726440]
[115.80690765 244.66479492]
[111.41326904 250.59902954]
[105.94907379 255.55218506]
[99.62818146 259.33502197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[24 52]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
