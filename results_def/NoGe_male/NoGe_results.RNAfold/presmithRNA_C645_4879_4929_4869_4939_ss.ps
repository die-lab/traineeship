%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUUAGCGGUGUUGUUUUUGUUUGCGCCCGGUUUUUGAGUGUGAGCUUAAGUUGGAGAAGAAGGAACUC\
) } def
/len { sequence length } bind def

/coor [
[69.29361725 183.59655762]
[62.95434570 197.19117737]
[56.61507034 210.78579712]
[55.40100861 227.69621277]
[38.81536865 231.21086121]
[30.84670448 216.24635315]
[43.02045441 204.44651794]
[49.35972977 190.85189819]
[55.69900131 177.25727844]
[48.32836533 164.34172058]
[49.99599457 149.38568115]
[60.27063751 138.14802551]
[75.36672211 135.07972717]
[81.70599365 121.48510742]
[88.04527283 107.89048767]
[87.01809692 93.94644165]
[98.36011505 85.77023315]
[104.69938660 72.17562103]
[111.03865814 58.58100128]
[117.37793732 44.98638535]
[123.71720886 31.39176941]
[126.32192993 16.61965370]
[125.01459503 1.67673254]
[123.70726013 -13.26618767]
[122.39992523 -28.20910835]
[121.09259033 -43.15202713]
[119.78524780 -58.09494781]
[118.47791290 -73.03787231]
[117.17057800 -87.98078918]
[108.25995636 -101.05410004]
[114.85855865 -114.40728760]
[113.55122375 -129.35020447]
[112.24388885 -144.29313660]
[104.84008789 -159.54501343]
[117.44634247 -170.88162231]
[131.82966614 -161.90629578]
[127.18680573 -145.60046387]
[128.49414062 -130.65754700]
[129.80148315 -115.71462250]
[138.61859131 -103.71013641]
[132.11349487 -89.28812408]
[133.42083740 -74.34520721]
[134.72816467 -59.40228653]
[136.03550720 -44.45936584]
[137.34284973 -29.51644516]
[138.65017700 -14.57352448]
[139.95751953 0.36939639]
[141.26484680 15.31231689]
[151.18072510 4.05729246]
[164.89985657 -2.00779724]
[179.89791870 -1.76696754]
[193.41525269 4.73546839]
[202.96464539 16.30305481]
[206.78900146 30.80733871]
[204.18464661 45.57951736]
[195.63075256 57.90148926]
[182.70127869 65.50599670]
[167.77523804 66.99380493]
[153.59906006 62.09114838]
[142.78117371 51.70012665]
[137.31182861 37.73104477]
[130.97254944 51.32566071]
[124.63327789 64.92028046]
[118.29400635 78.51489258]
[111.95472717 92.10951233]
[112.98190308 106.05355835]
[101.63988495 114.22976685]
[95.30061340 127.82437897]
[88.96134186 141.41899109]
[96.31446075 154.95553589]
[94.31032562 170.04980469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[13 69]
[14 68]
[15 67]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 39]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
