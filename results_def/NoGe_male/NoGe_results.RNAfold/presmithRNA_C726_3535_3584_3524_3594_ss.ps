%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCGGUUUUAAUUUUUUUAUAAUGCUGGUUUUAGGAUGUAGCAUCAGUGUGAGAUCUUAGGGUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[89.56483459 159.59240723]
[80.52878571 147.61953735]
[77.83145905 132.86404419]
[82.04733276 118.46868134]
[92.27771759 107.50000000]
[77.27771759 107.50000000]
[62.27771759 107.50000000]
[47.27771759 107.50000000]
[32.27771759 107.50000000]
[18.47754669 115.23729706]
[5.75027418 107.50000000]
[-9.24972630 107.50000000]
[-24.24972534 107.50000000]
[-32.50370026 120.53363037]
[-46.50350952 127.01505280]
[-61.78187180 124.87606812]
[-73.46350861 114.79922485]
[-77.82086182 100.00000000]
[-73.46350861 85.20077515]
[-61.78187180 75.12393188]
[-46.50350952 72.98494720]
[-32.50370026 79.46636963]
[-24.24972534 92.50000000]
[-9.24972630 92.50000000]
[5.75027418 92.50000000]
[18.47754669 84.76270294]
[32.27771759 92.50000000]
[47.27771759 92.50000000]
[62.27771759 92.50000000]
[77.27771759 92.50000000]
[92.27771759 92.50000000]
[106.84784698 88.93471527]
[120.15301514 82.00848389]
[133.45817566 75.08225250]
[146.76333618 68.15602112]
[160.06849670 61.22979355]
[173.37365723 54.30356598]
[186.67881775 47.37733459]
[199.98399353 40.45110703]
[213.28915405 33.52487946]
[221.95736694 20.28959846]
[236.81927490 21.27586746]
[245.48748779 8.04058743]
[260.34939575 9.02685642]
[273.65457153 2.10062766]
[286.95974731 -4.82560158]
[295.30984497 -18.93969727]
[311.70297241 -18.49479485]
[319.27523804 -3.94857335]
[310.23696899 9.73506260]
[293.88595581 8.47956085]
[280.58081055 15.40579033]
[267.27563477 22.33201981]
[259.55911255 35.07188797]
[243.74551392 34.58103180]
[236.02896118 47.32089996]
[220.21537781 46.83003998]
[206.91021729 53.75627136]
[193.60505676 60.68249893]
[180.29989624 67.60872650]
[166.99473572 74.53495789]
[153.68955994 81.46118927]
[140.38439941 88.38741302]
[127.07923889 95.31364441]
[113.77407837 102.23987579]
[127.91410065 107.24585724]
[138.30035400 118.06832123]
[142.72070312 132.40220642]
[140.23367310 147.19459534]
[131.36895752 159.29487610]
[118.01464844 166.12585449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[42 55]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
