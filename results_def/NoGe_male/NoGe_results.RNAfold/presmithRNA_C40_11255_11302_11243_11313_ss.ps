%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCUAUGAUCCAUCGGUUGCAGCACGGACAAGAUCUUCGCUCUGUCGGUAUGGUCUGGGGGCGGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[87.31491852 253.97891235]
[87.31491852 238.97891235]
[79.57762146 226.25164795]
[87.31491852 212.45147705]
[87.31491852 197.45147705]
[87.31491852 182.45147705]
[84.06326294 175.54904175]
[87.65641785 166.80075073]
[88.31070709 151.81503296]
[85.36322784 144.77732849]
[89.33455658 136.19410706]
[90.64189911 121.25118256]
[91.94923401 106.30825806]
[89.40027618 98.37102509]
[93.65348053 90.74685669]
[95.61137390 75.87518311]
[97.56926727 61.00350952]
[99.52716064 46.13183975]
[90.04866791 36.30097198]
[88.09321594 22.98424149]
[94.16553497 11.19294548]
[105.79226685 5.23034716]
[108.39698792 -9.54176903]
[101.58180237 -20.73242188]
[104.26580048 -33.14300156]
[114.42695618 -40.06073380]
[117.67354584 -54.70517349]
[113.10655212 -69.85288239]
[123.41513824 -80.60381317]
[126.66172791 -95.24825287]
[129.90832520 -109.89269257]
[133.15492249 -124.53713226]
[131.94842529 -133.91731262]
[136.87576294 -139.74295044]
[140.75804138 -154.23184204]
[131.64108276 -166.93676758]
[132.87519836 -182.52557373]
[143.87767029 -193.63771057]
[159.45347595 -195.02636719]
[172.24819946 -186.03585815]
[176.22055054 -170.91122437]
[169.49491882 -156.79386902]
[155.24693298 -150.34954834]
[151.36465454 -135.86067200]
[147.79936218 -121.29053497]
[144.55276489 -106.64609528]
[141.30616760 -92.00165558]
[138.05957031 -77.35721588]
[142.85877991 -63.25697327]
[132.31799316 -51.45858002]
[129.07139587 -36.81414032]
[135.33190918 -20.56557274]
[123.16910553 -6.93704653]
[120.56438446 7.83507013]
[130.77662659 21.01613617]
[128.39920044 37.85692215]
[114.39883423 48.08972931]
[112.44094086 62.96140289]
[110.48304749 77.83307648]
[108.52515411 92.70475006]
[106.89215088 107.61559296]
[105.58481598 122.55851746]
[104.27748108 137.50143433]
[103.29643250 152.46931458]
[102.64214325 167.45504761]
[102.31491852 182.45147705]
[102.31491852 197.45147705]
[102.31491852 212.45147705]
[110.05221558 226.25164795]
[102.31491852 238.97891235]
[102.31491852 253.97891235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[4 68]
[5 67]
[6 66]
[8 65]
[9 64]
[11 63]
[12 62]
[13 61]
[15 60]
[16 59]
[17 58]
[18 57]
[22 54]
[23 53]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[32 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
