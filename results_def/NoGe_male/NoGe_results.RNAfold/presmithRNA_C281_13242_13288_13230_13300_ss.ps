%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGAGCGCGGCGCUGAAGACGCCGAGGUGGUCCUGUGGAUUCCCAGAUACGGUUUCUUAUAAAAUAGUG\
) } def
/len { sequence length } bind def

/coor [
[108.09143066 236.72712708]
[94.85239410 229.67532349]
[84.52627563 218.79547119]
[78.17503357 205.20643616]
[76.45182037 190.30575562]
[79.53361511 175.62640381]
[67.24633789 184.23004150]
[54.95905685 192.83369446]
[42.67177582 201.43734741]
[33.16515732 215.47515869]
[17.04424095 210.22612000]
[17.62543488 193.28213501]
[34.06813049 189.15005493]
[46.35541153 180.54641724]
[58.64269257 171.94276428]
[70.92996979 163.33912659]
[72.98754120 157.65177917]
[77.95020294 153.31320190]
[81.83248901 138.82431030]
[85.71477509 124.33541870]
[89.59706116 109.84653473]
[86.16413116 96.29268646]
[95.91405487 86.27117920]
[99.79634094 71.78229523]
[103.67862701 57.29340744]
[107.56091309 42.80451965]
[99.56038666 22.07854271]
[114.13190460 6.27048540]
[115.43923950 -8.67243481]
[108.93414307 -23.09444427]
[117.75125885 -35.09893417]
[119.05859375 -50.04185486]
[120.36592865 -64.98477173]
[121.67326355 -79.92769623]
[122.98059845 -94.87061310]
[118.33773804 -111.17645264]
[132.72106934 -120.15177155]
[145.32733154 -108.81517029]
[137.92352295 -93.56327820]
[136.61618042 -78.62036133]
[135.30885315 -63.67744064]
[134.00151062 -48.73451996]
[132.69418335 -33.79159927]
[139.29278564 -20.43840790]
[130.38215637 -7.36509895]
[129.07482910 7.57782125]
[135.84585571 12.83258343]
[139.86056519 20.51391792]
[140.31959534 29.26549149]
[137.05961609 37.50392532]
[130.59745789 43.70527267]
[122.04979706 46.68680573]
[118.16751099 61.17569351]
[114.28522491 75.66458130]
[110.40293884 90.15346527]
[113.83586884 103.70731354]
[104.08594513 113.72882080]
[100.20365906 128.21771240]
[96.32137299 142.70658875]
[92.43908691 157.19548035]
[105.17972565 149.27865601]
[119.77121735 145.80180359]
[134.71296692 147.12251282]
[148.46833801 153.10494995]
[159.62274170 163.13386536]
[167.02905273 176.17790222]
[169.92558289 190.89556885]
[168.01446533 205.77333069]
[161.49223328 219.28112793]
[151.02964783 230.02981567]
[137.70266724 236.91398621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[9 13]
[18 60]
[19 59]
[20 58]
[21 57]
[23 55]
[24 54]
[25 53]
[26 52]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
