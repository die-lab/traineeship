%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUUUUGAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGC\
) } def
/len { sequence length } bind def

/coor [
[59.47240829 199.60012817]
[45.18701172 195.02548218]
[32.71534348 186.69136047]
[23.02316475 175.24314880]
[16.86100578 161.56733704]
[14.70603657 146.72293091]
[16.72513390 131.85945129]
[22.76194382 118.12784576]
[32.34899902 106.59145355]
[44.74391556 98.14360809]
[58.98686981 93.43847656]
[73.97494507 92.84041595]
[88.54297638 96.39392090]
[80.48348236 83.74304962]
[72.42398834 71.09217834]
[64.36449432 58.44131088]
[56.30500412 45.79043579]
[48.24551010 33.13956451]
[33.07531357 29.60362244]
[25.08205605 16.65902901]
[28.54652596 2.21835637]
[14.60612583 -5.26334238]
[14.29334068 -20.15466309]
[6.23384619 -32.80553436]
[-1.82564783 -45.45640564]
[-9.88514233 -58.10727692]
[-25.36711311 -61.28282928]
[-33.99919891 -74.52150726]
[-30.66014099 -89.96903992]
[-17.33093834 -98.46067810]
[-1.91957355 -94.95848846]
[6.43066549 -81.54025269]
[2.76572990 -66.16677094]
[10.82522392 -53.51589966]
[18.88471794 -40.86502838]
[26.94421196 -28.21415710]
[40.30814362 -21.63733292]
[41.19739914 -5.84113789]
[55.74924088 -2.87812185]
[64.10292816 9.83685017]
[60.89638138 25.08007240]
[68.95587158 37.73094177]
[77.01536560 50.38181686]
[85.07485962 63.03268814]
[93.13435364 75.68355560]
[101.19384766 88.33442688]
[106.23592377 90.21758270]
[109.85576630 94.12213898]
[124.62788391 96.72686005]
[139.39999390 99.33158112]
[154.17211914 101.93630981]
[169.10620117 96.71292877]
[180.29655457 106.54274750]
[194.21008301 98.55570221]
[209.07598877 104.58765411]
[213.49040222 120.01142120]
[204.06697083 132.99519348]
[188.03454590 133.57894897]
[177.69183350 121.31486511]
[163.81434631 126.72454834]
[151.56739807 116.70841980]
[136.79527283 114.10369873]
[122.02316284 111.49897766]
[107.25104523 108.89425659]
[116.11131287 120.99779510]
[121.29319000 135.07431030]
[122.39540100 150.03375244]
[119.33261108 164.71774292]
[112.34197998 177.98918152]
[101.96484375 188.82037354]
[89.00476074 196.37261963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[48 64]
[49 63]
[50 62]
[51 61]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
