%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUAGGGUAUAGGUGAUAGAGAUGUGUUGAUGGUUUUAAGUACUGUGAAGGAAUGUUUUAAAGGUU\
) } def
/len { sequence length } bind def

/coor [
[184.98944092 290.53283691]
[194.52757263 278.72656250]
[187.02757263 265.73617554]
[179.52757263 252.74578857]
[172.02757263 239.75541687]
[164.52757263 226.76502991]
[157.02757263 213.77464294]
[149.52757263 200.78427124]
[142.02757263 187.79388428]
[128.96324158 180.64039612]
[128.76385498 164.82044983]
[121.26384735 151.83006287]
[113.76384735 138.83969116]
[106.26384735 125.84930420]
[98.76384735 112.85892487]
[90.43029785 100.38687897]
[81.29887390 88.48657990]
[72.16744995 76.58628082]
[63.03602982 64.68597412]
[48.49660492 58.44773483]
[46.88714600 43.64034271]
[37.75572205 31.74003983]
[23.21629906 25.50179863]
[21.60683823 10.69440460]
[12.47541714 -1.20589590]
[-3.22440720 -3.02002144]
[-12.97747421 -15.45598698]
[-10.99746227 -31.13575363]
[1.54092324 -40.75679398]
[17.19888115 -38.61111832]
[26.68682098 -25.97171402]
[24.37571716 -10.33731747]
[33.50713730 1.56298280]
[47.39342499 6.95003653]
[49.65602493 22.60861969]
[58.78744507 34.50891876]
[72.67372894 39.89597321]
[74.93633270 55.55455780]
[84.06774902 67.45485687]
[93.19917297 79.35515594]
[102.33059692 91.25545502]
[106.41458130 92.30641174]
[109.93177032 95.30871582]
[111.95082855 99.91918945]
[111.75422668 105.35892487]
[119.25422668 118.34930420]
[126.75422668 131.33969116]
[134.25422668 144.33006287]
[141.75422668 157.32044983]
[155.35501099 165.40309143]
[155.01794434 180.29388428]
[162.51794434 193.28427124]
[170.01794434 206.27464294]
[177.51794434 219.26502991]
[185.01794434 232.25541687]
[192.51794434 245.24578857]
[200.01794434 258.23617554]
[207.51794434 271.22656250]
[222.51156616 268.86941528]
[237.34335327 272.09161377]
[250.00744629 280.45733643]
[258.79110718 292.83520508]
[262.50643921 307.55120850]
[260.65100098 322.61511230]
[253.47566223 335.98968506]
[241.95086670 345.86611938]
[227.63523865 350.90866089]
[212.46485901 350.43539429]
[198.49139404 344.51031494]
[187.60462952 333.93475342]
[181.27691650 320.13891602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 41]
[17 40]
[18 39]
[19 38]
[21 36]
[22 35]
[24 33]
[25 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
