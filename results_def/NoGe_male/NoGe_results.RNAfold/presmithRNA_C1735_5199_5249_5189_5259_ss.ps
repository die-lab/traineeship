%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAUUAAGCUUUACCUUUGUUUAGUGGGCCUGGUCUUUUAUGUAUUUAGGCUUGCUUUAAAAGGUUUGG\
) } def
/len { sequence length } bind def

/coor [
[54.65350342 267.80432129]
[49.94290543 282.36691284]
[38.99619675 293.06402588]
[24.32885742 297.43756104]
[9.31132984 294.48248291]
[-2.60546708 284.87786865]
[-8.68313980 270.83078003]
[-7.52508402 255.56915283]
[0.60258716 242.59997559]
[13.83219528 234.90348816]
[29.12367249 234.24826050]
[35.46294785 220.65364075]
[30.14322853 206.78872681]
[36.37849426 192.91154480]
[50.95737457 187.42573547]
[57.29664612 173.83111572]
[63.63592148 160.23651123]
[69.97519684 146.64189148]
[76.31446838 133.04727173]
[82.65373993 119.45265198]
[75.27854919 108.25520325]
[74.44589233 94.87300873]
[80.37612915 82.84767914]
[91.49983215 75.36170959]
[104.87310028 74.39626312]
[111.79932404 61.09109879]
[118.72555542 47.78593826]
[125.65178680 34.48077393]
[132.57801819 21.17561340]
[139.50424194 7.87045050]
[146.43046570 -5.43471193]
[153.35670471 -18.73987389]
[160.28292847 -32.04503632]
[167.20916748 -45.35020065]
[174.13539124 -58.65536118]
[172.05752563 -78.48979187]
[188.23645020 -88.72389984]
[181.95761108 -103.22740936]
[187.85093689 -117.89179230]
[202.42001343 -124.01693726]
[217.02128601 -117.96889496]
[222.99205017 -103.33586884]
[216.78997803 -88.79936981]
[202.09463501 -82.98364258]
[206.96665955 -73.56861115]
[205.65238953 -62.82425308]
[198.35978699 -54.52511978]
[187.44055176 -51.72913361]
[180.51432800 -38.42396927]
[173.58808899 -25.11880684]
[166.66186523 -11.81364536]
[159.73564148 1.49151742]
[152.80940247 14.79667950]
[145.88317871 28.10184288]
[138.95693970 41.40700531]
[132.03071594 54.71216583]
[125.10449219 68.01732635]
[118.17826080 81.32249451]
[125.68589020 95.58033752]
[123.37551117 111.52752686]
[112.13022614 123.06850433]
[96.24835968 125.79193115]
[89.90908813 139.38655090]
[83.56980896 152.98115540]
[77.23053741 166.57577515]
[70.89126587 180.17039490]
[64.55199432 193.76501465]
[69.72074890 208.45928955]
[63.09815979 222.15585327]
[49.05756378 226.99291992]
[42.71828842 240.58753967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 71]
[12 70]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
