%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGUUUGGAAGAAAUAAGCGGUUUCUACUUUUUGUAUCAUGGUUUGGUGAGUUUCAAAAUUUAUCUUAU\
) } def
/len { sequence length } bind def

/coor [
[116.77202606 292.38119507]
[124.82013702 278.09274292]
[124.16584778 263.10702515]
[123.51155853 248.12129211]
[122.85726166 233.13555908]
[122.20297241 218.14984131]
[119.92111969 203.32441711]
[116.03884125 188.83552551]
[112.15655518 174.34664917]
[108.27426910 159.85775757]
[104.39198303 145.36886597]
[100.50969696 130.87998962]
[85.05882263 127.02951050]
[73.57973480 115.99382782]
[69.12389374 100.70654297]
[72.87579346 85.23143768]
[83.83807373 73.68222809]
[79.32748413 59.37647247]
[74.81689453 45.07072067]
[70.30631256 30.76496506]
[65.79572296 16.45921135]
[54.26673508 5.62440395]
[57.81876373 -8.84046268]
[53.30817795 -23.14621735]
[40.56304169 -28.05022430]
[33.16291046 -39.29286957]
[33.68307877 -52.54568481]
[41.70057678 -62.86330414]
[37.81829071 -77.35218811]
[33.93600464 -91.84107971]
[20.81716347 -101.07555389]
[20.00137138 -117.09785461]
[32.11443710 -127.61703491]
[47.86425018 -124.56369019]
[55.16890335 -110.28007507]
[48.42489243 -95.72336578]
[52.30717850 -81.23447418]
[56.18946457 -66.74559021]
[71.01545715 -59.11536789]
[75.97800446 -42.84768677]
[67.61392975 -27.65680313]
[72.12451935 -13.35104942]
[83.33087921 -3.53948545]
[80.10147858 11.94862366]
[84.61206055 26.25437737]
[89.12265015 40.56013107]
[93.63323975 54.86588669]
[98.14382172 69.17163849]
[111.71234131 71.42283630]
[122.95796204 79.34170532]
[129.65036011 91.35770416]
[130.46223450 105.08772278]
[125.23258209 117.80870056]
[114.99858093 126.99769592]
[118.88086700 141.48658752]
[122.76315308 155.97547913]
[126.64543915 170.46435547]
[130.52772522 184.95324707]
[134.41000366 199.44213867]
[137.90753174 202.40931702]
[140.08171082 205.98078918]
[140.90425110 209.67181396]
[140.50581360 213.03794861]
[139.14910889 215.72319031]
[137.18869019 217.49554443]
[137.84298706 232.48127747]
[138.49728394 247.46699524]
[139.15156555 262.45272827]
[139.80586243 277.43844604]
[149.06866455 290.97109985]
[141.73742676 305.64025879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 42]
[24 41]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
