%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUUGGGGCUUGGGUAUUAAAAGAUGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAUUCGAAUCAG\
) } def
/len { sequence length } bind def

/coor [
[76.16960907 122.36246490]
[71.54344940 116.06835175]
[68.54312897 108.85619354]
[67.34005737 101.13804626]
[68.00297546 93.35487366]
[54.40835953 87.01560211]
[40.81374359 80.67633057]
[27.21912575 74.33705902]
[13.62450981 67.99777985]
[-1.06976521 73.16653442]
[-14.76633453 66.54395294]
[-19.60339737 52.50335312]
[-33.19801331 46.16408157]
[-46.79263306 39.82480621]
[-60.38724899 33.48553085]
[-73.98186493 27.14625740]
[-87.57648468 20.80698395]
[-101.30615234 14.76578426]
[-115.16434479 9.02553272]
[-129.02253723 3.28528094]
[-145.20191956 5.96109009]
[-155.39839172 -6.88273907]
[-149.12271118 -22.03357506]
[-132.83074951 -23.90553856]
[-123.28228760 -10.57291222]
[-109.42409515 -4.83266068]
[-95.56590271 0.90759104]
[-87.94453430 0.54490042]
[-81.23720551 7.21236753]
[-67.64259338 13.55164146]
[-54.04797363 19.89091492]
[-40.45335770 26.23019028]
[-26.85873985 32.56946182]
[-13.26412392 38.90873718]
[0.60080296 33.58901978]
[14.47798252 39.82428360]
[19.96378326 54.40316391]
[33.55839920 60.74243927]
[47.15301895 67.08171082]
[60.74763489 73.42098999]
[74.34224701 79.76026154]
[94.93801880 67.71465302]
[118.23208618 72.87882233]
[131.80749512 92.50000000]
[146.80749512 92.50000000]
[156.64469910 83.84511566]
[169.33280945 84.33325958]
[177.90991211 93.13879395]
[192.89562988 93.79308319]
[207.88134766 94.44737244]
[222.86708069 95.10166168]
[234.34843445 84.24099731]
[250.14408875 84.76339722]
[260.88275146 96.35894012]
[260.19338989 112.14818573]
[248.48495483 122.76366425]
[232.70387268 121.90739441]
[222.21278381 110.08738708]
[207.22706604 109.43309784]
[192.24133301 108.77880859]
[177.25561523 108.12451935]
[162.34103394 117.11145782]
[146.80749512 107.50000000]
[131.80749512 107.50000000]
[129.11900330 114.83410645]
[124.76682281 121.32068634]
[118.99961090 126.58913422]
[112.14688110 130.33842468]
[104.60015106 132.35437012]
[96.79059601 132.52178955]
[89.16440582 130.83110046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 27]
[19 26]
[20 25]
[44 64]
[45 63]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
