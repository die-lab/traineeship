%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAGGCCCGAUGGCUCUUUGGUCUCAGUGGGGAUUUCAGGAUGCUGCUUCUCCUUUGAUGGAGCAGCUUA\
) } def
/len { sequence length } bind def

/coor [
[105.49739838 161.70109558]
[91.44145966 156.46368408]
[82.75703430 144.23336792]
[82.44521332 129.23660278]
[90.61403656 116.65564728]
[78.71373749 125.78707123]
[66.81343842 134.91848755]
[54.91313553 144.04991150]
[49.14076996 159.39956665]
[32.91944885 161.80805969]
[22.93627930 148.79772949]
[29.46109009 133.75250244]
[45.78171539 132.14961243]
[57.68201447 123.01818848]
[69.58231354 113.88676453]
[81.48261261 104.75534821]
[83.76446533 89.92992401]
[75.16082001 77.64264679]
[66.55717468 65.35536194]
[49.77426529 58.14394760]
[48.58127975 40.77193451]
[39.44985580 28.87163544]
[30.31843567 16.97133446]
[21.18701363 5.07103491]
[12.05559254 -6.82926512]
[2.92417097 -18.72956467]
[-12.42548084 -24.50193214]
[-14.83397198 -40.72325134]
[-1.82365382 -50.70642090]
[13.22157383 -44.18161011]
[14.82447147 -27.86098671]
[23.95589256 -15.96068668]
[33.08731461 -4.06038666]
[42.21873474 7.83991337]
[51.35015488 19.74021339]
[60.48157883 31.64051437]
[72.61426544 33.61581802]
[80.29174042 43.72931671]
[78.84445190 56.75171661]
[87.44809723 69.03899384]
[96.05174255 81.32627869]
[105.44402313 82.96891785]
[112.27165222 88.71232605]
[115.07395172 96.53559875]
[129.84606934 99.14031982]
[144.61819458 101.74504089]
[159.39030457 104.34976196]
[174.16241455 106.95449066]
[188.93453979 109.55921173]
[203.70664978 112.16393280]
[218.47877502 114.76865387]
[233.30419922 117.05050659]
[248.17585754 119.00839996]
[263.11138916 112.23623657]
[276.28466797 122.00337982]
[274.14413452 138.26223755]
[258.89181519 144.28707886]
[246.21797180 133.88006592]
[231.34629822 131.92218018]
[224.07849121 134.24507141]
[215.87405396 129.54077148]
[201.10192871 126.93605042]
[186.32981873 124.33132935]
[171.55769348 121.72660828]
[156.78558350 119.12187958]
[142.01345825 116.51715851]
[127.24134827 113.91243744]
[112.46923065 111.30771637]
[125.52406311 118.69496155]
[132.17239380 132.14114380]
[130.11674500 146.99961853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[17 41]
[18 40]
[19 39]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
