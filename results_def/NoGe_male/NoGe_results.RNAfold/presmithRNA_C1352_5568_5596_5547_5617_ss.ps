%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGGGAGUAGUACGAAAGGACCCUCUUUUUGGAUGGUGGUCUAUGGACUGUGUUAGCAAAUUUAUGCGG\
) } def
/len { sequence length } bind def

/coor [
[81.22701263 116.33350372]
[77.01721191 109.53938293]
[62.07429504 110.84671783]
[47.13137436 112.15405273]
[32.18845367 113.46138763]
[17.24553108 114.76873016]
[2.30261159 116.07606506]
[-12.64030933 117.38339996]
[-27.58322906 118.69073486]
[-36.62866974 128.17005920]
[-49.31104279 128.78961182]
[-58.62295532 120.76512909]
[-73.60868073 121.41941833]
[-87.05821991 129.75131226]
[-100.11087036 122.57653046]
[-113.64351654 131.83932495]
[-128.31269836 124.50808716]
[-129.02801514 108.12454987]
[-115.05361938 99.54269409]
[-100.76516724 107.59080505]
[-88.38750458 99.30570984]
[-74.26296997 106.43369293]
[-59.27724457 105.77940369]
[-45.20267487 95.52677155]
[-28.89056587 103.74781799]
[-13.94764519 102.44047546]
[0.99527538 101.13314056]
[15.93819618 99.82580566]
[30.88111687 98.51847076]
[45.82403564 97.21113586]
[60.76695633 95.90380096]
[75.70987701 94.59645844]
[89.48361206 77.44753265]
[111.47403717 77.91935730]
[122.08064270 67.31275940]
[132.68724060 56.70615768]
[143.29383850 46.09955597]
[144.12986755 33.02367783]
[153.44688416 24.39700317]
[165.73826599 24.55852699]
[176.79742432 14.42467403]
[187.85658264 4.29082108]
[198.91574097 -5.84303188]
[203.32833862 -21.63736916]
[219.27801514 -25.45047569]
[230.35711670 -13.35975647]
[225.16841125 2.19689465]
[209.04959106 5.21612835]
[197.99043274 15.34998131]
[186.93127441 25.48383522]
[175.87211609 35.61768723]
[171.68063354 52.51861954]
[153.90045166 56.70615768]
[143.29383850 67.31275940]
[132.68724060 77.91935730]
[122.08064270 88.52596283]
[124.87797546 100.54283905]
[121.55913544 112.42626190]
[131.69299316 123.48542023]
[141.82684326 134.54458618]
[157.62503052 134.98347473]
[168.42485046 146.52207947]
[167.81895447 162.31475830]
[156.16680908 172.99197388]
[140.38143921 172.21914673]
[129.82800293 160.45475769]
[130.76768494 144.67843628]
[120.63382721 133.61927795]
[110.49997711 122.56011200]
[102.80614471 124.72516632]
[94.82280731 124.33937073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[12 23]
[13 22]
[15 20]
[34 56]
[35 55]
[36 54]
[37 53]
[40 51]
[41 50]
[42 49]
[43 48]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
