%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGGGCUUACCAGGGGUUUCAUACUGGUCAGGUUUCUGUUGGGCUUCGUUGGGGCAUGAUUCUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[68.97507477 124.67678833]
[77.32460022 112.21542358]
[90.37983704 104.83074188]
[76.07408142 100.32015228]
[61.76832581 95.80957031]
[47.46257401 91.29898071]
[33.15681839 86.78839111]
[17.66870880 90.01779938]
[7.85714531 78.81143951]
[-6.44860888 74.30084991]
[-21.93671799 77.53025055]
[-31.74828148 66.32389832]
[-46.05403519 61.81330872]
[-60.35979080 57.30271912]
[-74.66554260 52.79213333]
[-88.97129822 48.28154755]
[-100.24069977 58.71688080]
[-115.22150421 62.10379028]
[-129.88394165 57.53121948]
[-140.28390503 46.22916412]
[-143.62384033 31.23782158]
[-139.00532532 16.58978653]
[-127.67073059 6.22530603]
[-112.66899109 2.93237495]
[-98.03550720 7.59677458]
[-87.70660400 18.96380615]
[-84.46070862 33.97579193]
[-70.15496063 38.48637772]
[-55.84920502 42.99696732]
[-41.54344940 47.50755310]
[-27.23769569 52.01813889]
[-12.77282906 48.46611023]
[-1.93802202 59.99509811]
[12.36773205 64.50568390]
[26.83259773 60.95365524]
[37.66740417 72.48264313]
[51.97315979 76.99322510]
[66.27891541 81.50381470]
[80.58467102 86.01440430]
[94.89041901 90.52498627]
[109.85830688 91.50603485]
[124.63042450 88.90131378]
[139.40254211 86.29659271]
[148.47470093 73.63430023]
[163.49284363 71.20317841]
[175.50848389 79.93013763]
[190.28060913 77.32541656]
[205.05271912 74.72068787]
[219.82482910 72.11596680]
[234.59695435 69.51124573]
[249.14552307 60.80632782]
[261.53768921 72.37656403]
[253.85011292 87.48741150]
[237.20167542 84.28336334]
[222.42955017 86.88808441]
[207.65744019 89.49280548]
[192.88533020 92.09753418]
[178.11320496 94.70225525]
[169.80699158 107.01250458]
[154.86306763 109.86450195]
[142.00726318 101.06870270]
[127.23514557 103.67343140]
[112.46302795 106.27815247]
[124.44327545 115.30442810]
[131.09445190 128.74920654]
[130.99992371 143.74890137]
[124.17984772 157.10877991]
[112.08679962 165.98336792]
[97.29644775 168.48246765]
[82.95895386 164.07380676]
[72.12802124 153.69638062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[9 34]
[10 33]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[41 63]
[42 62]
[43 61]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
