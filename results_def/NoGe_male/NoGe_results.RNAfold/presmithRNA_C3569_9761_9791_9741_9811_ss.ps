%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCGGAAUUCUGGGGGAUAACGUGUGGGGGUGGCAGGGCGGGUUAGGGAUACUAUUAGGACAUGGUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 304.53869629]
[82.21823120 288.85119629]
[92.50000000 276.53598022]
[92.50000000 261.53598022]
[92.50000000 246.53598022]
[84.76270294 233.80870056]
[92.50000000 220.00852966]
[81.81912994 209.69085693]
[81.60544586 194.47871399]
[92.50000000 183.34559631]
[92.50000000 168.34559631]
[92.50000000 153.34559631]
[92.50000000 138.34559631]
[92.50000000 123.34559631]
[92.50000000 108.34559631]
[92.17277527 93.34916687]
[91.51848602 78.36344147]
[75.08979797 65.78560638]
[72.62863922 45.51998520]
[85.22382355 29.80642700]
[81.97722626 15.16198635]
[78.73063660 0.51754600]
[75.48403931 -14.12689400]
[64.94324493 -25.92528915]
[69.74245453 -40.02553177]
[66.49585724 -54.66997147]
[63.24926376 -69.31441498]
[49.17511749 -75.57736969]
[41.57629776 -88.77249908]
[43.18527985 -103.73495483]
[53.17664337 -114.74906921]
[41.70463943 -126.46765137]
[46.37723160 -142.18702698]
[62.38765335 -145.73646545]
[73.26575470 -133.46458435]
[67.82108307 -117.99566650]
[81.53109741 -112.23602295]
[89.31273651 -99.35540771]
[88.00236511 -84.18516541]
[77.89369965 -72.56100464]
[81.14029694 -57.91656494]
[84.38689423 -43.27212524]
[94.69547272 -32.52119827]
[90.12847900 -17.37348747]
[93.37507629 -2.72904825]
[96.62166595 11.91539192]
[99.86826324 26.55983162]
[109.59022522 29.12114525]
[117.64815521 35.23202515]
[122.79700470 44.00503540]
[124.21968079 54.13729477]
[121.65640259 64.10391998]
[115.45071411 72.38750458]
[106.50421143 77.70915222]
[107.15850067 92.69487000]
[110.72166443 100.23149872]
[107.50000000 108.34559631]
[107.50000000 123.34559631]
[107.50000000 138.34559631]
[107.50000000 153.34559631]
[107.50000000 168.34559631]
[107.50000000 183.34559631]
[118.39455414 194.47871399]
[118.18087006 209.69085693]
[107.50000000 220.00852966]
[115.23729706 233.80870056]
[107.50000000 246.53598022]
[107.50000000 261.53598022]
[107.50000000 276.53598022]
[117.78176880 288.85119629]
[114.42288971 304.53869629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[7 65]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 55]
[17 54]
[20 47]
[21 46]
[22 45]
[23 44]
[25 42]
[26 41]
[27 40]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
