%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUAGGUGGCUAAAUUAGUGUUGGUGGGUGAAAUCUGUAAAAUUCUUUUUCUUUUUUGCUUCCUGUUG\
) } def
/len { sequence length } bind def

/coor [
[78.60524750 316.90194702]
[64.24211121 311.27133179]
[55.22172928 298.75588989]
[54.42248535 283.34924316]
[62.09940720 269.96759033]
[75.80281830 262.88098145]
[77.11015320 247.93806458]
[78.41749573 232.99514771]
[79.72483063 218.05221558]
[73.12622833 204.69903564]
[82.03684998 191.62571716]
[83.34418488 176.68280029]
[84.65151978 161.73988342]
[82.01382446 154.58030701]
[86.35577393 146.17848206]
[88.31365967 131.30680847]
[90.27155304 116.43513489]
[81.53439331 104.87623596]
[83.42565918 90.51067352]
[94.85677338 81.60697174]
[96.81466675 66.73529816]
[87.62634277 58.61727142]
[83.68166351 47.13716125]
[85.89482117 35.32568359]
[93.57085419 26.23871994]
[104.61749268 22.16671371]
[107.86408234 7.52227259]
[103.29708862 -7.62543869]
[113.60567474 -18.37636566]
[116.85226440 -33.02080536]
[120.09886169 -47.66524506]
[123.34545898 -62.30968475]
[111.32138062 -71.71098328]
[104.57483673 -85.40210724]
[104.44535065 -100.66467285]
[110.95864105 -114.46829224]
[122.82147217 -124.07224274]
[137.67848206 -127.56965637]
[152.57980347 -124.26611328]
[164.56677246 -114.81753540]
[171.25935364 -101.09994507]
[171.32872009 -85.83699036]
[164.76113892 -72.05912781]
[152.86056519 -62.50196838]
[137.98989868 -59.06309128]
[134.74330139 -44.41865158]
[131.49670410 -29.77421188]
[128.25010681 -15.12977123]
[133.04931641 -1.02952790]
[122.50852203 10.76886654]
[119.26193237 25.41330719]
[130.03956604 39.91741943]
[127.05461121 58.05420303]
[111.68634033 68.69319153]
[109.72844696 83.56486511]
[118.46560669 95.12376404]
[116.57434082 109.48932648]
[105.14322662 118.39302826]
[103.18533325 133.26469421]
[101.22743988 148.13636780]
[99.59443665 163.04721069]
[98.28710175 177.99014282]
[96.97976685 192.93305969]
[103.48486328 207.35507202]
[94.66774750 219.35955811]
[93.36041260 234.30247498]
[92.05307770 249.24539185]
[90.74574280 264.18832397]
[103.01039124 273.54684448]
[108.24698639 288.05825806]
[104.78454590 303.09207153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[11 63]
[12 62]
[13 61]
[15 60]
[16 59]
[17 58]
[20 55]
[21 54]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[32 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
