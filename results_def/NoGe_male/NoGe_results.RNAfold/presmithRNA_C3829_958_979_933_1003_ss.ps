%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUGGUAUUAAGGUUUUUAGGUGAUUGGCCACCAUUCAUGGGGCAAAGGUGAAGUAUGAGGCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[93.66203308 134.89538574]
[92.15073395 119.97164917]
[85.22450256 133.27680969]
[86.48000336 149.62782288]
[72.79637146 158.66609192]
[58.25014877 151.09381104]
[57.80524826 134.70069885]
[71.91934204 126.35057831]
[78.84557343 113.04541779]
[66.38839722 121.40118408]
[52.96522141 128.09582520]
[38.04193497 129.61093140]
[23.54715919 125.75069427]
[11.35413265 117.01398468]
[3.03862572 104.52989960]
[-0.32470220 89.91182709]
[1.69880950 75.04894257]
[8.84765148 61.86204910]
[20.19793892 52.05537033]
[34.28281403 46.89627457]
[49.28201294 47.05149460]
[63.25710297 52.50097656]
[74.40200806 62.54045105]
[81.27645111 75.87258148]
[90.64443970 87.58756256]
[88.03971863 72.81544495]
[85.43499756 58.04332733]
[82.83027649 43.27120972]
[72.81414795 31.02426338]
[78.22383118 17.14677811]
[75.61911011 2.37466216]
[73.01438904 -12.39745426]
[64.30946350 -26.94601822]
[75.87970734 -39.33818817]
[90.99054718 -31.65061378]
[87.78649902 -15.00217724]
[90.39122772 -0.23006050]
[92.99594879 14.54205608]
[102.82576752 25.73240471]
[97.60238647 40.66648865]
[100.20711517 55.43860626]
[102.81183624 70.21072388]
[105.41655731 84.98283386]
[115.78925323 95.81829834]
[130.43370056 99.06488800]
[145.07814026 102.31148529]
[159.72257996 105.55808258]
[174.36701965 108.80467224]
[185.99118042 98.69600677]
[201.16142273 97.38564301]
[214.04202271 105.16728210]
[219.80166626 118.87729645]
[231.33360291 108.49489594]
[246.76922607 106.90715027]
[260.17324829 114.72457123]
[266.39151001 128.94120789]
[263.03302002 144.09045410]
[251.38912964 154.34715271]
[235.93717957 155.76734924]
[222.61875916 147.80499268]
[216.55506897 133.52172852]
[205.54096985 143.51309204]
[190.57850647 145.12208557]
[177.38337708 137.52325439]
[171.12042236 123.44911194]
[156.47598267 120.20252228]
[141.83154297 116.95592499]
[127.18709564 113.70932770]
[112.54265594 110.46273804]
[123.00344086 121.21318054]
[120.29794312 135.96716309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 9]
[3 8]
[25 43]
[26 42]
[27 41]
[28 40]
[30 38]
[31 37]
[32 36]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
