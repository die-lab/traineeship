%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGUUUUUACAUCAGGUCAAGGUGCAGCGUAUGGGGUGGUGGAGAUGGGUUACGUUUCUUUAGUUUUUG\
) } def
/len { sequence length } bind def

/coor [
[107.89252472 276.54351807]
[96.32421112 266.99499512]
[87.37982178 254.95347595]
[81.58012390 241.12007141]
[79.26277924 226.30014038]
[80.56272125 211.35658264]
[85.40425873 197.15940857]
[93.50550842 184.53524780]
[104.39479065 174.21907043]
[117.43811798 166.81152344]
[131.87606812 162.74388123]
[146.87213135 162.25335693]
[136.73828125 151.19419861]
[126.60442352 140.13504028]
[116.47057343 129.07588196]
[106.33672333 118.01672363]
[91.86594391 117.27985382]
[82.07696533 106.59706116]
[82.60411835 92.11713409]
[72.47026825 81.05797577]
[62.33641434 69.99880981]
[51.96371841 59.16335297]
[36.73442459 54.87625504]
[33.20598221 40.40561676]
[22.59938049 29.79901505]
[7.12401438 22.87446404]
[9.49394321 6.08697605]
[26.28143120 3.71704769]
[33.20598221 19.19241333]
[43.81258392 29.79901505]
[58.28322220 33.32745743]
[62.57032013 48.55675125]
[69.75034332 51.13824081]
[73.39557648 59.86495972]
[83.52942657 70.92411804]
[93.66327667 81.98327637]
[108.13405609 82.72014618]
[117.92303467 93.40293884]
[117.39588165 107.88286591]
[127.52973175 118.94202423]
[137.66358948 130.00119019]
[147.79743958 141.06034851]
[157.93128967 152.11950684]
[172.13523865 156.94110107]
[186.90736389 154.33638000]
[201.67947388 151.73165894]
[216.45159912 149.12693787]
[231.22370911 146.52221680]
[245.99581909 143.91748047]
[256.33853149 131.65341187]
[272.37097168 132.23715210]
[281.79440308 145.22093201]
[277.38000488 160.64469910]
[262.51409912 166.67665100]
[248.60055542 158.68960571]
[233.82843018 161.29432678]
[219.05632019 163.89904785]
[204.28419495 166.50376892]
[189.51208496 169.10848999]
[174.73997498 171.71321106]
[186.33569336 181.22842407]
[195.31466675 193.24417114]
[201.15411377 207.06085205]
[203.51405334 221.87403870]
[202.25709534 236.82128906]
[197.45639038 251.03231812]
[189.39147949 263.67971802]
[178.53190613 274.02716064]
[165.50993347 281.47219849]
[151.08374023 285.58132935]
[136.09324646 286.11532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[19 36]
[20 35]
[21 34]
[22 32]
[24 30]
[25 29]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
