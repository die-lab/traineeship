%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUCGCUGUUUUUCUUCCUGUUGGGUCUCCUUCGGUGCUUAGUCCUUUUUUGGUUGUGGUGGAAUCUG\
) } def
/len { sequence length } bind def

/coor [
[81.94871521 266.16674805]
[83.44031525 250.60046387]
[94.62495422 239.67170715]
[93.31761932 224.72879028]
[92.01028442 209.78585815]
[88.16941833 203.19309998]
[90.98643494 194.16493225]
[90.33214569 179.17921448]
[89.67785645 164.19348145]
[89.02355957 149.20776367]
[88.36927032 134.22204590]
[86.26184845 132.62728882]
[84.67627716 130.07051086]
[83.98596954 126.75189972]
[84.48369598 123.00324249]
[86.33831787 119.25585938]
[89.56392670 115.99514008]
[81.33927155 104.06613159]
[83.85534668 89.79673767]
[95.66395569 81.40013123]
[98.26868439 66.62802124]
[85.57835388 56.26485825]
[79.79275513 41.03547668]
[82.37171936 25.04356575]
[92.53440094 12.54899216]
[107.49240875 6.83306217]
[109.45030212 -8.03861046]
[111.40819550 -22.91028404]
[105.53837585 -37.60231400]
[114.87071991 -49.21078110]
[116.82861328 -64.08245087]
[108.09229279 -82.01005554]
[119.79522705 -97.16047668]
[108.93456268 -108.64183044]
[109.45696259 -124.43748474]
[121.05249786 -135.17616272]
[136.84175110 -134.48678589]
[147.45722961 -122.77835846]
[146.60095215 -106.99728394]
[134.78094482 -96.50618744]
[142.57928467 -89.32528687]
[145.01905823 -78.77938080]
[141.00473022 -68.48652649]
[131.70028687 -62.12456131]
[129.74240112 -47.25288773]
[135.75225830 -33.62458038]
[126.27986908 -20.95239067]
[124.32197571 -6.08071756]
[122.36408234 8.79095554]
[133.84463501 16.49091530]
[140.86279297 28.47793388]
[141.96902466 42.39122391]
[136.88476562 55.46113968]
[126.56963348 65.06052399]
[113.04079437 69.23274231]
[110.43607330 84.00485992]
[118.66072845 95.93386841]
[116.14465332 110.20326233]
[104.33604431 118.59986877]
[103.35499573 133.56774902]
[104.00928497 148.55346680]
[104.66357422 163.53919983]
[105.31786346 178.52491760]
[105.97216034 193.51063538]
[106.95320129 208.47853088]
[108.26054382 223.42144775]
[109.56787872 238.36436462]
[122.48035431 247.18490601]
[126.65235901 262.25567627]
[120.11399078 276.46075439]
[105.95246887 283.09289551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[17 59]
[20 56]
[21 55]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
