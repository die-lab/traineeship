%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUUAGUUUUUGGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAUUUGAUAGUAAUUUUACAUUAGU\
) } def
/len { sequence length } bind def

/coor [
[111.66434479 150.74240112]
[100.01992035 152.06579590]
[88.37448883 150.75129700]
[77.31805420 146.86552429]
[67.41079712 140.60531616]
[59.15465164 132.28784180]
[52.96792603 122.33453369]
[49.16405869 111.24964905]
[47.93577576 99.59481049]
[49.34530640 87.96049500]
[53.32123947 76.93615723]
[59.66213226 67.08034515]
[49.52827835 56.02118301]
[39.39442444 44.96202469]
[29.26057053 33.90286255]
[19.12671852 22.84370422]
[10.75091076 18.45176315]
[8.80502415 11.07406807]
[-0.83678997 -0.41659862]
[-10.47860432 -11.90726566]
[-20.12041855 -23.39793205]
[-29.76223183 -34.88859940]
[-44.70224762 -31.56376457]
[-59.47306824 -35.57393646]
[-70.68046570 -45.99760056]
[-75.74906158 -60.43948364]
[-73.51413727 -75.58094025]
[-64.48925018 -87.94257355]
[-50.74826050 -94.68377686]
[-35.44874573 -94.25546265]
[-22.10642242 -86.75606537]
[-13.78725910 -73.90888214]
[-12.40293789 -58.66610336]
[-18.27156639 -44.53041458]
[-8.62975121 -33.03974533]
[1.01206255 -21.54907990]
[10.65387630 -10.05841255]
[20.29569054 1.43225384]
[30.18587875 12.70985126]
[40.31973267 23.76901054]
[50.45358276 34.82817078]
[60.58743668 45.88733292]
[70.72129059 56.94649124]
[87.96049500 49.34530640]
[106.77619934 48.37703323]
[124.70460510 54.16846085]
[139.39810181 65.96123505]
[148.93266296 82.21116638]
[152.05979919 100.79043579]
[148.37004089 119.26620483]
[161.36042786 126.76620483]
[174.35079956 134.26620483]
[187.34118652 141.76620483]
[200.33155823 149.26620483]
[209.64039612 150.93621826]
[213.71473694 157.38731384]
[226.36561584 165.44680786]
[239.01647949 173.50630188]
[255.41470337 173.68066406]
[263.22595215 188.09996033]
[254.41470337 201.93086243]
[238.04519653 200.94531250]
[230.95698547 186.15716553]
[218.30612183 178.09767151]
[205.65524292 170.03817749]
[192.83155823 162.25657654]
[179.84118652 154.75657654]
[166.85079956 147.25657654]
[153.86042786 139.75657654]
[140.87004089 132.25657654]
[132.62026978 140.58035278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
