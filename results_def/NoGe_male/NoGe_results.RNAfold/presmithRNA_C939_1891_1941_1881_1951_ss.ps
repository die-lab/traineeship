%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUCUAUUAAGGCCGUGGGGCACCAGUGGUACUGGUCUUAUGAGUAUUCUGAUUUUUUGGACUUGGAGU\
) } def
/len { sequence length } bind def

/coor [
[89.53148651 291.32916260]
[88.75047302 276.04360962]
[95.17300415 262.15081787]
[107.32323456 252.84326172]
[104.71850586 238.07113647]
[102.11378479 223.29902649]
[99.50906372 208.52691650]
[96.90434265 193.75479126]
[84.59408569 185.44857788]
[81.74209595 170.50465393]
[90.53788757 157.64884949]
[87.93316650 142.87672424]
[85.32844543 128.10461426]
[74.05084991 118.21442413]
[59.06512451 117.56013489]
[44.07939911 116.90584564]
[29.79094315 124.95395660]
[15.81654358 116.37210083]
[16.53186417 99.98856354]
[31.20104599 92.65731812]
[44.73369217 101.92012024]
[59.71941376 102.57441711]
[74.70513916 103.22870636]
[78.53389740 90.76438141]
[87.46710968 82.85534668]
[98.13108826 80.98609924]
[102.64167786 66.68034363]
[107.15226746 52.37458801]
[106.76789856 42.92495728]
[112.18421936 37.55092239]
[117.31452179 23.45553207]
[122.44482422 9.36014366]
[127.57512665 -4.73524570]
[132.70542908 -18.83063507]
[137.83573914 -32.92602539]
[135.28498840 -48.54025650]
[146.90866089 -57.85366821]
[152.03895569 -71.94905853]
[151.77455139 -88.90093994]
[167.99076843 -93.84775543]
[177.23335266 -79.63470459]
[166.13433838 -66.81875610]
[161.00404358 -52.72336578]
[163.92173767 -38.11732864]
[151.93112183 -27.79572296]
[146.80082703 -13.70033264]
[141.67051697 0.39505631]
[136.54022217 14.49044609]
[131.40991211 28.58583450]
[126.27960968 42.68122482]
[121.45802307 56.88517761]
[116.94743347 71.19093323]
[112.43684387 85.49668121]
[120.93185425 107.69887543]
[100.10056305 125.49989319]
[102.70528412 140.27200317]
[105.31000519 155.04412842]
[117.97229004 164.11628723]
[120.40341949 179.13442993]
[111.67646027 191.15007019]
[114.28118134 205.92219543]
[116.88590240 220.69430542]
[119.49062347 235.46641541]
[122.09534454 250.23854065]
[136.69619751 254.82914734]
[147.48301697 265.68746948]
[151.97708130 280.31832886]
[149.14567566 295.35968018]
[139.63943481 307.35510254]
[125.64283752 313.54812622]
[110.37219238 312.51568604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[11 57]
[12 56]
[13 55]
[14 23]
[15 22]
[16 21]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
