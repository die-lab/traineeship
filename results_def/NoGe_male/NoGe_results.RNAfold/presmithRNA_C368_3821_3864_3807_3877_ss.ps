%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGAGACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGGC\
) } def
/len { sequence length } bind def

/coor [
[85.62021637 143.86590576]
[78.69398499 157.17106628]
[71.76776123 170.47624207]
[73.02326202 186.82725525]
[59.33962631 195.86550903]
[44.79340363 188.29322815]
[44.34850311 171.90011597]
[58.46259689 163.55000305]
[65.38882446 150.24484253]
[72.31505585 136.93968201]
[65.58222961 130.76382446]
[60.19756317 123.38294983]
[56.37197876 115.08614349]
[54.25531769 106.19841003]
[53.93050003 97.06788635]
[55.41024399 88.05220795]
[58.63658524 79.50453186]
[63.48315048 71.75967407]
[69.76010132 65.12100220]
[77.22155762 59.84855270]
[85.57525635 56.14885712]
[94.49397278 54.16682434]
[95.14826202 39.18110275]
[95.80255890 24.19537926]
[96.45684814 9.20965576]
[97.11113739 -5.77606726]
[89.98315430 -19.90060043]
[98.26824951 -32.27826309]
[98.92253876 -47.26398849]
[91.79455566 -61.38851929]
[100.07965088 -73.76618195]
[100.73394012 -88.75190735]
[88.50677490 -98.30575562]
[84.26277924 -113.23117828]
[89.63385773 -127.78903198]
[102.55471039 -136.38153076]
[118.05701447 -135.70469666]
[130.17982483 -126.01876068]
[134.26165771 -111.04817963]
[128.73297119 -96.54944611]
[115.71966553 -88.09761810]
[115.06537628 -73.11189270]
[122.24015045 -60.05923843]
[113.90826416 -46.60969543]
[113.25397491 -31.62397194]
[120.42874908 -18.57131767]
[112.09686279 -5.12177658]
[111.44257355 9.86394691]
[110.78827667 24.84967041]
[110.13398743 39.83539200]
[109.47969818 54.82111740]
[126.55048370 62.23668289]
[139.30537415 75.79083252]
[145.67102051 93.28028870]
[144.61264038 111.86206055]
[136.30229187 128.51559448]
[151.33009338 133.46290588]
[154.22398376 148.07368469]
[164.35783386 159.13284302]
[174.49168396 170.19200134]
[184.62553406 181.25115967]
[200.41987610 185.66375732]
[204.23298645 201.61343384]
[192.14225769 212.69253540]
[176.58561707 207.50382996]
[173.56637573 191.38500977]
[163.43252563 180.32585144]
[153.29867554 169.26669312]
[143.16481018 158.20753479]
[128.86186218 154.05125427]
[125.24313354 138.64945984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 45]
[29 44]
[31 42]
[32 41]
[56 71]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
