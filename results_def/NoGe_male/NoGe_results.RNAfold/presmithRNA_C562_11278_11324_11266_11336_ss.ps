%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGGACAAGAUCUUCGCUCUGUCGGUAUGGUCUGGGGGCGGGUGCCAGUGAUUGUUAGGUGUUUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[144.58401489 251.98713684]
[140.07344055 237.68139648]
[135.56285095 223.37564087]
[131.05226135 209.06988525]
[117.50621033 198.12846375]
[121.22524261 180.24441528]
[116.09494019 166.14903259]
[110.96463776 152.05363464]
[105.83433533 137.95825195]
[100.70403290 123.86286163]
[86.59674835 119.75562286]
[77.56649017 108.16513062]
[77.03384399 93.48175812]
[85.20057678 81.26744080]
[80.07027435 67.17205811]
[73.43594360 53.71896362]
[65.37644958 41.06809235]
[57.31695175 28.41722107]
[49.25745773 15.76634884]
[41.19796371 3.11547709]
[33.13846970 -9.53539467]
[25.07897758 -22.18626595]
[18.95524597 -25.83543396]
[16.25018311 -31.28760147]
[16.92468643 -36.30991364]
[9.99845695 -49.61507416]
[3.07222748 -62.92023849]
[-12.07406235 -67.43304443]
[-19.51947594 -81.37368774]
[-14.84678078 -96.47141266]
[-0.82820565 -103.76902771]
[14.21927834 -98.93696594]
[21.36826706 -84.84202576]
[16.37738991 -69.84646606]
[23.30361938 -56.54130554]
[30.22984886 -43.23614120]
[37.72984695 -30.24575996]
[45.78934097 -17.59488869]
[53.84883499 -4.94401693]
[61.90832901 7.70685434]
[69.96782684 20.35772705]
[78.02732086 33.00859833]
[86.08681488 45.65946960]
[88.70927429 45.98685455]
[91.36080933 47.40830231]
[93.61793518 49.93714905]
[95.06121826 53.43244171]
[95.32875824 57.60508728]
[94.16566467 62.04175186]
[99.29596710 76.13713837]
[113.40325165 80.24437714]
[122.43350983 91.83486938]
[122.96615601 106.51824188]
[114.79942322 118.73255920]
[119.92972565 132.82794189]
[125.06002808 146.92333984]
[130.19033813 161.01872253]
[135.32063293 175.11412048]
[146.81808472 181.39790344]
[150.69895935 193.48779297]
[145.35801697 204.55929565]
[149.86860657 218.86505127]
[154.37919617 233.17080688]
[158.88977051 247.47656250]
[173.64715576 252.27230835]
[182.74000549 264.84606934]
[182.67193604 280.36300659]
[173.46910095 292.85650635]
[158.67021179 297.52258301]
[143.96571350 292.56701660]
[135.00981140 279.89535522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[14 50]
[15 49]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[25 36]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
