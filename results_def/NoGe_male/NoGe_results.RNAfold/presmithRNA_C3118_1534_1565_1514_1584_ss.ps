%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCUCUCUUGUUGUUUAGGGGUCUUUAGGUUAAUGUCCAAACUUGGGGCCUUCAAAGUCUCAGAUGUCU\
) } def
/len { sequence length } bind def

/coor [
[81.76065826 250.89140320]
[74.42941284 236.22222900]
[83.69221497 222.68957520]
[84.34650421 207.70385742]
[85.00080109 192.71812439]
[76.97631836 183.40621948]
[77.59587097 170.72384644]
[87.07518768 161.67840576]
[88.38252258 146.73548889]
[89.68986511 131.79255676]
[76.93214417 124.18553162]
[68.73044586 111.80173492]
[66.70464325 97.08703613]
[71.25485229 82.94765472]
[81.48236847 72.17620850]
[95.36721802 66.90010071]
[96.67455292 51.95718002]
[97.98188782 37.01425934]
[91.47679901 22.59225082]
[100.29390717 10.58775997]
[101.60124207 -4.35516071]
[102.90858459 -19.29808044]
[104.21591949 -34.24100113]
[101.79537964 -43.38344574]
[105.92016602 -49.80240250]
[107.87805939 -64.67407990]
[109.83595276 -79.54574585]
[111.79384613 -94.41741943]
[113.75173950 -109.28909302]
[115.70963287 -124.16076660]
[117.66752625 -139.03244019]
[119.62541962 -153.90411377]
[121.58331299 -168.77578735]
[110.23535156 -179.35894775]
[107.30833435 -194.59745789]
[113.92777252 -208.63180542]
[127.54834747 -216.06547546]
[142.93267822 -214.04010010]
[154.16516113 -203.33445740]
[156.92669678 -188.06507874]
[150.15539551 -174.10337830]
[136.45498657 -166.81788635]
[134.49708557 -151.94622803]
[132.53919983 -137.07455444]
[130.58129883 -122.20287323]
[128.62341309 -107.33119965]
[126.66551971 -92.45952606]
[124.70762634 -77.58786011]
[122.74973297 -62.71618271]
[120.79183960 -47.84450912]
[119.15883636 -32.93366623]
[117.85150146 -17.99074554]
[116.54416656 -3.04782438]
[115.23683167 11.89509583]
[121.83543396 25.24828720]
[112.92481232 38.32159424]
[111.61747742 53.26451492]
[110.31013489 68.20743561]
[123.06785583 75.81446838]
[131.26956177 88.19826508]
[133.29534912 102.91296387]
[128.74514771 117.05234528]
[118.51763153 127.82379150]
[104.63278198 133.09989929]
[103.32544708 148.04281616]
[102.01811218 162.98574829]
[110.23915863 179.29785156]
[99.98651886 193.37242126]
[99.33222961 208.35813904]
[98.67794037 223.34387207]
[106.72605133 237.63232422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[8 66]
[9 65]
[10 64]
[16 58]
[17 57]
[18 56]
[20 54]
[21 53]
[22 52]
[23 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
