%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUGGGUGGUUUUUCGGUUUUAAUUUUUUUAUAAUGCUGGUUUUAGGAUGUAGCAUCAGUGUGAGAUCUU\
) } def
/len { sequence length } bind def

/coor [
[80.06443024 211.51805115]
[66.69264221 218.31475830]
[52.00270844 215.28063965]
[42.41790009 203.74238586]
[42.12934494 188.74481201]
[30.22904396 197.87623596]
[18.32874489 207.00764465]
[16.51461792 222.70747375]
[4.07865334 232.46054077]
[-11.60111332 230.48052979]
[-21.22215462 217.94213867]
[-19.07647705 202.28419495]
[-6.43707371 192.79624939]
[9.19732285 195.10734558]
[21.09762192 185.97593689]
[32.99792099 176.84451294]
[43.37061691 166.00904846]
[51.97426605 153.72177124]
[60.57791138 141.43449402]
[69.18155670 129.14720154]
[77.78520203 116.85992432]
[86.38885498 104.57264709]
[71.55826569 106.82070160]
[57.15023422 102.64833832]
[45.81584930 92.82328033]
[39.64065552 79.15335083]
[39.76089478 64.15383148]
[46.15444565 50.58465576]
[57.64487839 40.94256592]
[72.11795044 37.00172043]
[86.91059113 39.48723602]
[99.30093384 47.94178009]
[107.00914764 60.80970383]
[108.61691284 75.72328949]
[103.82752228 89.93986511]
[117.42214203 83.60058594]
[131.01675415 77.26131439]
[144.61137390 70.92204285]
[158.20599365 64.58276367]
[171.80061340 58.24349213]
[185.39523315 51.90421677]
[198.98983765 45.56494522]
[208.22712708 32.72036362]
[223.03187561 34.35396194]
[236.62649536 28.01468849]
[250.22109985 21.67541313]
[257.03723145 7.15232706]
[272.67443848 3.56668711]
[285.13723755 13.66908932]
[284.86520386 29.70983696]
[272.06701660 39.38383865]
[256.56039429 35.27003098]
[242.96575928 41.60930634]
[229.37113953 47.94857788]
[221.10624695 60.33973312]
[205.32911682 59.15956116]
[191.73449707 65.49883270]
[178.13987732 71.83811188]
[164.54527283 78.17738342]
[150.95065308 84.51665497]
[137.35603333 90.85593414]
[123.76141357 97.19520569]
[110.16680145 103.53447723]
[98.67613220 113.17629242]
[90.07248688 125.46356964]
[81.46884155 137.75085449]
[72.86519623 150.03813171]
[64.26154327 162.32540894]
[55.65789795 174.61270142]
[70.65343475 174.24667358]
[82.59894562 183.31887817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
