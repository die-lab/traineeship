%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACUCAUGGUAAUGAUUUUGUCUCGGCCCUGACUGUUUAUGAAUGCUAGUUUUUUUUGGUUGUCUUGCU\
) } def
/len { sequence length } bind def

/coor [
[107.58152008 125.95033264]
[98.23181915 126.97726440]
[89.09614563 124.73873901]
[81.28032684 119.50572205]
[75.73043060 111.91164398]
[73.11823273 102.87571716]
[58.34611511 100.27099609]
[43.57399750 97.66627502]
[28.63991356 102.88964844]
[17.44956589 93.05982971]
[2.67744899 90.45510864]
[-12.09466743 87.85038757]
[-23.26683044 98.45646667]
[-38.36547852 100.42730713]
[-51.57325745 93.21492004]
[-57.92544174 79.76918030]
[-72.69755554 77.16445923]
[-87.46967316 74.55973816]
[-104.11811066 77.76378632]
[-111.80568695 62.65294266]
[-99.41351318 51.08270264]
[-84.86495209 59.78762054]
[-70.09283447 62.39234543]
[-55.32071686 64.99707031]
[-44.75290680 54.53478622]
[-29.87487221 52.27468109]
[-16.36084938 59.29070663]
[-9.48994446 73.07826996]
[5.28217173 75.68299103]
[20.05428886 78.28771210]
[33.93177032 72.87802887]
[46.17872238 82.89415741]
[60.95083618 85.49887848]
[75.72295380 88.10359955]
[91.28840637 74.40689087]
[111.97763824 75.76293182]
[125.62214661 91.37416840]
[140.60786438 90.71987915]
[147.00703430 80.26146698]
[157.62774658 74.38321686]
[169.64408875 74.51171112]
[179.92593384 80.49318695]
[185.85430908 90.66490936]
[200.84002686 91.31919861]
[212.43777466 80.92063141]
[227.62609863 81.79765320]
[237.46807861 92.91841125]
[252.45379639 93.57270050]
[267.43951416 94.22699738]
[282.42523193 94.88128662]
[297.41098022 95.53557587]
[308.89233398 84.67491150]
[324.68795776 85.19731140]
[335.42663574 96.79284668]
[334.73727417 112.58209229]
[323.02883911 123.19757080]
[307.24777222 122.34130096]
[296.75668335 110.52130127]
[281.77096558 109.86700439]
[266.78521729 109.21271515]
[251.79949951 108.55842590]
[236.81378174 107.90413666]
[226.04002380 118.12479401]
[210.83305359 117.67472839]
[200.18572998 106.30492401]
[185.20001221 105.65062714]
[172.78776550 118.78313446]
[154.40818787 118.99295807]
[141.26216125 105.70559692]
[126.27643585 106.35989380]
[122.50716400 114.97754669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 28]
[16 24]
[17 23]
[18 22]
[37 70]
[38 69]
[43 66]
[44 65]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
