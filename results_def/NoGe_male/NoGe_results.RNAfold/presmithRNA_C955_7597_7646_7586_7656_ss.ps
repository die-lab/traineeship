%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCAUGUUGGUCGUGGGUUGUACUAUGGUUCGUAUAUUUUUGUUCAUACUUGGAAUGUAGGGGUGGUUC\
) } def
/len { sequence length } bind def

/coor [
[29.48249245 189.59228516]
[15.60924625 188.90208435]
[3.47817326 182.27415466]
[-8.80910778 190.87780762]
[-21.09638786 199.48144531]
[-33.38366699 208.08509827]
[-45.67094803 216.68873596]
[-57.95822906 225.29238892]
[-62.14889145 240.77844238]
[-76.92591095 247.02499390]
[-90.95362091 239.24020386]
[-93.47116852 223.39591980]
[-82.54730225 211.64649963]
[-66.56187439 213.00511169]
[-54.27459717 204.40145874]
[-41.98731613 195.79782104]
[-29.70003510 187.19416809]
[-17.41275406 178.59053040]
[-5.12547350 169.98687744]
[-6.96222115 154.07963562]
[-0.57200229 139.29588318]
[12.42215919 129.62406921]
[28.60227966 127.72380829]
[43.65425491 134.19508362]
[55.55455780 125.06366730]
[67.45485687 115.93225098]
[79.35515594 106.80082703]
[91.25545502 97.66940308]
[92.30641174 93.58541870]
[95.30871582 90.06822968]
[99.91918945 88.04917145]
[105.35892487 88.24577332]
[118.34930420 80.74577332]
[126.43195343 67.14498901]
[141.32273865 67.48204803]
[154.31312561 59.98204803]
[167.30351257 52.48204803]
[180.29388428 44.98204803]
[193.28427124 37.48204803]
[206.27464294 29.98204803]
[219.26502991 22.48204803]
[232.25541687 14.98204899]
[240.90211487 -1.10847926]
[258.31198120 -0.78285491]
[270.96286011 -8.84234905]
[278.05108643 -23.63049507]
[294.42059326 -24.61604118]
[303.23184204 -10.78514004]
[295.42059326 3.63416147]
[279.02236938 3.80852270]
[266.37149048 11.86801720]
[263.34625244 23.78237915]
[252.60211182 30.54918289]
[239.75541687 27.97242928]
[226.76502991 35.47243118]
[213.77464294 42.97243118]
[200.78427124 50.47243118]
[187.79388428 57.97243118]
[174.80351257 65.47242737]
[161.81312561 72.97242737]
[148.82273865 80.47242737]
[141.66925049 93.53676605]
[125.84930420 93.73615265]
[112.85892487 101.23615265]
[100.38687897 109.56970215]
[88.48657990 118.70112610]
[76.58628082 127.83255005]
[64.68597412 136.96397400]
[52.78567886 146.09539795]
[55.33179474 160.02214050]
[51.58003998 173.60427856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[32 64]
[33 63]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
