%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUUGCCGAAGGCACAUGUAGAGGCUCCGGUUGCUGGUUCUAUGAUCCUGGCAGGUGUGUUGCUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[64.59687805 124.58071899]
[72.11022186 111.59805298]
[85.62050629 105.08020782]
[70.84838867 102.47548676]
[56.07627106 99.87075806]
[41.14218903 105.09413910]
[29.95183945 95.26432037]
[15.17972374 92.65959930]
[0.40760729 90.05487061]
[-14.36450863 87.45014954]
[-29.29859352 92.67353058]
[-40.48894119 82.84371185]
[-55.26105881 80.23898315]
[-70.19514465 85.46236420]
[-81.38549042 75.63254547]
[-96.31957245 80.85591888]
[-107.50992584 71.02610016]
[-121.42346191 79.01315308]
[-136.28936768 72.98119354]
[-140.70378113 57.55743027]
[-131.28034973 44.57365036]
[-115.24791718 43.98990250]
[-104.90519714 56.25398636]
[-91.02771759 50.84429932]
[-78.78076935 60.86042786]
[-64.90328217 55.45074081]
[-52.65633392 65.46687317]
[-37.88422012 68.07159424]
[-24.00673485 62.66190720]
[-11.75978661 72.67803192]
[3.01233006 75.28276062]
[17.78444672 77.88748169]
[32.55656433 80.49220276]
[46.43404770 75.08251953]
[58.68099594 85.09864807]
[73.45310974 87.70336914]
[88.22522736 90.30809021]
[102.32061768 85.17778778]
[111.96243286 73.68711853]
[114.90589142 58.14213562]
[129.01394653 53.36592102]
[138.65576172 41.87525558]
[144.20518494 25.85526276]
[161.13534546 26.75304604]
[164.95938110 43.27009964]
[150.14642334 51.51706696]
[140.50460815 63.00773621]
[138.25079346 77.73083496]
[123.45309448 83.32893372]
[113.81128693 94.81960297]
[113.72176361 96.58074188]
[113.41841125 98.25147247]
[127.01303101 104.59074402]
[140.60765076 110.93001556]
[154.20225525 117.26929474]
[167.79687500 123.60856628]
[183.30352783 119.49475861]
[196.10169983 129.16876221]
[196.37373352 145.20950317]
[183.91094971 155.31190491]
[168.27372742 151.72627258]
[161.45761108 137.20318604]
[147.86299133 130.86390686]
[134.26837158 124.52463531]
[120.67375183 118.18536377]
[107.07913971 111.84608459]
[114.40755463 124.93402863]
[113.11578369 139.87829590]
[103.65020752 151.51457214]
[89.28187561 155.82168579]
[74.97608948 151.31118774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[7 33]
[8 32]
[9 31]
[10 30]
[12 28]
[13 27]
[15 25]
[17 23]
[38 50]
[39 49]
[41 47]
[42 46]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
