%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCAGGGCGGGUUAGGGAUACUAUUAGGACAUGGUCUCUGCUCUUCGGCCAUGUUUGCGUUGGCUAAUG\
) } def
/len { sequence length } bind def

/coor [
[143.25039673 158.30093384]
[133.11654663 147.24177551]
[122.98268890 136.18261719]
[112.84883881 125.12345123]
[102.71498108 114.06429291]
[89.43927765 109.67711639]
[86.22585297 96.06956482]
[76.09200287 85.01040649]
[65.95815277 73.95124054]
[57.58234024 69.55930328]
[55.63645554 62.18160629]
[45.99464035 50.69094086]
[36.35282516 39.20027542]
[26.71101189 27.70960617]
[18.53475189 22.95649719]
[16.91252708 15.50094700]
[7.78110600 3.60064697]
[-1.35031557 -8.29965305]
[-10.48173714 -20.19995308]
[-19.61315918 -32.10025406]
[-26.03163147 -35.20181656]
[-29.20158958 -40.39747620]
[-28.96737671 -45.45946121]
[-37.02687073 -58.11033249]
[-45.08636475 -70.76120758]
[-53.14585876 -83.41207886]
[-68.62783051 -86.58763123]
[-77.25991821 -99.82630920]
[-73.92086029 -115.27384186]
[-60.59165573 -123.76548004]
[-45.18029022 -120.26328278]
[-36.83005142 -106.84504700]
[-40.49498749 -91.47157288]
[-32.43549347 -78.82070160]
[-24.37599945 -66.16983032]
[-16.31650543 -53.51895523]
[-7.71285820 -41.23167419]
[1.41856313 -29.33137512]
[10.54998493 -17.43107414]
[19.68140602 -5.53077459]
[28.81282806 6.36952543]
[38.20167923 18.06779289]
[47.84349442 29.55846024]
[57.48530960 41.04912567]
[67.12712097 52.53979111]
[77.01731110 63.81739044]
[87.15116119 74.87654877]
[97.28501892 85.93570709]
[110.56072235 90.32288361]
[113.77414703 103.93043518]
[123.90799713 114.98959351]
[134.04185486 126.04875946]
[144.17570496 137.10791016]
[154.30955505 148.16708374]
[164.91615295 158.77368164]
[175.97532654 168.90753174]
[187.03448486 179.04138184]
[202.43627930 182.66011047]
[206.59255981 196.96307373]
[217.65171814 207.09692383]
[233.77053833 210.11614990]
[238.95924377 225.67280579]
[227.88014221 237.76351929]
[211.93046570 233.95040894]
[207.51786804 218.15608215]
[196.45870972 208.02223206]
[181.84793091 205.12834167]
[176.90061951 190.10054016]
[165.84146118 179.96669006]
[154.78230286 169.83283997]
[149.75654602 169.18449402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[7 48]
[8 47]
[9 46]
[11 45]
[12 44]
[13 43]
[14 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[23 36]
[24 35]
[25 34]
[26 33]
[55 70]
[56 69]
[57 68]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
