%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAGUGUUGAACUUUUAAUUCAAUAAUGGCGUGGGCCCCAAGGCGGUCUCGUACUUUAAAAAAAAGGUC\
) } def
/len { sequence length } bind def

/coor [
[103.79185486 157.16564941]
[89.33298492 161.15827942]
[75.12899780 156.33679199]
[66.08840179 144.36734009]
[65.33537292 129.38626099]
[73.13014221 116.57057953]
[86.77940369 110.34901428]
[71.83647919 111.65634918]
[56.89355850 112.96368408]
[41.95063782 114.27101898]
[27.00771904 115.57836151]
[12.06479836 116.88569641]
[-2.87812209 118.19303131]
[-11.69866085 131.10551453]
[-26.76944160 135.27751160]
[-40.97450256 128.73913574]
[-47.60664749 114.57762146]
[-43.53438187 99.47958374]
[-30.68050385 90.57386780]
[-15.11422157 92.06546783]
[-4.18545818 103.25010681]
[10.75746250 101.94277191]
[25.70038223 100.63543701]
[40.64330292 99.32810211]
[55.58622360 98.02076721]
[70.52914429 96.71343231]
[85.47206116 95.40608978]
[87.81410980 90.21527100]
[91.98513794 86.13001251]
[97.48764038 83.78314972]
[103.61042023 83.59107208]
[111.66991425 70.94020081]
[119.72940826 58.28932953]
[121.80387878 49.06220245]
[128.42654419 45.27313614]
[137.03019714 32.98585510]
[145.63385010 20.69857216]
[154.23748779 8.41129208]
[162.84114075 -3.87598825]
[171.17468262 -16.34803200]
[171.34904480 -32.74625397]
[185.76835632 -40.55751419]
[199.59925842 -31.74625778]
[198.61370850 -15.37675095]
[183.82556152 -8.28853798]
[182.85929871 -0.71997178]
[175.12841797 4.72765827]
[166.52476501 17.01493835]
[157.92112732 29.30221939]
[149.31747437 41.58950043]
[140.71383667 53.87678146]
[132.38027954 66.34882355]
[124.32078552 78.99969482]
[116.26129150 91.65056610]
[118.21918488 106.52223969]
[129.27833557 116.65609741]
[140.33750916 126.78994751]
[151.39666748 136.92379761]
[162.45582581 147.05764771]
[178.23214722 146.11796570]
[189.99653625 156.67140198]
[190.76936340 172.45678711]
[180.09213257 184.10893250]
[164.29946899 184.71482849]
[152.76086426 173.91500854]
[152.32197571 158.11682129]
[141.26280212 147.98295593]
[130.20364380 137.84910583]
[119.14448547 127.71525574]
[108.08532715 117.58139801]
[115.12649536 130.82609558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 45]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
