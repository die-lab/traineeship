%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCGGAUUUGAUAGUAAUUUUACAUUAGUAUGGUUUUCUGAAGGUUGUUUUGUGGUGUGUACAAAUCGC\
) } def
/len { sequence length } bind def

/coor [
[180.38209534 181.93902588]
[170.98171997 171.28222656]
[166.39494324 157.78630066]
[167.36077881 143.52116394]
[154.05561829 136.59494019]
[140.75045776 129.66871643]
[127.44529724 122.74247742]
[114.14012909 115.81625366]
[98.67987823 121.17438507]
[84.00486755 113.93746948]
[78.84415436 98.41020203]
[63.06702805 99.59037018]
[54.80212784 87.19921875]
[41.20751190 80.85994720]
[27.61289406 74.52067566]
[11.83576584 75.70084381]
[3.57086444 63.30968857]
[-10.02375221 56.97041702]
[-23.61837006 50.63114166]
[-37.21298599 44.29187012]
[-52.71963501 48.40567780]
[-65.51780701 38.73167419]
[-65.78984070 22.69092751]
[-53.32705688 12.58852482]
[-37.68983459 16.17416573]
[-30.87371254 30.69725227]
[-17.27909470 37.03652573]
[-3.68447852 43.37580109]
[9.91013813 49.71507263]
[24.71488762 48.08147430]
[33.95216751 60.92605591]
[47.54678345 67.26532745]
[61.14139938 73.60460663]
[75.94615173 71.97100830]
[85.18343353 84.81558228]
[96.67247772 79.04708099]
[109.38336945 80.97240448]
[118.64873505 89.88457489]
[121.06636047 102.51108551]
[134.37152100 109.43731689]
[147.67668152 116.36354828]
[160.98184204 123.28977966]
[174.28701782 130.21600342]
[187.09567261 120.42642975]
[202.81973267 117.14002991]
[218.36531067 120.95267487]
[230.69555664 131.06840515]
[237.42385864 145.46496582]
[237.27571106 161.29797363]
[253.05284119 160.11781311]
[261.31774902 172.50895691]
[274.91235352 178.84823608]
[288.50698853 185.18751526]
[302.10159302 191.52677917]
[315.69619751 197.86605835]
[329.29083252 204.20533752]
[344.79748535 200.09152222]
[357.59564209 209.76551819]
[357.86767578 225.80627441]
[345.40490723 235.90867615]
[329.76766968 232.32302856]
[322.95153809 217.79994202]
[309.35693359 211.46067810]
[295.76232910 205.12139893]
[282.16769409 198.78211975]
[268.57308960 192.44285583]
[254.97846985 186.10357666]
[240.17372131 187.73718262]
[230.93643188 174.89259338]
[220.50500488 184.28298950]
[207.22105408 188.94775391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[11 35]
[13 33]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[20 26]
[49 69]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
