%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUGGUACUCUUUAUUUUCUUUUUGGUAUUUGGUCUGGUUUGGUGGGCACGGGGUUGAGGAUGCUUAUC\
) } def
/len { sequence length } bind def

/coor [
[93.18050385 120.08959198]
[82.83113098 112.46303558]
[78.78610229 100.26010895]
[64.69071198 95.12980652]
[50.59532166 89.99950409]
[36.49993134 84.86920166]
[22.40454292 79.73889923]
[12.94713879 79.71071625]
[7.81447649 74.06513214]
[-6.04371643 68.32487488]
[-19.90190887 62.58462524]
[-33.10482407 70.52120209]
[-48.27214050 69.17738342]
[-59.60579681 59.27726746]
[-62.89722061 44.77538681]
[-76.75540924 39.03513336]
[-90.61360168 33.29488373]
[-104.47180176 27.55463219]
[-117.63141632 35.77679825]
[-133.10826111 34.66005707]
[-144.95115662 24.63381767]
[-148.60626221 9.55337524]
[-142.66813660 -4.78253317]
[-129.42010498 -12.86145782]
[-113.95629120 -11.57688808]
[-102.22285461 -1.42276680]
[-98.73154449 13.69643879]
[-84.87335205 19.43669128]
[-71.01515961 25.17694283]
[-57.15696716 30.91719437]
[-44.57520294 22.99020195]
[-29.56066132 24.00387001]
[-17.88552094 33.77855682]
[-14.16165829 48.72643280]
[-0.30346507 54.46668625]
[13.55472755 60.20693588]
[27.53484535 65.64350891]
[41.63023376 70.77381134]
[55.72562408 75.90411377]
[69.82101440 81.03441620]
[83.91640472 86.16471863]
[98.54501343 78.83445740]
[114.03908539 84.09398651]
[121.18236542 98.81480408]
[135.48811340 103.32539368]
[149.79386902 107.83597565]
[164.09962463 112.34656525]
[178.40538025 116.85715485]
[192.71113586 121.36773682]
[207.01689148 125.87832642]
[221.32264709 130.38891602]
[235.72338867 134.58634949]
[247.06947327 124.13311768]
[262.26977539 121.49595642]
[276.47390747 127.51638794]
[285.14944458 140.27330017]
[285.52798462 155.69602966]
[277.48880005 168.86320496]
[263.59710693 175.57325745]
[248.28573608 173.68502808]
[236.44047546 163.80104065]
[231.84111023 149.07524109]
[224.33227539 150.42961121]
[216.81205750 144.69467163]
[202.50630188 140.18408203]
[188.20054626 135.67349243]
[173.89479065 131.16290283]
[159.58903503 126.65232086]
[145.28327942 122.14173126]
[130.97752380 117.63114929]
[116.67177582 113.12055969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[9 36]
[10 35]
[11 34]
[15 30]
[16 29]
[17 28]
[18 27]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
