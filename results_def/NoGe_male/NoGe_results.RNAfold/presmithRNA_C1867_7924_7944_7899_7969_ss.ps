%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUGAGACGGGCUCGGGGAACCCUCUUGGUCUCAAUAGUGACAGGGAAAAGGUCUCUUUUCAUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[91.96093750 129.39457703]
[84.35623169 126.15225220]
[77.90280914 120.98528290]
[73.07560730 114.27392578]
[70.22987366 106.51209259]
[69.57503510 98.27101135]
[55.26928329 93.76042938]
[40.96352768 89.24983978]
[26.65777397 84.73925018]
[12.35202026 80.22866821]
[-1.95373368 75.71807861]
[-17.44184303 78.94747925]
[-27.25340652 67.74112701]
[-41.55916214 63.23053741]
[-52.88659668 70.85791779]
[-66.34057617 70.47122955]
[-76.89829254 62.44363403]
[-80.75134277 49.95814133]
[-94.84673309 44.82783890]
[-108.94212341 39.69754028]
[-125.89400482 39.96193695]
[-130.84082031 23.74572945]
[-116.62776184 14.50314617]
[-103.81182098 25.60214996]
[-89.71643066 30.73245049]
[-75.62104034 35.86275482]
[-60.86688614 28.09452248]
[-44.69478607 33.36020279]
[-37.04857254 48.92478180]
[-22.74282074 53.43536758]
[-8.27795410 49.88333893]
[2.55685329 61.41232681]
[16.86260796 65.92291260]
[31.16836166 70.43350220]
[45.47411728 74.94408417]
[59.77986908 79.45467377]
[74.08562469 83.96526337]
[92.41239929 70.48566437]
[114.96793365 73.45515442]
[129.18145752 91.21876526]
[144.16719055 90.56447601]
[159.15290833 89.91018677]
[174.13862610 89.25588989]
[189.12435913 88.60160065]
[204.22384644 78.32173157]
[219.51625061 86.64955139]
[234.45916748 85.34221649]
[249.40208435 84.03488159]
[264.34500122 82.72754669]
[279.28793335 81.42020416]
[290.66018677 70.10421753]
[306.58071899 72.08306885]
[314.83666992 85.83874512]
[309.09478760 100.81907654]
[293.75973511 105.53243256]
[280.59527588 96.36312866]
[265.65234375 97.67046356]
[250.70942688 98.97779846]
[235.76651001 100.28513336]
[220.82357788 101.59247589]
[212.63873291 110.76374817]
[199.98399353 111.80487823]
[189.77864075 103.58732605]
[174.79292297 104.24161530]
[159.80720520 104.89590454]
[144.82147217 105.55019379]
[129.83575439 106.20449066]
[127.07028198 113.99527740]
[122.31259918 120.75609589]
[115.91285706 125.98939514]
[108.34201813 129.31004333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[13 30]
[14 29]
[18 26]
[19 25]
[20 24]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
