%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUUGGAUAAUUGUUUUCGUUCUUUUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[141.08299255 236.82246399]
[135.41017151 229.73490906]
[131.48515320 221.53627014]
[129.51667786 212.65045166]
[129.61212158 203.53819275]
[131.77175903 194.67318726]
[135.88838196 186.51747131]
[141.75270081 179.49729919]
[133.69320679 166.84642029]
[125.63370514 154.19555664]
[117.57421112 141.54467773]
[109.51471710 128.89381409]
[101.45522308 116.24293518]
[90.08132172 112.94490051]
[83.93779755 102.82068634]
[86.26428986 91.20904541]
[78.76428986 78.21866608]
[71.26428986 65.22828674]
[63.76428604 52.23790359]
[50.16350174 44.15525436]
[50.50056458 29.26446152]
[43.00056458 16.27408028]
[35.50056458 3.28369975]
[20.35954285 4.91751766]
[5.86498833 0.24549641]
[-5.47182989 -9.92290783]
[-11.68673992 -23.82595634]
[-11.70297050 -39.05486298]
[-5.51771021 -52.97113037]
[5.79740763 -63.16367722]
[20.28197098 -67.86658478]
[35.42644119 -66.26504517]
[48.60694504 -58.63653183]
[57.53988647 -46.30273819]
[60.67757034 -31.40056419]
[57.47638321 -16.51189995]
[48.49094391 -4.21630049]
[55.99094391 8.77408123]
[63.49094391 21.76446152]
[76.55528259 28.91795158]
[76.75466919 44.73790359]
[84.25466919 57.72828293]
[91.75466919 70.71866608]
[99.25466919 83.70904541]
[113.94190216 91.53984833]
[114.10609436 108.18344116]
[122.16558838 120.83431244]
[130.22508240 133.48518372]
[138.28457642 146.13606262]
[146.34407043 158.78692627]
[154.40356445 171.43780518]
[177.29641724 169.57492065]
[197.36051941 180.54493713]
[208.05291748 200.64367676]
[205.95661926 223.21113586]
[218.60748291 231.27062988]
[231.25836182 239.33012390]
[246.63183594 235.66519165]
[260.05007935 244.01542664]
[263.55227661 259.42678833]
[255.06062317 272.75598145]
[239.61309814 276.09506226]
[226.37442017 267.46295166]
[223.19886780 251.98098755]
[210.54798889 243.92149353]
[197.89712524 235.86199951]
[191.03610229 241.68304443]
[183.02467346 245.80401611]
[174.27690125 248.00610352]
[165.24618530 248.16978455]
[156.40184021 246.28132629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[16 44]
[17 43]
[18 42]
[19 41]
[21 39]
[22 38]
[23 37]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
