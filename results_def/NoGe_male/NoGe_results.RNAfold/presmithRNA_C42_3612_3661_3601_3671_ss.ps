%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUUGACUUAGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUGCGGUUAUACAGGCUUCU\
) } def
/len { sequence length } bind def

/coor [
[95.12328339 438.74203491]
[94.46899414 423.75631714]
[93.81470490 408.77056885]
[93.16040802 393.78485107]
[92.50611877 378.79913330]
[91.85182953 363.81341553]
[91.19754028 348.82769775]
[90.54325104 333.84194946]
[79.79425812 326.41278076]
[75.31296539 313.92977905]
[78.98986816 300.98220825]
[89.67045593 292.47262573]
[89.67045593 277.47262573]
[89.67045593 262.47262573]
[89.67045593 247.47262573]
[89.67045593 232.47262573]
[89.67045593 217.47262573]
[89.67045593 202.47262573]
[89.67045593 187.47262573]
[89.67045593 172.47262573]
[86.41880035 165.57019043]
[90.01195526 156.82191467]
[90.66624451 141.83618164]
[91.32054138 126.85046387]
[91.97483063 111.86473846]
[85.68968964 99.37519836]
[93.03944397 87.48097229]
[93.69374084 72.49524689]
[86.56575775 58.37071228]
[94.85085297 45.99304962]
[87.72286987 31.86851692]
[96.00795746 19.49085426]
[96.66225433 4.50513172]
[85.80158234 -6.97622204]
[86.32398987 -22.77187538]
[97.91952515 -33.51054764]
[113.70877075 -32.82117081]
[124.32424927 -21.11274719]
[123.46797943 -5.33167171]
[111.64797211 5.15942240]
[110.99368286 20.14514542]
[118.16846466 33.19779968]
[109.83657074 46.64734268]
[117.01135254 59.69999695]
[108.67945862 73.14953613]
[108.02516937 88.13526154]
[114.31031036 100.62480164]
[106.96055603 112.51902771]
[106.30625916 127.50475311]
[105.65196991 142.49047852]
[104.99768066 157.47619629]
[104.67045593 172.47262573]
[104.67045593 187.47262573]
[104.67045593 202.47262573]
[104.67045593 217.47262573]
[104.67045593 232.47262573]
[104.67045593 247.47262573]
[104.67045593 262.47262573]
[104.67045593 277.47262573]
[104.67045593 292.47262573]
[117.21540070 304.44531250]
[117.37432098 321.45233154]
[105.52896881 333.18768311]
[106.18325806 348.17340088]
[106.83755493 363.15911865]
[107.49184418 378.14483643]
[108.14613342 393.13055420]
[108.80042267 408.11630249]
[109.45471191 423.10202026]
[110.10900879 438.08773804]
[113.13776398 457.23132324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[22 51]
[23 50]
[24 49]
[25 48]
[27 46]
[28 45]
[30 43]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
