%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGAAGUAAUGGUUCGGAAUCCUUUCCAUUUAGUCGAGUUUAGUCCUUGGCCCUUGGUUGGCUCUGUUG\
) } def
/len { sequence length } bind def

/coor [
[78.55362701 154.65473938]
[71.12921906 141.62101746]
[70.93259430 126.62229919]
[78.01278687 113.39842987]
[90.60380554 105.24687195]
[76.11492157 101.36458588]
[64.06089020 110.95658875]
[48.84792709 111.60399628]
[36.31900787 103.26791382]
[31.16286850 89.31971741]
[16.67398071 85.43743134]
[2.18509293 81.55514526]
[-12.30379486 77.67285919]
[-26.79268265 73.79057312]
[-38.84671021 83.38257599]
[-54.05967712 84.02998352]
[-66.58859253 75.69390869]
[-71.74473572 61.74570847]
[-86.23361969 57.86342239]
[-103.09795380 59.60427094]
[-109.43927765 43.88091278]
[-96.08585358 33.43474960]
[-82.35133362 43.37453461]
[-67.86244965 47.25682068]
[-56.42300034 37.75539780]
[-41.40460205 36.80060196]
[-28.55348969 44.96775436]
[-22.91039658 59.30168533]
[-8.42150879 63.18397141]
[6.06737852 67.06626129]
[20.55626678 70.94854736]
[35.04515457 74.83083344]
[46.48460007 65.32940674]
[61.50300217 64.37461090]
[74.35411072 72.54176331]
[79.99720764 86.87569427]
[94.48609161 90.75798035]
[109.47181702 91.41226959]
[124.24393463 88.80754852]
[139.01605225 86.20282745]
[153.78816223 83.59810638]
[168.56028748 80.99338531]
[173.53959656 69.78918457]
[183.30218506 62.57494354]
[195.23249817 61.13389206]
[206.20712280 65.72214508]
[213.41244507 75.03303528]
[228.35537720 73.72570038]
[235.44198608 60.02228546]
[248.82362366 52.34536362]
[264.23028564 53.14461136]
[276.74572754 62.16498947]
[282.37631226 76.52812958]
[279.32537842 91.65080261]
[268.56646729 102.70742798]
[253.53265381 106.16986847]
[239.02122498 100.93327332]
[229.66270447 88.66861725]
[214.71978760 89.97595978]
[204.12786865 104.61623383]
[185.93292236 107.22327423]
[171.16500854 95.76549530]
[156.39288330 98.37022400]
[141.62077332 100.97494507]
[126.84865570 103.57966614]
[112.07653809 106.18438721]
[123.90957642 115.40280914]
[129.80999756 129.19355774]
[128.30657959 144.11802673]
[119.77420044 156.45491028]
[106.34033203 163.12806702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[18 24]
[19 23]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[47 59]
[48 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
