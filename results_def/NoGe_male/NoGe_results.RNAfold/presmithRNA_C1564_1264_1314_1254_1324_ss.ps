%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACGUUACUUUUUUCCCUCAGCAUUUUUUGGGGUUAAGGGGCAUGCCACGUCGUUACUCGGAUUAUCCGG\
) } def
/len { sequence length } bind def

/coor [
[148.14457703 181.83343506]
[139.54093933 169.54615784]
[130.93728638 157.25888062]
[122.33364105 144.97160339]
[113.72999573 132.68431091]
[92.79166412 134.71047974]
[74.39143372 124.51486969]
[65.00813293 105.68742371]
[67.94568634 84.85739899]
[56.04538345 75.72598267]
[44.14508438 66.59455872]
[32.24478531 57.46313858]
[20.34448433 48.33171463]
[8.44418430 39.20029449]
[-7.02050161 41.06610870]
[-18.95901680 31.63602448]
[-20.64248085 16.88131142]
[-32.54278183 7.74988985]
[-44.44308090 -1.38153172]
[-56.34337997 -10.51295280]
[-68.24368286 -19.64437485]
[-80.14398193 -28.77579689]
[-95.77838135 -26.46469307]
[-108.41778564 -35.95263290]
[-110.56346130 -51.61059189]
[-100.94242096 -64.14897919]
[-85.26264954 -66.12899017]
[-72.82668304 -56.37591934]
[-71.01255798 -40.67609787]
[-59.11225891 -31.54467392]
[-47.21195984 -22.41325378]
[-35.31166077 -13.28183174]
[-23.41135979 -4.15041065]
[-11.51105976 4.98101091]
[3.17661023 2.78831172]
[15.37528706 11.87934780]
[17.57560539 27.29999352]
[29.47590637 36.43141556]
[41.37620544 45.56283569]
[53.27650452 54.69425964]
[65.17680359 63.82567978]
[77.07710266 72.95709991]
[85.26919556 67.75436401]
[94.56516266 64.96801758]
[104.26840210 64.80684662]
[113.65177917 67.28293610]
[122.01213074 72.21073151]
[128.72297668 79.22097015]
[133.28140259 87.78831482]
[135.34584045 97.27076721]
[134.76158142 106.95774078]
[131.57238770 116.12332153]
[126.01728058 124.08067322]
[134.62092590 136.36795044]
[143.22456360 148.65522766]
[151.82821655 160.94252014]
[160.43186951 173.22979736]
[175.74185181 176.10066223]
[184.29214478 188.68426514]
[181.46086121 203.26231384]
[190.06451416 215.54959106]
[198.66815186 227.83688354]
[207.27180481 240.12416077]
[221.30963135 249.63078308]
[216.06057739 265.75167847]
[199.11660767 265.17050171]
[194.98452759 248.72779846]
[186.38087463 236.44052124]
[177.77722168 224.15324402]
[169.17358398 211.86596680]
[154.50634766 209.54051208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
