%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGAGAAGAAGGAACUCGGCAAAUUAGUGACUCCGUCUGUUUAGCAAAAACAUAGCUUGUUGUUGGUUU\
) } def
/len { sequence length } bind def

/coor [
[173.74285889 151.23571777]
[160.75247192 143.73571777]
[147.76210022 136.23571777]
[134.77171326 128.73571777]
[121.78133392 121.23571014]
[108.79095459 113.73571014]
[97.17931366 116.06220245]
[87.05509949 109.91867828]
[83.75706482 98.54477692]
[71.10619354 90.48528290]
[58.45531845 82.42578888]
[42.65912247 81.53652954]
[36.08229828 68.17259979]
[23.43142700 60.11310577]
[10.78055573 52.05361176]
[-2.16631866 54.06755066]
[-12.60507870 46.83853149]
[-15.10772324 34.80355072]
[-27.39500427 26.19990349]
[-39.68228531 17.59625816]
[-48.81014252 15.12127972]
[-52.30672836 8.33963299]
[-67.94112396 10.65073586]
[-80.58052826 1.16279507]
[-82.72620392 -14.49516201]
[-73.10516357 -27.03354645]
[-57.42539978 -29.01355934]
[-44.98943329 -19.26049232]
[-43.17530823 -3.56066751]
[-31.07863808 5.30897713]
[-18.79135704 13.91262341]
[-6.50407696 22.51626968]
[10.90343761 22.95036507]
[18.84004974 39.40274048]
[31.49092102 47.46223450]
[44.14179230 55.52172852]
[59.03311539 55.83451462]
[66.51481628 69.77491760]
[79.16568756 77.83441162]
[91.81655884 85.89390564]
[108.46015167 86.05809784]
[116.29095459 100.74533081]
[129.28134155 108.24533081]
[142.27171326 115.74533081]
[155.26210022 123.24533081]
[168.25247192 130.74533081]
[181.24285889 138.24533081]
[194.08956909 135.66857910]
[204.83370972 142.43537903]
[207.85893250 154.34974670]
[220.50981140 162.40924072]
[233.16067505 170.46873474]
[245.81155396 178.52822876]
[255.03868103 180.60270691]
[258.82775879 187.22537231]
[271.11502075 195.82902527]
[283.40231323 204.43266296]
[295.68957520 213.03631592]
[311.67501831 211.67770386]
[322.59887695 223.42710876]
[320.08132935 239.27140808]
[306.05361938 247.05618286]
[291.27661133 240.80964661]
[287.08593750 225.32359314]
[274.79867554 216.71994019]
[262.51138306 208.11630249]
[250.22410583 199.51264954]
[237.75205994 191.17910767]
[225.10118103 183.11959839]
[212.45031738 175.06010437]
[199.79943848 167.00061035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[15 34]
[18 32]
[19 31]
[20 30]
[22 29]
[50 71]
[51 70]
[52 69]
[53 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
