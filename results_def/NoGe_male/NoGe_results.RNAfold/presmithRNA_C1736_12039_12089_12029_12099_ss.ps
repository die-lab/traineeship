%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGGGGGUUCUCCUAUGGUGUAAAGAACACCUCAGUUUUUCGUGCUGGUGAUACAACUGUUUUUGUUGG\
) } def
/len { sequence length } bind def

/coor [
[83.81130219 126.79529572]
[73.20470428 137.40190125]
[62.59809875 148.00849915]
[51.99149704 158.61509705]
[41.38489532 169.22171021]
[30.77829361 179.82830811]
[29.34042358 195.80679321]
[15.87260151 204.52444458]
[0.70618910 199.29380798]
[-4.52444029 184.12739563]
[4.19320440 170.65957642]
[20.17169189 169.22171021]
[30.77829361 158.61509705]
[41.38489532 148.00849915]
[51.99149704 137.40190125]
[62.59809875 126.79529572]
[73.20470428 116.18869781]
[66.43985748 94.79874420]
[75.86162567 72.46736145]
[64.37095642 62.82554626]
[52.88029099 53.18373108]
[41.38962555 43.54191971]
[29.89895821 33.90010452]
[13.85595417 33.86032104]
[3.99768472 21.20354271]
[7.88656998 5.63896322]
[22.53939056 -0.89360231]
[36.71575546 6.61707115]
[39.54077148 22.40943718]
[51.03143692 32.05125046]
[62.52210617 41.69306564]
[74.01277161 51.33488083]
[85.50344086 60.97669601]
[100.27555847 58.37197113]
[107.77555847 45.38159180]
[115.27555847 32.39120865]
[122.77555847 19.40082932]
[130.27555847 6.41044712]
[124.75752258 -8.22120857]
[129.98426819 -22.95943069]
[143.48786926 -30.84527969]
[158.89234924 -28.15530205]
[168.92417908 -16.15962029]
[168.84663391 -0.52222836]
[158.69633484 11.37337399]
[143.26593018 13.91044712]
[135.76593018 26.90082932]
[128.26593018 39.89120865]
[120.76593781 52.88159180]
[113.26593781 65.87197113]
[121.94450378 71.80207825]
[128.38284302 79.78511047]
[132.14709473 89.05010223]
[133.05233765 98.75321198]
[131.16705322 108.05410767]
[126.79529572 116.18869781]
[137.40190125 126.79529572]
[148.00849915 137.40190125]
[158.61509705 148.00849915]
[174.17637634 146.46543884]
[187.05961609 155.32862854]
[191.18177795 170.41311646]
[184.59648132 184.59648132]
[170.41311646 191.18177795]
[155.32862854 187.05961609]
[146.46543884 174.17637634]
[148.00849915 158.61509705]
[137.40190125 148.00849915]
[126.79529572 137.40190125]
[116.18869781 126.79529572]
[105.64035034 130.79364014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
