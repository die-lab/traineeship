%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUGGAGACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUG\
) } def
/len { sequence length } bind def

/coor [
[93.01438141 298.53689575]
[82.85416412 287.26150513]
[77.45684052 273.07583618]
[77.55235291 257.89837646]
[83.12778473 243.78175354]
[93.42910767 232.63513184]
[107.06314850 225.96600342]
[105.75581360 211.02307129]
[92.48002625 200.93426514]
[90.41773224 184.05198669]
[101.29260254 170.54429626]
[99.33470917 155.67262268]
[97.37681580 140.80094910]
[95.41892242 125.92927551]
[93.46102905 111.05760956]
[83.12122345 121.92445374]
[68.43249512 124.96440887]
[54.62883377 119.09424591]
[46.62884140 106.40566254]
[47.28313446 91.41993713]
[56.35856628 79.47689056]
[70.62132263 74.83213043]
[84.98920441 79.14072418]
[94.34255219 90.86739349]
[97.58914948 76.22295380]
[100.83573914 61.57851410]
[104.08233643 46.93407440]
[107.32893372 32.28963470]
[102.76194000 17.14192390]
[113.07051849 6.39099741]
[116.31711578 -8.25344276]
[111.75012207 -23.40115356]
[122.05870056 -34.15208054]
[125.30529785 -48.79652023]
[114.92290497 -60.32845306]
[113.33515167 -75.76408386]
[121.15257263 -89.16809845]
[135.36920166 -95.38637543]
[150.51846313 -92.02786255]
[160.77514648 -80.38397980]
[162.19535828 -64.93203735]
[154.23298645 -51.61361694]
[139.94973755 -45.54992676]
[136.70314026 -30.90548706]
[141.50234985 -16.80524254]
[130.96154785 -5.00684834]
[127.71495819 9.63759232]
[132.51417542 23.73783493]
[121.97337341 35.53622818]
[118.72677612 50.18067169]
[115.48017883 64.82511139]
[112.23358917 79.46955109]
[108.98699188 94.11399078]
[108.33270264 109.09971619]
[110.29059601 123.97138977]
[112.24848938 138.84306335]
[114.20638275 153.71473694]
[116.16427612 168.58641052]
[127.86421204 175.62907410]
[133.19964600 187.98594666]
[130.38606262 200.94709778]
[120.69873047 209.71574402]
[122.00606537 224.65866089]
[136.59106445 228.85894775]
[148.67146301 238.04742432]
[156.61352539 250.98143005]
[159.34312439 265.91171265]
[156.49111938 280.81912231]
[148.44320679 293.68750000]
[136.28781128 302.77655029]
[121.66884613 306.85705566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[30 47]
[31 46]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
