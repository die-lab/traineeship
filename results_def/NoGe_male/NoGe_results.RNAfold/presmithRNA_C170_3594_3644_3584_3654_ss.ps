%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGUUUAAAAUAGCGGGAGCUUGACUUAGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUG\
) } def
/len { sequence length } bind def

/coor [
[81.82906342 273.31451416]
[81.82906342 258.31451416]
[81.82906342 243.31449890]
[81.50183868 228.31806946]
[80.84754944 213.33235168]
[80.19326019 198.34661865]
[79.53896332 183.36090088]
[72.87152863 180.08935547]
[67.64206696 174.74143982]
[64.47609711 167.90631104]
[63.76909256 160.35360718]
[65.63739777 152.94691467]
[69.90086365 146.54499817]
[76.09957123 141.90225220]
[83.54327393 139.57980347]
[86.78986359 124.93537140]
[90.03646088 110.29093170]
[86.01558685 96.89973450]
[95.31909943 86.46247864]
[98.56569672 71.81803131]
[101.81228638 57.17359543]
[105.05888367 42.52915573]
[108.30548096 27.88471413]
[111.55207062 13.24027443]
[114.79866791 -1.40416551]
[118.04525757 -16.04860497]
[121.29185486 -30.69304657]
[124.53845215 -45.33748627]
[127.78504181 -59.98192596]
[121.46446991 -71.45919800]
[124.68725586 -83.74089813]
[135.14048767 -90.20881653]
[139.02276611 -104.69770813]
[135.12086487 -120.03021240]
[145.88858032 -130.32124329]
[149.77085876 -144.81013489]
[143.02685547 -159.36685181]
[150.33151245 -173.65046692]
[166.08131409 -176.70381165]
[178.19438171 -166.18463135]
[177.37860107 -150.16232300]
[164.25975037 -140.92785645]
[160.37747192 -126.43896484]
[164.55706787 -112.14280701]
[153.51165771 -100.81542206]
[149.62937927 -86.32653046]
[155.17518616 -69.82035065]
[142.42948914 -56.73533249]
[139.18289185 -42.09089279]
[135.93629456 -27.44645119]
[132.68969727 -12.80201149]
[129.44309998 1.84242880]
[126.19651031 16.48686981]
[122.94992065 31.13130951]
[119.70332336 45.77574921]
[116.45672607 60.42018890]
[113.21013641 75.06462860]
[109.96353912 89.70906830]
[113.98441315 103.10026550]
[104.68090057 113.53752136]
[101.43430328 128.18196106]
[98.18771362 142.82640076]
[108.54305267 164.27081299]
[94.52468872 182.70660400]
[95.17897797 197.69233704]
[95.83327484 212.67805481]
[96.48756409 227.66377258]
[100.08071899 236.41206360]
[96.82906342 243.31449890]
[96.82906342 258.31451416]
[96.82906342 273.31451416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 67]
[5 66]
[6 65]
[7 64]
[15 62]
[16 61]
[17 60]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[32 46]
[33 45]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
