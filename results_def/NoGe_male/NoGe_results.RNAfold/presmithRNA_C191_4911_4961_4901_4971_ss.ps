%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUGAGUGUGAGCUUAAGUUGGAGAAGAAGGAACUCGGCAAAUUAGUGACUCCGUCUGUUUAGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[20.00169945 270.31042480]
[5.16989660 268.07040405]
[-6.29611349 258.39929199]
[-11.00494099 244.15754700]
[-7.56447268 229.55876160]
[-20.86963463 236.48500061]
[-34.17479706 243.41122437]
[-47.47996140 250.33744812]
[-60.78512192 257.26367188]
[-74.09028625 264.18991089]
[-82.44039917 278.30401611]
[-98.83351135 277.85910034]
[-106.40579224 263.31289673]
[-97.36753082 249.62924194]
[-81.01651764 250.88475037]
[-67.71134949 243.95852661]
[-54.40618896 237.03228760]
[-41.10102844 230.10606384]
[-27.79586411 223.17982483]
[-14.49070168 216.25360107]
[-2.79243445 206.86474609]
[6.84937954 195.37408447]
[16.49119377 183.88342285]
[26.13300896 172.39274597]
[35.77482224 160.90208435]
[45.41663742 149.41142273]
[44.71912384 137.13877869]
[52.93118286 127.45434570]
[65.95815277 126.04875946]
[76.09200287 114.98959351]
[86.22585297 103.93043518]
[89.43927765 90.32288361]
[102.71498108 85.93570709]
[112.84883881 74.87654877]
[122.98268890 63.81739044]
[123.24755096 50.71749115]
[132.17941284 41.69262314]
[144.46614075 41.31785202]
[155.07273865 30.71125221]
[165.67933655 20.10465050]
[169.70175171 11.54524136]
[176.98754883 9.27939606]
[177.42643738 -6.51879740]
[188.96504211 -17.31861687]
[204.75772095 -16.71272087]
[215.43493652 -5.06057692]
[214.66210938 10.72480488]
[202.89773560 21.27823639]
[187.12139893 20.33855629]
[176.28594971 30.71125221]
[165.67933655 41.31785202]
[155.07273865 51.92445374]
[151.62245178 68.99213409]
[134.04185486 73.95124054]
[123.90799713 85.01040649]
[113.77414703 96.06956482]
[110.56072235 109.67711639]
[97.28501892 114.06429291]
[87.15116119 125.12345123]
[77.01731110 136.18261719]
[73.60932159 154.12854004]
[56.90730286 159.05323792]
[47.26548767 170.54389954]
[37.62367630 182.03456116]
[27.98186111 193.52523804]
[18.34004593 205.01589966]
[8.69823265 216.50656128]
[23.69691467 216.30775452]
[36.58150864 223.98806763]
[43.54104233 237.27583313]
[42.51704025 252.24084473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[35 54]
[38 52]
[39 51]
[40 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
