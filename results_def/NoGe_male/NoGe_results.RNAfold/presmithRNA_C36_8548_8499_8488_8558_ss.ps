%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCACUCGGUAGCUUUAGCGGACGGAACGUAGUUCUUCCUCCAAUUUACAAGAUUGGUGCUUCUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[81.85392761 288.48321533]
[66.58327484 289.51565552]
[52.58668137 283.32260132]
[43.08044815 271.32717896]
[40.24903870 256.28585815]
[44.74309921 241.65499878]
[55.52991867 230.79667664]
[70.13076782 226.20605469]
[72.73548889 211.43394470]
[75.34020996 196.66181946]
[77.94493866 181.88970947]
[72.53524780 168.01222229]
[82.55137634 155.76527405]
[85.15609741 140.99314880]
[87.76082611 126.22103882]
[80.71219635 121.57130432]
[75.30601501 115.08467102]
[72.00262451 107.31351471]
[71.08334351 98.91958618]
[72.62643433 90.61765289]
[76.50051117 83.11466980]
[82.37567139 77.04954529]
[76.63541412 63.19135284]
[70.89516449 49.33316040]
[64.52661133 42.34138870]
[65.22139740 34.74309158]
[60.09109879 20.64770317]
[54.96079636 6.55231428]
[49.83049393 -7.54307508]
[44.70019150 -21.63846397]
[33.60118866 -34.45441055]
[42.84377289 -48.66746521]
[59.05997849 -43.72065353]
[58.79558182 -26.76876640]
[63.92588043 -12.67337704]
[69.05618286 1.42201209]
[74.18648529 15.51740170]
[79.31678772 29.61279106]
[84.75335693 43.59290695]
[90.49361420 57.45110321]
[96.23386383 71.30929565]
[112.79843140 74.04734039]
[125.05454254 85.52207947]
[139.54342651 81.63980103]
[154.03231812 77.75751495]
[168.52120972 73.87522888]
[183.01010132 69.99294281]
[197.49897766 66.11065674]
[211.98786926 62.22837067]
[225.72239685 52.28858566]
[239.07582092 62.73474884]
[232.73449707 78.45809937]
[215.87016296 76.71725464]
[201.38127136 80.59954071]
[186.89237976 84.48182678]
[172.40348816 88.36411285]
[157.91461182 92.24639893]
[143.42572021 96.12868500]
[128.93682861 100.01097107]
[121.33447266 119.54943848]
[102.53294373 128.82575989]
[99.92821503 143.59788513]
[97.32349396 158.36999512]
[102.54687500 173.30407715]
[92.71704865 184.49443054]
[90.11232758 199.26654053]
[87.50760651 214.03866577]
[84.90288544 228.81077576]
[97.05310822 238.11833191]
[103.47563934 252.01112366]
[102.69462585 267.29669189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[15 61]
[22 41]
[23 40]
[24 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
