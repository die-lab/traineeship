%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUUAAAAUAGCGGGAGCUUGACUUAGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[83.50091553 209.54464722]
[76.81427765 206.02172852]
[71.02840424 201.14129639]
[66.41485596 195.12602234]
[63.19156647 188.25198364]
[61.51251221 180.83602905]
[61.46036148 173.22109985]
[63.04243469 165.76045227]
[66.19012451 158.80123901]
[70.76187134 152.66830444]
[76.54949188 147.64912415]
[83.28770447 143.98023987]
[90.66624451 141.83618164]
[91.32054138 126.85046387]
[91.97483063 111.86473846]
[85.68968964 99.37519836]
[93.03944397 87.48097229]
[93.69374084 72.49524689]
[94.34803009 57.50952530]
[95.00231934 42.52379990]
[95.65660858 27.53807640]
[96.31089783 12.55235386]
[96.96519470 -2.43336964]
[97.61948395 -17.41909218]
[98.27377319 -32.40481567]
[98.92806244 -47.39054108]
[99.58235931 -62.37626266]
[91.36479950 -72.58161926]
[92.40592957 -85.23635864]
[101.57720947 -93.42120361]
[102.88454437 -108.36412048]
[96.37944794 -122.78613281]
[105.19656372 -134.79061890]
[106.50389862 -149.73353577]
[97.33459473 -162.89802551]
[102.04795074 -178.23307800]
[117.02828217 -183.97496033]
[130.78396606 -175.71899414]
[132.76280212 -159.79844666]
[121.44682312 -148.42620850]
[120.13948059 -133.48329163]
[126.73808289 -120.13009644]
[117.82746124 -107.05678558]
[116.52012634 -92.11386871]
[124.84794617 -76.82147217]
[114.56807709 -61.72197342]
[113.91378784 -46.73624802]
[113.25949860 -31.75052643]
[112.60520935 -16.76480293]
[111.95091248 -1.77907884]
[111.29662323 13.20664406]
[110.64233398 28.19236755]
[109.98804474 43.17809296]
[109.33375549 58.16381454]
[108.67945862 73.14953613]
[108.02516937 88.13526154]
[114.31031036 100.62480164]
[106.96055603 112.51902771]
[106.30625916 127.50475311]
[105.65196991 142.49047852]
[126.16815948 157.44979858]
[131.44075012 182.09335327]
[119.02974701 203.80865479]
[125.95597839 217.11381531]
[140.07006836 225.46392822]
[139.62516785 241.85704041]
[125.07894897 249.42932129]
[111.39530945 240.39106750]
[112.65081024 224.04005432]
[105.72458649 210.73489380]
[98.30014038 211.95227051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 60]
[14 59]
[15 58]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[30 44]
[31 43]
[33 41]
[34 40]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
