%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAUGUCUUUUUGUCAAGGCCCGAUGGCUCUUUGGUCUCAGUGGGGAUUUCAGGAUGCUGCUUCUCCUU\
) } def
/len { sequence length } bind def

/coor [
[102.44943237 136.60864258]
[92.98882294 136.01438904]
[83.99620819 133.01623535]
[76.07180786 127.81428528]
[64.17150879 136.94570923]
[52.27120972 146.07713318]
[40.37091064 155.20855713]
[38.55678558 170.90837097]
[26.12081909 180.66143799]
[10.44105244 178.68142700]
[0.82001078 166.14305115]
[2.96568823 150.48509216]
[15.60509205 140.99714661]
[31.23948860 143.30825806]
[43.13978958 134.17683411]
[55.04008865 125.04541016]
[66.94039154 115.91398621]
[63.86690903 93.62876129]
[74.37702942 73.73868561]
[66.31753540 61.08781815]
[58.25804520 48.43694687]
[50.19855118 35.78607559]
[42.13905716 23.13520241]
[28.19865608 15.65350342]
[27.88586998 0.76218313]
[19.82637596 -11.88868904]
[4.34440565 -15.06424046]
[-4.28768253 -28.30291939]
[-0.94862312 -43.75045013]
[12.38057899 -52.24208832]
[27.79194450 -48.73989487]
[36.14218521 -35.32165909]
[32.47724915 -19.94818306]
[40.53674316 -7.29731083]
[53.90067291 -0.72048718]
[54.78992844 15.07570839]
[62.84942245 27.72657967]
[70.90891266 40.37745285]
[78.96840668 53.02832413]
[87.02790070 65.67919159]
[101.32980347 63.33360291]
[115.42420959 66.70906067]
[127.11198425 75.27889252]
[134.56948853 87.70594788]
[136.63311768 102.05124664]
[151.12200928 105.93352509]
[165.61088562 109.81581116]
[180.09977722 113.69809723]
[194.58866882 117.58038330]
[205.57261658 109.46617126]
[219.03065491 109.26563263]
[229.92848206 116.82506561]
[234.32247925 129.13061523]
[248.62823486 133.64118958]
[262.93399048 138.15177917]
[278.81857300 134.07603455]
[290.09567261 145.98229980]
[285.16433716 161.62245178]
[269.09753418 164.90722656]
[258.42340088 152.45753479]
[244.11764526 147.94694519]
[229.81188965 143.43635559]
[215.41062927 151.84075928]
[199.02423096 147.28550720]
[190.70637512 132.06927490]
[176.21749878 128.18698120]
[161.72860718 124.30470276]
[147.23971558 120.42241669]
[132.75083923 116.54013062]
[127.42034149 124.37863159]
[120.25959015 130.58990479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[25 34]
[26 33]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
