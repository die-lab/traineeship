%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUUUAGGCGUGCUAGCAGCUAAGGGGUUGUUCUUAAUGGGUGGUUUUUCGGUUUUAAUUUUUUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[118.62064362 261.56198120]
[124.14826202 247.33494568]
[135.30720520 236.92144775]
[130.79661560 222.61570740]
[126.28602600 208.30995178]
[121.77543640 194.00419617]
[110.56908417 184.19262695]
[113.79848480 168.70451355]
[109.28789520 154.39875793]
[104.77730560 140.09300232]
[100.26672363 125.78725433]
[81.82765961 118.29808044]
[74.21151733 99.91109467]
[81.95425415 81.57705688]
[75.02803040 68.27189636]
[68.10179901 54.96673203]
[61.17557144 41.66156769]
[47.94029236 32.99335480]
[48.92655945 18.13143730]
[33.71100616 15.72453880]
[22.95596123 4.94574690]
[20.63754654 -9.92331314]
[27.43780136 -23.14808464]
[20.51157188 -36.45324707]
[13.58534241 -49.75840759]
[6.65911293 -63.06357193]
[-0.26711625 -76.36873627]
[-7.19334555 -89.67389679]
[-21.30743980 -98.02400970]
[-20.86253929 -114.41712189]
[-6.31631708 -121.98940277]
[7.36731863 -112.95114136]
[6.11181688 -96.60012817]
[13.03804588 -83.29496002]
[19.96427536 -69.98979950]
[26.89050484 -56.68463898]
[33.81673431 -43.37947464]
[40.74296188 -30.07431221]
[55.47652435 -28.05933762]
[66.32675934 -17.63166237]
[68.98738861 -2.63918233]
[62.23172379 11.20520878]
[74.97158813 18.92174911]
[74.48073578 34.73534012]
[81.40695953 48.04050064]
[88.33319092 61.34566498]
[95.25942230 74.65082550]
[105.23823547 74.74897003]
[114.43266296 78.62824249]
[121.46591949 85.70777130]
[125.28483582 94.92743683]
[125.31755066 104.90667725]
[121.55916595 114.15118408]
[114.57247925 121.27666473]
[119.08306122 135.58242798]
[123.59365082 149.88818359]
[128.10423279 164.19392395]
[139.63322449 175.02873230]
[136.08119202 189.49360657]
[140.59178162 203.79936218]
[145.10237122 218.10511780]
[149.61296082 232.41087341]
[164.72676086 234.54058838]
[177.41499329 243.02418518]
[185.15841675 256.17721558]
[186.41955566 271.38815308]
[180.94801331 285.63681030]
[169.83016968 296.09417725]
[155.27346802 300.68386841]
[140.16818237 298.49465942]
[127.51344299 289.96115112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[8 57]
[9 56]
[10 55]
[11 54]
[14 47]
[15 46]
[16 45]
[17 44]
[19 42]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
