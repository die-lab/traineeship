%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCAUUUUCCUCUUUACUGUAGGAGGUCUGACUGGUAUUGUUCUGUCUAAUUCUAGGAUUGAUGUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[101.72035217 159.72903442]
[91.67343140 159.17082214]
[81.86264038 156.93464661]
[72.56617737 153.08392334]
[64.04768372 147.72785950]
[56.54872131 141.01834106]
[50.28194427 133.14562988]
[45.42506027 124.33296967]
[42.11580658 114.83028412]
[40.44802094 104.90705109]
[25.46229744 104.25276184]
[10.47657394 103.59846497]
[-4.50914955 102.94417572]
[-19.49487305 102.28988647]
[-34.48059464 101.63559723]
[-45.96194839 112.49626160]
[-61.75760269 111.97386169]
[-72.49627686 100.37832642]
[-71.80690002 84.58907318]
[-60.09847641 73.97360229]
[-44.31739807 74.82987213]
[-33.82630539 86.64987183]
[-18.84058189 87.30416107]
[-3.85485888 87.95845032]
[11.13086414 88.61274719]
[26.11658859 89.26703644]
[41.10231018 89.92132568]
[49.52320099 68.02172089]
[65.72662354 51.05254745]
[87.21433258 41.63010788]
[110.67333984 41.20716858]
[115.18392944 26.90141296]
[119.69451141 12.59565830]
[116.46511078 -2.89245105]
[127.67147064 -12.70401478]
[132.18205261 -27.00976944]
[124.66305542 -40.91085052]
[129.25587463 -56.03307343]
[143.23567200 -63.40468597]
[158.30848694 -58.65224457]
[165.53189087 -44.59528732]
[160.62036133 -29.57355881]
[146.48780823 -22.49918175]
[141.97721863 -8.19342804]
[145.52925110 6.27143812]
[134.00027466 17.10624504]
[129.48968506 31.41199875]
[124.97909546 45.71775436]
[136.19590759 52.45661163]
[145.67689514 61.47547150]
[152.96737671 72.34183502]
[157.71774292 84.53457642]
[159.70018005 97.46898651]
[158.81961060 110.52477264]
[155.11827087 123.07582855]
[148.77365112 134.52026367]
[159.83280945 144.65411377]
[170.89196777 154.78796387]
[181.95114136 164.92181396]
[193.01029968 175.05566406]
[209.12910461 178.07490540]
[214.31781006 193.63154602]
[203.23870850 205.72227478]
[187.28903198 201.90916443]
[182.87643433 186.11482239]
[171.81727600 175.98097229]
[160.75811768 165.84712219]
[149.69895935 155.71327209]
[138.63980103 145.57942200]
[130.44371033 151.41690063]
[121.38430023 155.79631042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
