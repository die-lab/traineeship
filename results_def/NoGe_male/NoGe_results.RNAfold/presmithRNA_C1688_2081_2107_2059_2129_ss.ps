%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACUGCUGCUGAUGUCUUACACUCCUGGACUGUUCCUUGCUUAGGGGUGAAGGCGGAUGCGGUUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[85.13421631 357.75094604]
[72.81948853 348.79174805]
[65.21909332 335.59500122]
[63.64983749 320.44717407]
[68.38360596 305.97265625]
[78.60025024 294.67929077]
[92.52967072 288.52371216]
[92.52967072 273.52371216]
[92.52967072 258.52371216]
[92.52967072 243.52371216]
[92.52967072 228.52371216]
[80.39125061 219.93321228]
[75.58193970 205.67366028]
[80.14469147 191.14663696]
[92.52967072 181.98593140]
[92.52967072 166.98593140]
[92.52967072 151.98593140]
[92.52967072 136.98593140]
[92.52967072 121.98592377]
[92.52967072 106.98592377]
[89.29863739 99.30104828]
[92.87117004 91.33520508]
[93.52545929 76.34947968]
[94.17974854 61.36375809]
[94.83403778 46.37803268]
[95.48833466 31.39230919]
[96.14262390 16.40658760]
[96.79691315 1.42086339]
[97.45120239 -13.56486034]
[98.10549164 -28.55058289]
[90.97751617 -42.67511749]
[99.26260376 -55.05278015]
[87.03543854 -64.60662842]
[82.79144287 -79.53205109]
[88.16252136 -94.08990479]
[101.08337402 -102.68241119]
[116.58568573 -102.00556183]
[128.70848083 -92.31963348]
[132.79031372 -77.34905243]
[127.26163483 -62.85031891]
[114.24832916 -54.39848709]
[121.42311096 -41.34583282]
[113.09121704 -27.89629173]
[112.43692780 -12.91056919]
[111.78263855 2.07515430]
[111.12834167 17.06087685]
[110.47405243 32.04660034]
[109.81976318 47.03232574]
[109.16547394 62.01804733]
[108.51118469 77.00376892]
[107.85688782 91.98949432]
[107.52967072 106.98592377]
[107.52967072 121.98592377]
[107.52967072 136.98593140]
[107.52967072 151.98593140]
[107.52967072 166.98593140]
[107.52967072 181.98593140]
[119.91464233 191.14663696]
[124.47739410 205.67366028]
[119.66808319 219.93321228]
[107.52967072 228.52371216]
[107.52967072 243.52371216]
[107.52967072 258.52371216]
[107.52967072 273.52371216]
[107.52967072 288.52371216]
[121.45908356 294.67929077]
[131.67573547 305.97265625]
[136.40950012 320.44717407]
[134.84024048 335.59500122]
[127.23984528 348.79174805]
[114.92511749 357.75094604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
