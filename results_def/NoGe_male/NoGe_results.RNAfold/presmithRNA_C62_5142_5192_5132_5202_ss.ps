%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUGAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUUU\
) } def
/len { sequence length } bind def

/coor [
[149.97901917 128.81993103]
[136.12081909 123.07967377]
[122.26263428 117.33942413]
[108.40443420 111.59917450]
[94.51846313 113.23359680]
[85.85530853 102.25901794]
[70.14467621 104.12625885]
[61.34714890 92.10740662]
[47.48895645 86.36715698]
[33.63076401 80.62689972]
[15.60151005 83.56230927]
[5.26138067 69.55189514]
[-8.83400822 64.42159271]
[-22.92939758 59.29128647]
[-37.02478790 54.16098404]
[-46.48219299 54.13280487]
[-51.61485291 48.48721695]
[-65.47304535 42.74696732]
[-79.33123779 37.00671387]
[-93.83474731 43.28554916]
[-108.49913788 37.39221954]
[-114.62428284 22.82313728]
[-108.57624054 8.22187901]
[-93.94321442 2.25111198]
[-79.40671539 8.45318699]
[-73.59098816 23.14852333]
[-59.73279572 28.88877487]
[-45.87460327 34.62902451]
[-31.89448547 40.06559753]
[-17.79909515 45.19589996]
[-3.70370626 50.32619858]
[10.39168262 55.45650101]
[21.68562126 50.60356903]
[33.59471130 55.00810623]
[39.37101364 66.76870728]
[53.22920609 72.50896454]
[67.08740234 78.24921417]
[81.80680084 75.97139740]
[91.59556580 88.40082550]
[105.48153687 86.76640320]
[114.14469147 97.74098206]
[128.00288391 103.48123169]
[141.86106873 109.22148132]
[155.71926880 114.96173859]
[170.54469299 117.24358368]
[185.48760986 115.93624878]
[200.43052673 114.62891388]
[215.37345886 113.32157898]
[228.44676208 104.41095734]
[241.79995728 111.00955963]
[253.17219543 99.69357300]
[269.09274292 101.67241669]
[277.34869385 115.42809296]
[271.60681152 130.40841675]
[256.27175903 135.12178040]
[243.10728455 125.95247650]
[231.10279846 134.76959229]
[216.68078613 128.26449585]
[201.73786926 129.57183838]
[186.79495239 130.87916565]
[171.85202026 132.18650818]
[183.00000000 142.22257996]
[188.45407104 156.19587708]
[187.05259705 171.13026428]
[179.09407043 183.84490967]
[166.27357483 191.63172913]
[151.32168579 192.83226013]
[137.42300415 187.19078064]
[127.53773499 175.90885925]
[123.77133942 161.38941956]
[126.92601013 146.72489929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[6 39]
[8 37]
[9 36]
[10 35]
[12 32]
[13 31]
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[45 61]
[46 60]
[47 59]
[48 58]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
