%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAAGUUGGAGAAGAAGGAACUCGGCAAAUUAGUGACUCCGUCUGUUUAGCAAAAACAUAGCUUGUUGU\
) } def
/len { sequence length } bind def

/coor [
[168.73834229 286.87078857]
[161.38029480 279.83856201]
[156.38630676 270.94229126]
[154.20449829 260.95153809]
[155.03904724 250.73524475]
[158.83116150 241.18626404]
[165.26293945 233.14318848]
[157.76293945 220.15280151]
[150.26293945 207.16242981]
[142.76293945 194.17204285]
[135.26293945 181.18167114]
[127.76293182 168.19128418]
[115.99186707 164.64924622]
[109.70015717 153.62016296]
[112.83482361 140.89807129]
[105.90859985 127.59291077]
[98.98236847 114.28775024]
[87.29450226 106.61405945]
[87.71247101 92.63848114]
[80.78623962 79.33331299]
[73.86000824 66.02815247]
[61.64072037 61.29883575]
[56.21500015 49.81894302]
[60.06513596 38.14502335]
[53.72586060 24.55040550]
[47.38658905 10.95578861]
[40.71912003 4.24846554]
[41.08181000 -3.37290645]
[26.38647461 -9.18863106]
[20.18440056 -23.72513008]
[26.15516663 -38.35815811]
[40.75642776 -44.40619659]
[55.32550812 -38.28105545]
[61.21883774 -23.61666679]
[54.94000244 -9.11315823]
[60.98120499 4.61651421]
[67.32048035 18.21113014]
[73.65975189 31.80574799]
[88.51805115 40.88544083]
[87.16517639 59.10192490]
[94.09140015 72.40708923]
[101.01763153 85.71224976]
[112.70549774 93.38594055]
[112.28752899 107.36151886]
[119.21376038 120.66668701]
[126.13999176 133.97184753]
[141.83804321 143.31217957]
[140.75331116 160.69128418]
[148.25331116 173.68167114]
[155.75331116 186.67204285]
[163.25331116 199.66242981]
[170.75331116 212.65280151]
[178.25331116 225.64318848]
[199.16491699 225.79899597]
[216.11119080 237.84207153]
[223.05317688 257.30853271]
[217.61596680 277.12069702]
[228.22256470 287.72729492]
[238.82917786 298.33392334]
[249.43577576 308.94052124]
[265.41424561 310.37838745]
[274.13189697 323.84619141]
[268.90127563 339.01260376]
[253.73486328 344.24325562]
[240.26704407 335.52560425]
[238.82917786 319.54711914]
[228.22256470 308.94052124]
[217.61596680 298.33392334]
[207.00936890 287.72729492]
[197.81748962 291.86859131]
[187.79281616 293.14642334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[12 48]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[21 40]
[24 38]
[25 37]
[26 36]
[28 35]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
