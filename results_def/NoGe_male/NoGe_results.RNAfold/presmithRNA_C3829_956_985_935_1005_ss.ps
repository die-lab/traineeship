%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUGGUAUUAAGGUUUUUAGGUGAUUGGCCACCAUUCAUGGGGCAAAGGUGAAGUAUGAGGCUCCUAUG\
) } def
/len { sequence length } bind def

/coor [
[111.87756348 134.99017334]
[94.52574921 136.54341125]
[78.39074707 129.97380066]
[67.33158112 140.10765076]
[56.27242279 150.24150085]
[58.16273880 165.64300537]
[50.60983276 179.19783020]
[36.51795197 185.69386292]
[21.30571175 182.63325500]
[10.82252693 171.19287109]
[9.09939861 155.77175903]
[16.79890442 142.29968262]
[30.96042633 135.95689392]
[46.13857269 139.18234253]
[57.19773102 129.04849243]
[68.25688934 118.91463470]
[65.03260040 111.94441986]
[63.31877136 104.45824432]
[63.18944550 96.77949524]
[64.65020752 89.23985291]
[67.63795471 82.16501617]
[72.02363586 75.86058807]
[62.89221191 63.96028519]
[53.76078796 52.05998611]
[44.62936783 40.15968704]
[28.92954445 38.34555817]
[19.17647743 25.90959358]
[21.15648842 10.22982693]
[33.69487381 0.60878581]
[49.35283279 2.75446320]
[58.84077072 15.39386749]
[56.52966690 31.02826309]
[65.66108704 42.92856216]
[74.79251099 54.82886505]
[83.92393494 66.72916412]
[100.95460510 63.06116867]
[117.77309418 67.60392761]
[130.64097595 79.34767151]
[136.69799805 95.68200684]
[151.64093018 96.98934937]
[166.58384705 98.29668427]
[181.52676392 99.60401917]
[196.46968079 100.91135406]
[211.41261292 102.21868896]
[226.38049316 103.19973755]
[241.36621094 103.85402679]
[251.05842590 91.88042450]
[265.77066040 87.95567322]
[279.80685425 93.38240051]
[287.85971069 105.88397980]
[297.41357422 93.65681458]
[312.33898926 89.41281891]
[326.89682007 94.78388977]
[335.48934937 107.70475006]
[334.81250000 123.20705414]
[325.12655640 135.32986450]
[310.15597534 139.41169739]
[295.65725708 133.88301086]
[287.20541382 120.86970520]
[278.09362793 132.62185669]
[263.63787842 136.80459595]
[249.32368469 131.61251831]
[240.71192932 118.83975220]
[225.72619629 118.18546295]
[218.68849182 121.13294220]
[210.10527039 117.16161346]
[195.16235352 115.85427856]
[180.21942139 114.54693604]
[165.27650452 113.23960114]
[150.33358765 111.93226624]
[135.39067078 110.62493134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[22 35]
[23 34]
[24 33]
[25 32]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 64]
[46 63]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
