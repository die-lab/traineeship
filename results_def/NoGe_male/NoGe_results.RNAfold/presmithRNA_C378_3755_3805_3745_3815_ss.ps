%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGUAAAAUUCUUUUUCUUUUUUGCUUCCUGUUGUUUGAAAUGAGGCCGGUGGAGGAAAAGGUGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[57.53595734 359.55181885]
[63.58229828 343.71270752]
[63.58229828 328.71270752]
[63.58229828 313.71270752]
[55.84499741 300.98541260]
[63.58229828 287.18524170]
[63.58229828 272.18524170]
[61.33978653 270.02954102]
[59.96390915 266.71737671]
[59.95879364 262.63745117]
[61.65082169 258.37606812]
[65.11751556 254.63760376]
[67.72224426 239.86549377]
[70.32696533 225.09336853]
[72.93168640 210.32125854]
[75.53640747 195.54914856]
[78.14112854 180.77702332]
[80.74585724 166.00491333]
[83.35057831 151.23278809]
[85.95529938 136.46067810]
[88.56002045 121.68856049]
[91.16474152 106.91644287]
[93.44659424 92.09101868]
[95.40448761 77.21935272]
[89.53466797 62.52731705]
[98.86701202 50.91884995]
[100.82490540 36.04717636]
[102.78279877 21.17550468]
[104.74069214 6.30383205]
[106.69858551 -8.56784058]
[104.35317230 -15.29952240]
[105.78556061 -21.21490669]
[109.53054047 -24.62865829]
[112.77713776 -39.27309799]
[116.02372742 -53.91753769]
[107.32177734 -67.11039734]
[110.57913208 -82.57536316]
[123.86325836 -91.13735199]
[139.29292297 -87.71667480]
[147.71397400 -74.34276581]
[144.13035583 -58.95013428]
[130.66816711 -50.67094421]
[127.42157745 -36.02650452]
[124.17498016 -21.38206482]
[121.57025909 -6.60994768]
[119.61236572 8.26172543]
[117.65447235 23.13339806]
[115.69657898 38.00506973]
[113.73868561 52.87674332]
[119.74855042 66.50505066]
[110.27616119 79.17723846]
[108.31826782 94.04891205]
[110.51857758 102.08978271]
[105.93685913 109.52116394]
[103.33213806 124.29328156]
[100.72741699 139.06539917]
[98.12269592 153.83750916]
[95.51796722 168.60963440]
[92.91324615 183.38174438]
[90.30852509 198.15386963]
[87.70380402 212.92597961]
[85.09908295 227.69810486]
[82.49435425 242.47021484]
[79.88963318 257.24234009]
[78.58229828 272.18524170]
[78.58229828 287.18524170]
[86.31959534 300.98541260]
[78.58229828 313.71270752]
[78.58229828 328.71270752]
[78.58229828 343.71270752]
[84.62863922 359.55181885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[6 66]
[7 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 52]
[24 51]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
