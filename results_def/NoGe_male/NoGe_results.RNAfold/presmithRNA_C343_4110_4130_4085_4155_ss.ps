%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACGUUUCUUUAGUUUUUGGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAUUUGAUAGUAAUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[124.00247955 259.21774292]
[120.75588226 244.57330322]
[117.50928497 229.92886353]
[114.26269531 215.28442383]
[111.01609802 200.63998413]
[99.14035034 195.19021606]
[92.55948639 183.67500305]
[93.93220520 170.28565979]
[102.97286224 160.05070496]
[100.36813354 145.27857971]
[85.00584412 142.72541809]
[71.41714478 135.11845398]
[61.20937729 123.35750580]
[55.58996582 108.83370209]
[55.22360611 93.26500702]
[60.15363312 78.49295807]
[69.79689789 66.26487732]
[83.01274872 58.02716446]
[79.76615906 43.38272476]
[76.51956177 28.73828316]
[73.27296448 14.09384346]
[70.02637482 -0.55059618]
[64.96868134 -8.54203320]
[66.97234344 -15.90424728]
[64.36762238 -30.67636299]
[61.76289749 -45.44847870]
[59.15817261 -60.22059631]
[56.55345154 -74.99271393]
[41.95260239 -79.58332825]
[31.16578102 -90.44165039]
[26.67172432 -105.07250977]
[29.50312996 -120.11384583]
[39.00936127 -132.10926819]
[53.00596237 -138.30230713]
[68.27660370 -137.26986694]
[81.31221771 -129.24917603]
[89.11730957 -116.08335114]
[89.89832306 -100.79778290]
[83.47579193 -86.90499115]
[71.32556915 -77.59743500]
[73.93029022 -62.82531738]
[76.53501129 -48.05320358]
[79.13973236 -33.28108597]
[81.74446106 -18.50897026]
[84.67081451 -3.79719043]
[87.91740417 10.84724998]
[91.16400146 25.49168968]
[94.41059875 40.13613129]
[97.65718842 54.78057098]
[111.86679077 56.30257797]
[124.89434052 62.17729187]
[135.44216919 71.81953430]
[142.45957947 84.26883698]
[145.24758911 98.28512573]
[143.52848816 112.47222900]
[137.47349548 125.41697693]
[127.68576813 135.82992554]
[115.14025116 142.67385864]
[117.74497223 157.44598389]
[132.17835999 167.05836487]
[135.28811646 183.77941895]
[125.66053772 197.39338684]
[128.90713501 212.03782654]
[132.15373230 226.68226624]
[135.40031433 241.32670593]
[138.64691162 255.97114563]
[152.10910034 264.25033569]
[155.69271851 279.64297485]
[147.27166748 293.01687622]
[131.84199524 296.43756104]
[118.55787659 287.87557983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[9 59]
[10 58]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
