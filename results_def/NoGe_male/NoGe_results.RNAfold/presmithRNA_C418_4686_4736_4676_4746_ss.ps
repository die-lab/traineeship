%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGCUGGGGACAAGCUCAGCUGGUUGCUAAAAAUGUUAUUUUUUUGAUGGGGGUGAAGUAGGCACAAAA\
) } def
/len { sequence length } bind def

/coor [
[89.72042847 119.27846527]
[83.91192627 114.78183746]
[70.05373383 120.52208710]
[60.26497650 132.95152283]
[45.54557419 130.67370605]
[31.68738174 136.41395569]
[17.82918739 142.15420532]
[3.97099495 147.89445496]
[-9.88719845 153.63470459]
[-23.74539185 159.37495422]
[-29.56111526 174.07029724]
[-44.09761429 180.27236938]
[-58.73064041 174.30160522]
[-64.77867889 159.70034790]
[-58.65353775 145.13125610]
[-43.98915100 139.23793030]
[-29.48564339 145.51676941]
[-15.62744999 139.77651978]
[-1.76925659 134.03627014]
[12.08893681 128.29602051]
[25.94713020 122.55576324]
[39.80532074 116.81551361]
[48.60285187 104.79666138]
[64.31348419 106.66389465]
[78.17167664 100.92364502]
[89.07607269 81.07920074]
[111.71405792 81.55794525]
[123.61436462 72.42652130]
[135.51466370 63.29509735]
[147.41496277 54.16367722]
[144.23786926 42.03827286]
[145.47343445 29.60013962]
[150.94288635 18.40032196]
[159.94096375 9.82684040]
[171.32688904 4.93267488]
[183.66886902 4.30648327]
[195.42417908 8.00189781]
[205.13200378 15.53389740]
[218.12239075 8.03389740]
[231.11277771 0.53389704]
[244.10314941 -6.96610308]
[257.09353638 -14.46610260]
[270.08392334 -21.96610260]
[283.07427979 -29.46610260]
[296.06466675 -36.96610260]
[301.58908081 -52.02798843]
[316.85430908 -56.96286011]
[330.15014648 -47.98510361]
[331.27719116 -31.98168564]
[319.37084961 -21.22906113]
[303.56466675 -23.97572136]
[290.57427979 -16.47572136]
[277.58392334 -8.97572231]
[264.59353638 -1.47572184]
[251.60314941 6.02427816]
[238.61277771 13.52427769]
[225.62239075 21.02427864]
[212.63200378 28.52427864]
[213.63595581 46.25547028]
[205.72300720 62.24603653]
[190.88201904 72.29499054]
[172.93353271 73.71799469]
[156.54638672 66.06398010]
[144.64608765 75.19539642]
[132.74578857 84.32682037]
[120.84548187 93.45824432]
[121.83542633 100.73686218]
[120.35704803 107.93218231]
[116.57746124 114.23082733]
[110.92392731 118.92079926]
[104.03553009 121.47191620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[27 66]
[28 65]
[29 64]
[30 63]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
