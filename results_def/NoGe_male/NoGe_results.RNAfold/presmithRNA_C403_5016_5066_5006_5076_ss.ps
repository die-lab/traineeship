%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCCGGUGUUUUUAGAAUAAACGGCCGCGGUACUCUGACCGUGCAAAGGUAGCAUAAUCAUUUGUCCU\
) } def
/len { sequence length } bind def

/coor [
[70.30166626 121.71597290]
[65.76168823 113.46523285]
[63.46500397 104.33225250]
[48.52208328 103.02491760]
[33.57916260 101.71757507]
[18.63624191 100.41024017]
[3.66835880 99.42919922]
[-11.31736469 98.77490234]
[-26.30308723 98.12061310]
[-41.28881073 97.46632385]
[-56.28524017 97.13909912]
[-71.28524017 97.13909912]
[-86.28524017 97.13909912]
[-101.28524017 97.13909912]
[-111.19760895 109.23368073]
[-126.57466125 112.07630157]
[-140.15580750 104.32476044]
[-145.52845764 89.63909912]
[-140.15580750 74.95343781]
[-126.57466125 67.20189667]
[-111.19760895 70.04451752]
[-101.28524017 82.13909912]
[-86.28524017 82.13909912]
[-71.28524017 82.13909912]
[-56.28524017 82.13909912]
[-49.38280869 78.88744354]
[-40.63452148 82.48059845]
[-25.64879608 83.13488770]
[-10.66307354 83.78918457]
[4.32264948 84.44347382]
[11.36034870 81.49599457]
[19.94357872 85.46732330]
[34.88649750 86.77465820]
[49.82941818 88.08199310]
[64.77233887 89.38932800]
[76.78748322 71.45611572]
[96.79345703 63.34904480]
[117.90327454 67.85894775]
[132.84994507 83.43331146]
[147.33883667 79.55102539]
[161.82772827 75.66873932]
[169.76177979 62.26394653]
[184.51087952 58.53315353]
[197.24140930 66.17967224]
[211.73028564 62.29738617]
[226.21917725 58.41510010]
[240.70806885 54.53281784]
[247.15237427 40.28483582]
[261.26974487 33.55920410]
[276.39434814 37.53155899]
[285.38488770 50.32627106]
[283.99621582 65.90207672]
[272.88409424 76.90454865]
[257.29528809 78.13866425]
[244.59034729 69.02170563]
[230.10147095 72.90399170]
[215.61257935 76.78627777]
[201.12368774 80.66856384]
[193.92198181 93.65590668]
[179.28349304 97.79949188]
[165.71000671 90.15763092]
[151.22111511 94.03990936]
[136.73223877 97.92219543]
[136.05636597 107.31524658]
[133.01808167 116.22899628]
[127.81645966 124.07942200]
[120.79230499 130.35217285]
[112.40583801 134.63624573]
[103.20654297 136.65095520]
[93.79715729 136.26429749]
[84.79417419 133.50160217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 30]
[8 29]
[9 28]
[10 27]
[11 25]
[12 24]
[13 23]
[14 22]
[39 63]
[40 62]
[41 61]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
