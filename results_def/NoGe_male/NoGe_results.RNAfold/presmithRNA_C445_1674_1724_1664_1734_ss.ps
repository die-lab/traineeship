%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCAUGAUCAUGCUAUGUUGGUUCUUAUUUUGAUUGUUAGGCUUGUCGGGUACGCUGCUUUUACGUUG\
) } def
/len { sequence length } bind def

/coor [
[89.69960785 127.49152374]
[82.19749451 123.34422302]
[76.21317291 117.20664978]
[72.25685883 109.60208893]
[70.66585541 101.17887115]
[56.02141190 97.93228149]
[41.37697220 94.68568420]
[26.22926140 99.25267792]
[15.47833443 88.94409180]
[0.83389401 85.69750214]
[-13.81054592 82.45090485]
[-26.16996574 93.77497864]
[-42.66804886 95.59865570]
[-56.91760254 87.41091919]
[-63.51688385 72.53917694]
[-78.28900146 69.93445587]
[-93.06111908 67.32973480]
[-107.83322906 64.72501373]
[-124.48166656 67.92905426]
[-132.16925049 52.81821823]
[-119.77707672 41.24797821]
[-105.22850800 49.95289612]
[-90.45639038 52.55761719]
[-75.68428040 55.16234207]
[-60.91216278 57.76706314]
[-52.07041931 47.53476334]
[-39.19767380 43.04740143]
[-25.69633102 45.60657120]
[-15.19290543 54.63592148]
[-10.56395149 67.80646515]
[4.08048820 71.05306244]
[18.72492790 74.29965210]
[32.82517242 69.50044250]
[44.62356567 80.04124451]
[59.26800537 83.28784180]
[73.91244507 86.53443146]
[90.73345184 72.14299011]
[112.82334137 73.59083557]
[127.62197876 90.05474091]
[142.56489563 88.74740601]
[157.20162964 77.81868744]
[172.84272766 85.47153473]
[187.71438599 83.51364136]
[202.58605957 81.55574799]
[217.45773315 79.59786224]
[226.08108521 69.73300171]
[238.72436523 68.56084442]
[248.37744141 76.17150879]
[256.96066284 72.20018005]
[263.99835205 75.14765930]
[278.98410034 74.49337006]
[292.51672363 65.23056030]
[307.18591309 72.56180573]
[307.90124512 88.94535065]
[293.92684937 97.52719879]
[279.63836670 89.47908783]
[264.65264893 90.13338470]
[249.68476868 91.11442566]
[236.07081604 101.97122955]
[219.41563416 94.46952820]
[204.54396057 96.42742157]
[189.67228699 98.38531494]
[174.80061340 100.34320831]
[167.02360535 109.86277771]
[154.42631531 111.45491028]
[143.87223816 103.69032288]
[128.92932129 104.99765778]
[126.25247192 113.14114380]
[121.33740997 120.16425323]
[114.60317230 125.46820068]
[106.62390900 128.60079956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[9 32]
[10 31]
[11 30]
[15 25]
[16 24]
[17 23]
[18 22]
[39 67]
[40 66]
[42 63]
[43 62]
[44 61]
[45 60]
[48 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
