%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUCUGCUGGUGGGUUCUGGCUAGUUUGGUUCUGGCUGUUUGCUUGGCUUUGCCCAGGUUUGCACAU\
) } def
/len { sequence length } bind def

/coor [
[87.22650146 119.25498962]
[75.32620239 128.38641357]
[63.42590332 137.51783752]
[51.52560425 146.64926147]
[39.62530518 155.78067017]
[33.38706207 170.32009888]
[18.57966614 171.92956543]
[6.67936707 181.06098938]
[0.90699917 196.41062927]
[-15.31432056 198.81912231]
[-25.29748917 185.80880737]
[-18.77267838 170.76358032]
[-2.45205450 169.16069031]
[9.44824600 160.02926636]
[14.83529949 146.14297485]
[30.49388123 143.88037109]
[42.39418030 134.74896240]
[54.29448318 125.61753082]
[66.19478607 116.48611450]
[78.09508514 107.35469055]
[76.50127411 92.25733185]
[84.88370514 78.38510132]
[100.89429474 72.00324249]
[95.76399231 57.90785217]
[90.63368988 43.81246185]
[85.50338745 29.71707344]
[80.37308502 15.62168312]
[75.24278259 1.52629387]
[60.48736572 -3.65169692]
[52.55691910 -17.12915993]
[55.19595718 -32.54244995]
[67.15840912 -42.61388016]
[82.79597473 -42.58803177]
[94.72506714 -32.47711182]
[97.31313324 -17.05518150]
[89.33817291 -3.60400820]
[94.46847534 10.49138069]
[99.59877777 24.58677101]
[104.72908020 38.68215942]
[109.85938263 52.77754974]
[114.98968506 66.87294006]
[127.08635712 75.74258423]
[142.07208252 76.39687347]
[153.66981506 65.99830627]
[168.85815430 66.87532806]
[178.70011902 77.99608612]
[193.68585205 78.65038300]
[208.67156982 79.30467224]
[223.65728760 79.95896149]
[238.64302063 80.61325073]
[253.62873840 81.26753998]
[265.11010742 70.40687561]
[280.90573120 70.92927551]
[291.64440918 82.52481842]
[290.95504761 98.31406403]
[279.24661255 108.92953491]
[263.46554565 108.07327271]
[252.97444153 96.25326538]
[237.98872375 95.59897614]
[223.00300598 94.94468689]
[208.01727295 94.29039001]
[193.03155518 93.63610077]
[178.04583740 92.98181152]
[167.27207947 103.20246887]
[152.06510925 102.75240326]
[141.41778564 91.38259888]
[126.43206024 90.72830963]
[127.11035919 102.12664032]
[123.22364044 112.50474548]
[115.69510651 120.17221069]
[106.01483154 123.99918365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[7 14]
[8 13]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[42 67]
[43 66]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
