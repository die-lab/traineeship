%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCGGCAAAUUAGUGACUCCGUCUGUUUAGCAAAAACAUAGCUUGUUGUUGGUUUUAUAAUAGGUGAUU\
) } def
/len { sequence length } bind def

/coor [
[183.34837341 152.40588379]
[169.94953918 155.02117920]
[156.38481140 153.28915405]
[144.03123474 147.37095642]
[134.14750671 137.85343933]
[127.74575043 125.69100952]
[125.48785400 112.10989380]
[110.71573639 109.50517273]
[97.51267242 114.10633087]
[86.67953491 105.26694489]
[71.90742493 102.66222382]
[56.97333527 107.88559723]
[45.78298950 98.05577850]
[31.01087189 95.45105743]
[16.23875618 92.84632874]
[1.41333354 90.56448364]
[-13.45833969 88.60659027]
[-28.39386177 95.37875366]
[-41.56712723 85.61161041]
[-39.42660904 69.35275269]
[-24.17428970 63.32791138]
[-11.50044632 73.73491669]
[3.37122655 75.69281006]
[10.63903522 73.36991882]
[18.84347916 78.07421875]
[33.61559677 80.67893982]
[48.38771057 83.28366089]
[62.26519394 77.87397766]
[74.51214600 87.89010620]
[89.28426361 90.49482727]
[102.48732758 85.89366913]
[113.32046509 94.73305511]
[128.09257507 97.33777618]
[136.72686768 83.17047119]
[150.03269958 73.32015228]
[166.03402710 69.21604156]
[182.36715698 71.43646240]
[196.62986755 79.62754822]
[206.73475647 92.55931854]
[211.21469116 108.31027222]
[226.15760803 109.61760712]
[240.57962036 103.11251831]
[252.58410645 111.92962646]
[267.52703857 113.23696136]
[282.46994019 114.54430389]
[297.41287231 115.85163879]
[312.35577393 117.15897369]
[327.29870605 118.46630859]
[342.24163818 119.77364349]
[357.18453979 121.08097839]
[372.12747192 122.38832092]
[383.05624390 111.20368195]
[398.62252808 109.71207428]
[411.47637939 118.61779022]
[415.54864502 133.71583557]
[408.91650391 147.87734985]
[394.71145630 154.41571045]
[379.64068604 150.24371338]
[370.82012939 137.33123779]
[355.87722778 136.02389526]
[340.93429565 134.71656799]
[325.99136353 133.40922546]
[311.04846191 132.10189819]
[296.10552979 130.79455566]
[281.16259766 129.48722839]
[266.21969604 128.17988586]
[251.27676392 126.87255096]
[237.92358398 133.47114563]
[224.85026550 124.56053162]
[209.90734863 123.25319672]
[204.38465881 135.66189575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[10 30]
[11 29]
[13 27]
[14 26]
[15 25]
[16 23]
[17 22]
[40 70]
[41 69]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
