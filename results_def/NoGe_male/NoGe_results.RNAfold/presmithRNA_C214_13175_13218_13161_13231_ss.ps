%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAAAAGGUCUGCUUUGCAUGUAGAAAAUAAGUGUUUAUCUUUGAGGCCAAGUCUGUGGUAGCUUAAA\
) } def
/len { sequence length } bind def

/coor [
[17.49814987 163.54490662]
[10.74090862 169.38638306]
[2.89323711 173.63148499]
[-5.67481852 176.08488464]
[-14.56028366 176.63560486]
[-23.34620667 175.26206970]
[-31.62122154 172.03288269]
[-38.99880981 167.10345459]
[-45.13536453 160.70848083]
[-49.74616623 153.15081787]
[-52.61862564 144.78706360]
[-53.62205505 136.01086426]
[-68.39417267 133.40614319]
[-83.16629028 130.80142212]
[-97.93840790 128.19670105]
[-112.71051788 125.59197235]
[-124.57250214 135.78155518]
[-140.20954895 135.91078186]
[-152.23832703 125.91867065]
[-154.97921753 110.52316284]
[-147.13806152 96.99356079]
[-132.41719055 91.71812439]
[-117.76737976 97.18775177]
[-110.10579681 110.81986237]
[-95.33367920 113.42458344]
[-80.56156921 116.02930450]
[-65.78945160 118.63402557]
[-51.01733398 121.23874664]
[-37.22503662 102.68680573]
[-15.48133183 94.55680847]
[7.28821421 99.55037689]
[23.77027512 116.17117310]
[38.07603073 111.66058350]
[52.38178253 107.14999390]
[66.68753815 102.63941193]
[80.99329376 98.12882233]
[87.77673340 85.32526398]
[101.59563446 80.96817780]
[114.49612427 87.56542206]
[128.80187988 83.05483246]
[143.10763550 78.54425049]
[157.41339111 74.03366089]
[160.22517395 70.41004181]
[163.69842529 68.08215332]
[167.35005188 67.09938812]
[170.73037720 67.35062408]
[173.47222900 68.58889771]
[175.32841492 70.47013855]
[190.27133179 69.16280365]
[205.21424866 67.85546875]
[220.15718079 66.54813385]
[235.40905762 59.14432907]
[246.74566650 71.75058746]
[237.77033997 86.13391113]
[221.46450806 81.49105072]
[206.52159119 82.79838562]
[191.57867432 84.10572815]
[176.63575745 85.41306305]
[161.92396545 88.33941650]
[147.61820984 92.85000610]
[133.31246948 97.36058807]
[119.00670624 101.87117767]
[112.22326660 114.67473602]
[98.40436554 119.03182220]
[85.50387573 112.43457794]
[71.19812775 116.94516754]
[56.89236832 121.45574951]
[42.58661652 125.96633911]
[28.28086090 130.47692871]
[28.37021828 139.44813538]
[26.52818108 148.21855164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[39 62]
[40 61]
[41 60]
[42 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
