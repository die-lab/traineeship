%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGUUUAAGAAAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[77.76636505 194.40196228]
[66.70681000 204.53538513]
[51.70898819 204.27970886]
[41.00126266 193.77520752]
[40.45775223 178.78652954]
[28.17047310 187.39016724]
[15.88319206 195.99382019]
[3.59591150 204.59745789]
[-0.59475005 220.08352661]
[-15.37176895 226.33006287]
[-29.39947891 218.54527283]
[-31.91702461 202.70098877]
[-20.99315834 190.95156860]
[-5.00773478 192.31018066]
[7.27954578 183.70654297]
[19.56682587 175.10289001]
[31.85410690 166.49923706]
[42.91326523 156.36538696]
[52.55508041 144.87472534]
[62.19689560 133.38406372]
[71.83870697 121.89338684]
[74.09252930 107.17029572]
[88.89022064 101.57218933]
[98.27907562 89.87392426]
[107.41049194 77.97362518]
[116.54191589 66.07331848]
[125.67333984 54.17302322]
[134.80476379 42.27272034]
[137.06735229 26.61413956]
[150.95364380 21.22708511]
[160.08506775 9.32678509]
[169.21649170 -2.57351518]
[154.21925354 -2.86193848]
[142.68084717 -12.44655991]
[139.64648438 -27.13644218]
[146.44297791 -40.50834274]
[160.09851074 -46.71531677]
[174.64210510 -43.04331970]
[183.71450806 -31.09796143]
[183.34860229 -16.10206985]
[195.63587952 -24.70571709]
[207.92315674 -33.30936432]
[220.21044922 -41.91300964]
[232.49772644 -50.51665497]
[236.68838501 -66.00270844]
[251.46540833 -72.24925232]
[265.49310303 -64.46446991]
[268.01065063 -48.62017822]
[257.08679199 -36.87076569]
[241.10136414 -38.22937393]
[228.81408691 -29.62572861]
[216.52680969 -21.02208328]
[204.23953247 -12.41843605]
[191.95223999 -3.81478953]
[181.11679077 6.55790615]
[171.98536682 18.45820618]
[162.85394287 30.35850716]
[161.24449158 45.16590118]
[146.70506287 51.40414429]
[137.57363892 63.30444336]
[128.44221497 75.20474243]
[119.31079865 87.10504150]
[110.17937469 99.00534058]
[108.06446838 107.06909180]
[100.38088989 111.21400452]
[97.43742371 126.75898743]
[83.32937622 131.53520203]
[73.68756104 143.02586365]
[64.04574585 154.51654053]
[54.40393448 166.00720215]
[69.28958893 167.85575867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[18 70]
[19 69]
[20 68]
[21 67]
[23 65]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[30 57]
[31 56]
[32 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
