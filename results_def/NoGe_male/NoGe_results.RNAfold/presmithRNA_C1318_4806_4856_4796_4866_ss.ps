%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUAUUUCUCUC\
) } def
/len { sequence length } bind def

/coor [
[101.43473053 264.73120117]
[101.56421661 249.46864319]
[108.31076050 235.77751160]
[120.33483887 226.37622070]
[117.08824158 211.73178101]
[113.84164429 197.08734131]
[110.59505463 182.44290161]
[97.93420410 174.68154907]
[94.43308258 159.87625122]
[102.65974426 146.64901733]
[99.41314697 132.00457764]
[96.16654968 117.36013031]
[87.16269684 112.29931641]
[82.49174500 103.08717346]
[83.73027039 92.83303833]
[90.46022034 84.99792480]
[88.50232697 70.12625122]
[86.54443359 55.25458145]
[77.07204437 42.58239365]
[83.08190918 28.95408249]
[81.12401581 14.08240986]
[79.16612244 -0.78926271]
[77.20822906 -15.66093540]
[75.25033569 -30.53260803]
[61.15890503 -36.48060989]
[51.99715424 -48.60328293]
[50.14570236 -63.58455276]
[56.00239944 -77.38872528]
[67.90216064 -86.34758759]
[65.94426727 -101.21926117]
[63.98637009 -116.09093475]
[51.29698563 -125.51192474]
[49.06856537 -141.15832520]
[58.62319183 -153.74739075]
[74.29227448 -155.81027222]
[86.77961731 -146.12307739]
[88.67671967 -130.43305969]
[78.85804749 -118.04882812]
[80.81594086 -103.17715454]
[82.77382660 -88.30548096]
[96.58683777 -82.73176575]
[105.81675720 -70.91378784]
[107.90583038 -55.96379852]
[102.19383240 -41.88296127]
[90.12200928 -32.49050140]
[92.07990265 -17.61882782]
[94.03779602 -2.74715567]
[95.99568939 12.12451744]
[97.95358276 26.99619102]
[107.28593445 38.60466003]
[101.41610718 53.29668808]
[103.37400055 68.16835785]
[105.33189392 83.04003143]
[117.50825500 96.91282654]
[110.81098938 114.11354065]
[114.05758667 128.75798035]
[117.30418396 143.40242004]
[130.35014343 151.91363525]
[133.43403625 166.81143188]
[125.23949432 179.19630432]
[128.48608398 193.84074402]
[131.73268127 208.48518372]
[134.97927856 223.12962341]
[149.84994507 226.56849670]
[161.75051880 236.12565613]
[168.31809998 249.90351868]
[168.24873352 265.16647339]
[161.55615234 278.88406372]
[149.56918335 288.33264160]
[134.66787720 291.63616943]
[119.81085205 288.13876343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[10 57]
[11 56]
[12 55]
[16 53]
[17 52]
[18 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[29 40]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
