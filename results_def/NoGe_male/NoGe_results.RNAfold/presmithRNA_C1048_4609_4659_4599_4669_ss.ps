%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUGAUAUGCUUUCGAACAGGGUGAUAGCUUGUUUCCACUUUUUCUUUUUAGAAGAGGCGGUGUUCUUUA\
) } def
/len { sequence length } bind def

/coor [
[67.28078461 155.86540222]
[64.92362976 141.05177307]
[68.23699951 126.42229462]
[76.74687958 114.06989288]
[89.23748016 105.76101685]
[74.46536255 103.15629578]
[59.69324493 100.55157471]
[44.92112732 97.94684601]
[29.98704338 103.17022705]
[18.79669571 93.34040833]
[4.02457905 90.73568726]
[-10.74753761 88.13095856]
[-25.68162155 93.35433960]
[-36.87197113 83.52452087]
[-51.64408493 80.91979980]
[-66.41619873 78.31507111]
[-78.27818298 88.50464630]
[-93.91522980 88.63388824]
[-105.94401550 78.64176941]
[-108.68490601 63.24626160]
[-100.84373474 49.71665955]
[-86.12287140 44.44122314]
[-71.47306061 49.91085434]
[-63.81148148 63.54295731]
[-49.03936386 66.14768219]
[-34.26724625 68.75240326]
[-20.38976288 63.34271622]
[-8.14281464 73.35884857]
[6.62930155 75.96356964]
[21.40141869 78.56829071]
[35.27890396 73.15860748]
[47.52585220 83.17473602]
[62.29796600 85.77945709]
[77.07008362 88.38417816]
[91.84220123 90.98889923]
[98.62030792 87.96772003]
[105.86349487 89.45332336]
[119.72168732 83.71306610]
[129.51045227 71.28363800]
[144.22984314 73.56145477]
[158.08804321 67.82120514]
[171.94622803 62.08095169]
[185.80442810 56.34070206]
[199.66262817 50.60044861]
[213.52081299 44.86019897]
[227.37901306 39.11994553]
[241.23719788 33.37969589]
[250.78565979 20.04706764]
[267.07760620 21.91903114]
[273.35330200 37.06986618]
[263.15682983 49.91369629]
[246.97744751 47.23788834]
[233.11926270 52.97813797]
[219.26106262 58.71839142]
[205.40287781 64.45864105]
[191.54467773 70.19889069]
[177.68649292 75.93914795]
[163.82829285 81.67939758]
[149.97010803 87.41964722]
[141.17257690 99.43849945]
[125.46193695 97.57125854]
[111.60374451 103.31151581]
[125.59512329 108.71903229]
[136.57730103 118.93626404]
[142.97912598 132.50154114]
[143.88478088 147.47416687]
[139.16467285 161.71217346]
[129.49407959 173.17863464]
[116.25648499 180.23313904]
[101.34568024 181.86647034]
[86.89481354 177.84497070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
