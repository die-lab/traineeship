%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGAGGAUGCUUAUCCGUGCGGAGUUGGGGCAGCCGGGGGCUCUUUUGGGGGAUGAUCAUUUGUAUAAU\
) } def
/len { sequence length } bind def

/coor [
[94.70172882 338.07812500]
[103.87103271 324.91363525]
[102.56369019 309.97073364]
[91.50087738 303.01748657]
[86.47934723 290.74182129]
[89.58798981 277.64617920]
[99.88722992 268.67883301]
[99.23294067 253.69311523]
[98.57864380 238.70738220]
[97.92435455 223.72166443]
[97.27006531 208.73594666]
[88.98497009 196.35827637]
[96.11295319 182.23374939]
[95.45866394 167.24801636]
[94.80437469 152.26229858]
[94.15007782 137.27658081]
[93.49578857 122.29084778]
[92.84149933 107.30513000]
[89.27833557 99.76850128]
[92.50000000 91.65440369]
[84.76270294 77.85423279]
[92.50000000 65.12696075]
[92.50000000 50.12696075]
[92.50000000 35.12696075]
[92.50000000 20.12696075]
[89.52928162 15.06274223]
[89.08805084 9.90612888]
[90.72647095 5.72279310]
[93.60937500 3.20118451]
[95.56726837 -11.67048836]
[97.52516174 -26.54216194]
[99.48305511 -41.41383362]
[101.44094849 -56.28550720]
[90.09297943 -66.86867523]
[87.16596985 -82.10718536]
[93.78540802 -96.14152527]
[107.40598297 -103.57520294]
[122.79030609 -101.54981232]
[134.02279663 -90.84416962]
[136.78433228 -75.57480621]
[130.01303101 -61.61309814]
[116.31262207 -54.32761383]
[114.35472870 -39.45594025]
[112.39683533 -24.58426857]
[110.43894196 -9.71259499]
[108.48104858 5.15907764]
[107.50000000 20.12696075]
[107.50000000 35.12696075]
[107.50000000 50.12696075]
[107.50000000 65.12696075]
[115.23729706 77.85423279]
[107.50000000 91.65440369]
[107.82722473 106.65083313]
[108.48151398 121.63655853]
[109.13580322 136.62228394]
[109.79009247 151.60800171]
[110.44438934 166.59373474]
[111.09867859 181.57945251]
[119.43056488 195.02899170]
[112.25579071 208.08164978]
[112.91007996 223.06736755]
[113.56436920 238.05310059]
[114.21865845 253.03881836]
[114.87294769 268.02453613]
[127.92819214 279.43862915]
[128.82881165 296.42254639]
[117.50661469 308.66339111]
[118.81394958 323.60629272]
[130.12992859 334.97854614]
[128.15109253 350.89910889]
[114.39541626 359.15505981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[20 52]
[22 50]
[23 49]
[24 48]
[25 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
