%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUUUUACGUUUAGGACUUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAGUGAU\
) } def
/len { sequence length } bind def

/coor [
[159.23764038 345.44342041]
[155.99104309 330.79898071]
[152.74444580 316.15451050]
[149.49786377 301.51007080]
[145.93257141 286.93994141]
[142.05027771 272.45108032]
[138.16799927 257.96218872]
[134.28570557 243.47329712]
[130.40342712 228.98440552]
[126.52114105 214.49551392]
[122.63885498 200.00663757]
[118.75656891 185.51774597]
[114.55913544 171.11698914]
[110.04854584 156.81123352]
[105.53795624 142.50549316]
[101.02737427 128.19973755]
[96.51678467 113.89397430]
[86.33901215 104.30729675]
[89.17745972 90.61660767]
[78.95038605 88.67578125]
[70.28579712 83.01422882]
[64.46830750 74.52536011]
[62.33975220 64.51756287]
[64.17754364 54.51262283]
[69.65947723 46.01430130]
[77.91911316 40.28234482]
[75.96121979 25.41067314]
[66.48883057 12.73848343]
[72.49869537 -0.88982564]
[70.54080200 -15.76149845]
[68.58290863 -30.63317108]
[66.62501526 -45.50484467]
[56.21800995 -58.17868805]
[62.24285507 -73.43100739]
[78.50170898 -75.57152557]
[88.26885223 -62.39826202]
[81.49668884 -47.46273804]
[83.45458221 -32.59106445]
[85.41247559 -17.71939087]
[87.37036896 -2.84771848]
[96.70271301 8.76074982]
[90.83289337 23.45277977]
[92.79078674 38.32445145]
[110.00074005 48.78256226]
[114.61926270 68.66778564]
[103.48321533 86.10602570]
[113.66098785 95.69270325]
[110.82254028 109.38339233]
[115.33312988 123.68914795]
[119.84371185 137.99490356]
[124.35430145 152.30065918]
[128.86488342 166.60641479]
[134.59983826 174.12663269]
[133.24545288 181.63545227]
[137.12774658 196.12434387]
[141.01002502 210.61323547]
[144.89231873 225.10211182]
[148.77459717 239.59100342]
[152.65689087 254.07989502]
[156.53916931 268.56878662]
[160.42146301 283.05767822]
[165.82292175 290.82089233]
[164.14230347 298.26348877]
[167.38888550 312.90792847]
[170.63548279 327.55236816]
[173.88208008 342.19680786]
[187.34426880 350.47601318]
[190.92788696 365.86862183]
[182.50683594 379.24255371]
[167.07716370 382.66320801]
[153.79304504 374.10122681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[19 46]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
