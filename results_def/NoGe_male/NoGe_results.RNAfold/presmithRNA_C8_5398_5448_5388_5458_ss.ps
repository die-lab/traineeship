%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUUGAGGAAGAAGGUUGCGACCUCGAUGUUGACUUGCCGCCCCCUCUUUUAGGUGUAGCAGCUGGGAG\
) } def
/len { sequence length } bind def

/coor [
[140.65551758 210.93379211]
[125.71889496 209.55628967]
[114.22823334 199.91447449]
[110.27794647 185.44398499]
[115.27562714 171.30102539]
[127.44047546 162.52513123]
[142.43782043 162.24336243]
[132.79602051 150.75270081]
[123.15419769 139.26202393]
[113.51238251 127.77136230]
[100.11521912 130.88397217]
[86.69519806 127.87140656]
[75.91390228 119.33113861]
[69.90956879 106.95694733]
[69.87303925 93.20300293]
[75.81154633 80.79708862]
[66.68012238 68.89678955]
[57.54870224 56.99649048]
[40.46720886 50.52399826]
[38.51760483 33.22055817]
[28.62741661 21.94296074]
[18.49356270 10.88380051]
[8.35970974 -0.17535961]
[-1.77414334 -11.23451996]
[-17.57233620 -11.67341232]
[-28.37215614 -23.21201897]
[-27.76626015 -39.00468826]
[-16.11411667 -49.68191147]
[-0.32873476 -48.90908051]
[10.22469807 -37.14470291]
[9.28501701 -21.36837196]
[19.41886902 -10.30921268]
[29.55272293 0.74994731]
[39.68657684 11.80910778]
[46.74716568 14.70132923]
[50.00827026 23.57874298]
[62.21557236 25.02294731]
[70.32688141 34.79193497]
[69.44900513 47.86506653]
[78.58042145 59.76536942]
[87.71184540 71.66566467]
[103.46010590 69.31024933]
[118.28857422 75.11302948]
[128.25541687 87.53146362]
[130.71118164 103.26438904]
[125.00305176 118.12954712]
[134.64486694 129.62020874]
[144.28668213 141.11088562]
[153.92849731 152.60154724]
[165.41915894 162.24336243]
[178.40954590 169.74336243]
[191.39991760 177.24336243]
[204.39030457 184.74336243]
[217.38069153 192.24336243]
[230.37106323 199.74336243]
[246.19100952 199.94274902]
[253.34451294 213.00708008]
[266.33489990 220.50708008]
[283.07513428 223.19036865]
[285.13088989 240.01921082]
[269.52880859 246.65332031]
[258.83489990 233.49746704]
[245.84451294 225.99746704]
[230.95372009 226.33453369]
[222.87106323 212.73374939]
[209.88069153 205.23374939]
[196.89030457 197.73374939]
[183.89991760 190.23374939]
[170.90954590 182.73374939]
[157.91915894 175.23374939]
[160.24594116 190.05218506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 49]
[8 48]
[9 47]
[10 46]
[16 41]
[17 40]
[18 39]
[20 36]
[21 34]
[22 33]
[23 32]
[24 31]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
