%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUUUGAUCUCUUUUUCUUUUGUCGCUGGUUCGGUUUUUGAUAAAACAUGUUUUUUUUAGGGUAUAGGU\
) } def
/len { sequence length } bind def

/coor [
[40.90417099 185.68104553]
[37.09122849 191.45451355]
[31.83038902 195.89710999]
[25.56069756 198.66258240]
[18.79855537 199.54360962]
[12.09519577 198.48725891]
[5.99174929 195.59774780]
[0.97556299 191.12654114]
[-12.88263035 196.86679077]
[-16.37393761 211.98600769]
[-28.10737038 222.14012146]
[-43.57118225 223.42469788]
[-56.81922531 215.34576416]
[-62.75735092 201.00985718]
[-59.10223389 185.92941284]
[-47.25934219 175.90318298]
[-31.78250313 174.78643799]
[-18.62288094 183.00860596]
[-4.76468849 177.26835632]
[5.91688538 155.22106934]
[30.99542236 154.23397827]
[42.05458069 144.10012817]
[53.11374283 133.96627808]
[64.17290497 123.83242798]
[75.23206329 113.69857025]
[86.06752014 103.32587433]
[89.87144470 89.87144470]
[103.32587433 86.06752014]
[113.93247986 75.46092224]
[124.53907776 64.85431671]
[135.14567566 54.24771500]
[133.31997681 33.63775635]
[146.59861755 18.13194656]
[166.69305420 16.80216217]
[175.29670715 4.51488066]
[183.63024902 -7.95716333]
[191.68974304 -20.60803604]
[199.74923706 -33.25890732]
[207.80873108 -45.90977859]
[215.86822510 -58.56064987]
[216.04258728 -74.95886993]
[230.46189880 -82.77013397]
[244.29280090 -73.95887756]
[243.30725098 -57.58936691]
[228.51910400 -50.50115585]
[220.45960999 -37.85028458]
[212.40011597 -25.19941330]
[204.34062195 -12.54854107]
[196.28112793 0.10233058]
[195.31486511 7.67089701]
[187.58398438 13.11852741]
[178.98033142 25.40580750]
[183.66000366 34.30398941]
[184.59844971 44.37336731]
[181.60881042 54.09645844]
[175.09968567 61.99061966]
[166.01979065 66.83412170]
[155.71998596 67.85512543]
[145.75228882 64.85431671]
[135.14567566 75.46092224]
[124.53907776 86.06752014]
[113.93247986 96.67412567]
[110.12855530 110.12855530]
[96.67412567 113.93247986]
[92.65171051 122.49188995]
[85.36591339 124.75772858]
[74.30675507 134.89158630]
[63.24759674 145.02543640]
[52.18843460 155.15928650]
[41.12927628 165.29315186]
[43.02767563 172.05009460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 19]
[9 18]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[26 64]
[28 62]
[29 61]
[30 60]
[31 59]
[34 52]
[35 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
