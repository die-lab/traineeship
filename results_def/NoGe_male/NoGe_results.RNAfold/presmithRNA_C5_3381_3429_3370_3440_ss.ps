%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGGGCUCAUACCCCGGAAAUGAGUGUUGUGGUGGGCUCCUCUGCUGGUGGGUUCUGGCUAGUUUGGUU\
) } def
/len { sequence length } bind def

/coor [
[153.64230347 274.53747559]
[163.85119629 263.19104004]
[158.11094666 249.33283997]
[152.37069702 235.47465515]
[146.63043213 221.61645508]
[140.89018250 207.75825500]
[135.14993286 193.90007019]
[129.10873413 180.17039490]
[122.76946259 166.57577515]
[116.43019104 152.98115540]
[110.09091187 139.38655090]
[103.75164032 125.79193115]
[90.43321228 124.24407196]
[79.64663696 116.28001404]
[74.24658203 104.00745392]
[75.66217041 90.67431641]
[83.51876831 79.80922699]
[77.77851105 65.95103455]
[72.03826141 52.09284210]
[66.29801178 38.23464584]
[55.66402054 34.49762726]
[49.12247467 25.59448051]
[48.74964523 14.77645874]
[54.42370224 5.82187986]
[49.91311264 -8.48387432]
[45.40252686 -22.78962898]
[40.89194107 -37.09538269]
[29.36295319 -47.93019104]
[32.91498184 -62.39505768]
[18.78244209 -69.46942902]
[13.87090683 -84.49116516]
[21.09430504 -98.54811859]
[36.16712570 -103.30056000]
[50.14692688 -95.92894745]
[54.73974228 -80.80672455]
[47.22073746 -66.90563965]
[58.42709732 -57.09407806]
[55.19769287 -41.60596848]
[59.70828247 -27.30021477]
[64.21886444 -12.99446106]
[68.72945404 1.31129301]
[83.95484161 12.91653633]
[80.15620422 32.49439621]
[85.89645386 46.35258865]
[91.63671112 60.21078110]
[97.37696075 74.06897736]
[113.12491608 77.48255920]
[123.85608673 89.50306702]
[125.46865845 105.53585815]
[117.34626007 119.45265198]
[123.68553162 133.04727173]
[130.02481079 146.64189148]
[136.36407471 160.23651123]
[142.70335388 173.83111572]
[149.37081909 180.53845215]
[149.00813293 188.15982056]
[154.74838257 202.01800537]
[160.48863220 215.87620544]
[166.22888184 229.73439026]
[171.96913147 243.59259033]
[177.70938110 257.45077515]
[192.95129395 258.25515747]
[206.33064270 265.60061646]
[215.19096375 278.02868652]
[217.77302551 293.07183838]
[213.56414795 307.74316406]
[203.40003967 319.12969971]
[189.29875183 324.97064209]
[174.06013489 324.10626221]
[160.70980835 316.70819092]
[151.89849854 304.24530029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[17 46]
[18 45]
[19 44]
[20 43]
[24 41]
[25 40]
[26 39]
[27 38]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
