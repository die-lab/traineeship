%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAACAGUAAGGUUUCUGUUAAUUCUGGUCGUUGGGCUUGCACAUGAGUGGUAUGAGGGGUCGCUGGACUG\
) } def
/len { sequence length } bind def

/coor [
[79.79919434 312.32031250]
[64.37542725 316.73471069]
[51.39165115 307.31127930]
[50.80790329 291.27883911]
[63.07198715 280.93612671]
[65.67671204 266.16403198]
[68.28143311 251.39190674]
[70.88615417 236.61978149]
[62.15919495 224.60414124]
[64.59031677 209.58601379]
[77.25260925 200.51383972]
[79.85733032 185.74172974]
[82.46205139 170.96960449]
[75.49874115 155.00958252]
[87.05550385 140.86349487]
[89.01339722 125.99182129]
[90.97129059 111.12014771]
[85.79859924 98.13034821]
[94.15704346 86.92195892]
[96.11492920 72.05028534]
[98.07282257 57.17861176]
[88.59432983 47.34774399]
[86.63888550 34.03101349]
[92.71119690 22.23971939]
[104.33792877 16.27712059]
[106.94264984 1.50500381]
[109.54737854 -13.26711273]
[104.32399750 -28.20119667]
[114.15381622 -39.39154434]
[116.75854492 -54.16366196]
[119.36326599 -68.93577576]
[121.96798706 -83.70789337]
[124.24983978 -98.53331757]
[126.20773315 -113.40499115]
[116.38906097 -125.78922272]
[118.28615570 -141.47923279]
[130.77349854 -151.16642761]
[146.44258118 -149.10356140]
[155.99720764 -136.51448059]
[153.76878357 -120.86808777]
[141.07940674 -111.44709778]
[139.12150574 -96.57542419]
[141.44439697 -89.30761719]
[136.74009705 -81.10317230]
[134.13537598 -66.33105469]
[131.53065491 -51.55893707]
[128.92593384 -36.78682327]
[134.33561707 -22.90933800]
[124.31949615 -10.66238976]
[121.71476746 4.10972643]
[119.11004639 18.88184357]
[129.32229614 32.06290817]
[126.94486237 48.90369415]
[112.94449615 59.13650513]
[110.98660278 74.00817871]
[109.02870941 88.87985229]
[114.20140076 101.86965179]
[105.84295654 113.07804108]
[103.88507080 127.94971466]
[101.92717743 142.82139587]
[109.22400665 153.70411682]
[107.08390045 166.21995544]
[97.23416901 173.57432556]
[94.62944794 188.34645081]
[92.02471924 203.11856079]
[100.82051849 215.97436523]
[97.96852112 230.91828918]
[85.65827179 239.22450256]
[83.05355072 253.99662781]
[80.44882202 268.76873779]
[77.84410095 283.54086304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[11 65]
[12 64]
[13 63]
[15 60]
[16 59]
[17 58]
[19 56]
[20 55]
[21 54]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
