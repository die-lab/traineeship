%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGUAUGCUUGCCUUCCAAGUAAGAGGUUUAACGAUUUUAAAUGAAGUAAUGGUUCGGAAUCCUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[114.56594849 146.17041016]
[114.60655975 140.29930115]
[107.10655975 127.30892181]
[99.60655975 114.31854248]
[87.59510040 107.16197205]
[87.40306091 93.18145752]
[79.90306091 80.19107819]
[72.40306091 67.20069885]
[64.62145996 54.37701797]
[56.56196594 41.72614670]
[48.50247192 29.07527542]
[40.44297791 16.42440414]
[28.54267883 7.29298306]
[14.23692417 2.78239584]
[-0.06883009 -1.72819114]
[-14.37458420 -6.23877811]
[-28.68033791 -10.74936485]
[-41.07327271 -1.41155100]
[-56.58854675 -1.17514789]
[-69.26022339 -10.13105774]
[-74.21577454 -24.83555031]
[-69.54970551 -39.63444901]
[-57.05619812 -48.83727264]
[-41.53927231 -48.90534973]
[-28.96549988 -39.81250381]
[-24.16975212 -25.05511856]
[-9.86399746 -20.54453278]
[4.44175673 -16.03394508]
[18.74751091 -11.52335835]
[33.05326462 -7.01277161]
[26.35613823 -20.43471146]
[24.45917511 -35.31427765]
[27.57455063 -49.98719406]
[35.35381317 -62.81229019]
[46.92684555 -72.35507965]
[60.99921036 -77.54821014]
[75.99691010 -77.81081390]
[90.24245453 -73.11353302]
[102.14247894 -63.98174667]
[110.36596680 -51.43685532]
[113.99311066 -36.88199997]
[112.61823273 -21.94514275]
[106.39509583 -8.29697227]
[96.01976776 2.53596640]
[82.65272522 9.34200668]
[67.78907013 11.35989475]
[53.09384918 8.36491013]
[61.15334320 21.01578140]
[69.21283722 33.66665268]
[77.27233124 46.31752396]
[83.72342682 50.39186478]
[85.39344025 59.70069885]
[92.89344025 72.69107819]
[100.39344025 85.68145752]
[112.40489960 92.83802795]
[112.59693909 106.81854248]
[120.09693909 119.80892181]
[127.59693909 132.79930115]
[135.93049622 145.27134705]
[145.06192017 157.17164612]
[154.19334412 169.07194519]
[163.32475281 180.97224426]
[178.67440796 186.74461365]
[181.08290100 202.96592712]
[168.07258606 212.94909668]
[153.02735901 206.42428589]
[151.42445374 190.10366821]
[142.29302979 178.20336914]
[133.16162109 166.30307007]
[124.03019714 154.40277100]
[120.27272034 153.66044617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[6 54]
[7 53]
[8 52]
[9 50]
[10 49]
[11 48]
[12 47]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
