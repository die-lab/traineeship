%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUUGCUUGAUGAGGUUAAUGACCCUGGGUUGUCUAUUAAGGCCGUGGGGCACCAGUGGUACUGGUCUU\
) } def
/len { sequence length } bind def

/coor [
[52.43946838 161.01138306]
[41.30830383 150.95666504]
[35.40093994 137.16888428]
[35.79970551 122.17418671]
[42.43154526 108.71986389]
[54.08138657 99.27099609]
[68.61477661 95.55876923]
[83.36845398 98.26313019]
[71.46814728 89.13170624]
[59.56785202 80.00028229]
[47.66754913 70.86886597]
[35.76725006 61.73744202]
[23.86695099 52.60601807]
[14.85573769 49.73524475]
[11.65829086 42.80753326]
[0.16762391 33.16571808]
[-4.89104652 32.53025055]
[-8.92639065 30.35344505]
[-11.54498577 27.22476768]
[-12.62002182 23.80310059]
[-12.28783035 20.71026611]
[-21.92964363 9.21959877]
[-31.57145882 -2.27106786]
[-41.21327209 -13.76173401]
[-50.85508728 -25.25240135]
[-60.49690247 -36.74306870]
[-75.30986023 -44.99003601]
[-71.48582458 -61.50708771]
[-54.55566788 -62.40487289]
[-49.00623322 -46.38488007]
[-39.36442184 -34.89421463]
[-29.72260666 -23.40354919]
[-20.08079147 -11.91288185]
[-10.43897820 -0.42221528]
[-0.79716367 11.06845093]
[9.80943775 21.67505264]
[21.30010414 31.31686783]
[32.99837112 40.70571899]
[44.89867020 49.83713913]
[56.79897308 58.96856308]
[68.69927216 68.09998322]
[80.59957123 77.23140717]
[92.49987030 86.36282349]
[107.44279480 87.67016602]
[120.74795532 80.74393463]
[134.05311584 73.81770325]
[142.40322876 59.70360947]
[158.79634094 60.14850998]
[166.36862183 74.69473267]
[157.33036804 88.37836456]
[140.97933960 87.12286377]
[127.67418671 94.04909515]
[114.36901855 100.97532654]
[113.38797760 115.94320679]
[125.67525482 124.54685211]
[137.96253967 133.15049744]
[150.24981689 141.75415039]
[162.53709412 150.35778809]
[174.82437134 158.96144104]
[191.26707458 163.09352112]
[191.84826660 180.03750610]
[175.72735596 185.28654480]
[166.22073364 171.24871826]
[153.93345642 162.64508057]
[141.64616394 154.04142761]
[129.35888672 145.43778992]
[117.07160950 136.83413696]
[104.78433228 128.23048401]
[102.56430054 143.06529236]
[94.34490204 155.61286926]
[81.63206482 163.57426453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[15 37]
[16 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[44 53]
[45 52]
[46 51]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
