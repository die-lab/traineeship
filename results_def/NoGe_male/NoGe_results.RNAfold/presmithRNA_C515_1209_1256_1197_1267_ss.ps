%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAGUCUUAAUCCUCGGUGGACUAAGUCUCAUUUCGUACUGAUGUUUGUUGGGGUUAACGUUACUUUUU\
) } def
/len { sequence length } bind def

/coor [
[164.23591614 304.72082520]
[174.44480896 293.37438965]
[168.70455933 279.51620483]
[162.96430969 265.65802002]
[157.22404480 251.79981995]
[151.48379517 237.94163513]
[145.74354553 224.08343506]
[140.00329590 210.22525024]
[134.26304626 196.36705017]
[128.52279663 182.50886536]
[122.78253937 168.65066528]
[117.04228973 154.79248047]
[111.30204010 140.93428040]
[95.12313080 130.70018005]
[97.20098877 110.86574554]
[89.98615265 97.71484375]
[82.48615265 84.72446442]
[74.98615265 71.73408508]
[67.48615265 58.74370193]
[59.98615265 45.75332260]
[50.34434128 34.26265335]
[38.85367203 24.62084007]
[27.36300659 14.97902679]
[15.87234020 5.33721256]
[-0.14765176 -0.21222056]
[0.75013244 -17.14237976]
[17.26718712 -20.96641731]
[25.51415443 -6.15345383]
[37.00482178 3.48836017]
[48.49548721 13.13017464]
[59.98615265 22.77198792]
[60.26791763 7.77463484]
[69.04382324 -4.39021254]
[83.18677521 -9.38789558]
[97.65727234 -5.43760681]
[107.29908752 6.05306053]
[108.67658234 20.98967743]
[101.29892731 34.04992676]
[87.79496765 40.58010101]
[72.97653198 38.25332260]
[80.47653198 51.24370193]
[87.97653198 64.23408508]
[95.47653198 77.22446442]
[102.97653198 90.21484375]
[109.61712646 95.25463104]
[110.50614929 103.93952179]
[121.42537689 106.73550415]
[128.71798706 115.03463745]
[130.03225708 125.77899933]
[125.16023254 135.19403076]
[130.90048218 149.05223083]
[136.64073181 162.91041565]
[142.38098145 176.76861572]
[148.12123108 190.62680054]
[153.86149597 204.48500061]
[159.60174561 218.34318542]
[165.34199524 232.20138550]
[171.08224487 246.05957031]
[176.82249451 259.91775513]
[182.56274414 273.77597046]
[188.30299377 287.63415527]
[203.54490662 288.43850708]
[216.92425537 295.78396606]
[225.78457642 308.21206665]
[228.36663818 323.25518799]
[224.15776062 337.92654419]
[213.99363708 349.31307983]
[199.89236450 355.15402222]
[184.65374756 354.28964233]
[171.30342102 346.89154053]
[162.49211121 334.42868042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[15 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 31]
[22 30]
[23 29]
[24 28]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
