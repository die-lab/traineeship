%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUUAGGACUUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAGUGAUAUGCUUUCGA\
) } def
/len { sequence length } bind def

/coor [
[130.49934387 200.68753052]
[116.06970215 204.78456116]
[101.25236511 202.45075989]
[88.78068542 194.11665344]
[80.95531464 181.31964111]
[79.21978760 166.42037964]
[83.89427185 152.16734314]
[94.11644745 141.18977356]
[108.00064850 135.51271057]
[122.98268890 136.18261719]
[112.84883881 125.12345123]
[102.71498108 114.06429291]
[89.43927765 109.67711639]
[86.22585297 96.06956482]
[76.09200287 85.01040649]
[65.95815277 73.95124054]
[50.93035126 69.00393677]
[48.03646851 54.39315796]
[37.90261459 43.33399963]
[27.76876068 32.27483749]
[17.63490868 21.21567917]
[7.50105524 10.15651894]
[-2.63279796 -0.90264076]
[-12.76665115 -11.96180058]
[-28.56484413 -12.40069294]
[-39.36466599 -23.93930054]
[-38.75876999 -39.73197174]
[-27.10662460 -50.40919495]
[-11.32124233 -49.63636017]
[-0.76781011 -37.87198257]
[-1.70749116 -22.09565353]
[8.42636204 -11.03649426]
[18.56021500 0.02266617]
[28.69406891 11.08182621]
[38.82792282 22.14098549]
[48.96177292 33.20014572]
[59.09562683 44.25930786]
[73.39858246 48.41559219]
[77.01731110 63.81739044]
[87.15116119 74.87654877]
[97.28501892 85.93570709]
[110.56072235 90.32288361]
[113.77414703 103.93043518]
[123.90799713 114.98959351]
[134.04185486 126.04875946]
[142.24488831 128.43901062]
[146.82106018 134.58755493]
[160.91644287 139.71784973]
[175.01184082 144.84815979]
[189.10722351 149.97845459]
[203.20262146 155.10876465]
[217.29800415 160.23905945]
[231.39340210 165.36936951]
[243.60736084 155.94477844]
[258.97964478 154.64245605]
[272.60504150 161.87794495]
[280.13571167 175.34243774]
[279.16864014 190.73947144]
[270.01245117 203.15588379]
[255.58880615 208.62966919]
[240.50027466 205.41413879]
[229.56152344 194.53538513]
[226.26309204 179.46475220]
[212.16770935 174.33445740]
[198.07231140 169.20414734]
[183.97692871 164.07385254]
[169.88153076 158.94354248]
[155.78614807 153.81324768]
[141.69075012 148.68293762]
[148.04371643 162.27116394]
[148.11073303 177.27101135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 45]
[11 44]
[12 43]
[14 41]
[15 40]
[16 39]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
