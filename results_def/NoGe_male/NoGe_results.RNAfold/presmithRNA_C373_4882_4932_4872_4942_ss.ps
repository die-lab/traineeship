%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGCGGUGUUGUUUUUGUUUGCGCCCGGUUUUUGAGUGUGAGCUUAAGUUGGAGAAGAAGGAACUCGGC\
) } def
/len { sequence length } bind def

/coor [
[90.19498444 238.66511536]
[74.77121735 243.07952881]
[61.78744125 233.65609741]
[61.20368958 217.62367249]
[73.46777344 207.28096008]
[76.07249451 192.50883484]
[70.66281128 178.63134766]
[80.67893982 166.38439941]
[75.26925659 152.50692749]
[85.28537750 140.25997925]
[87.89010620 125.48785400]
[90.49482727 110.71573639]
[85.89366913 97.51267242]
[94.73305511 86.67953491]
[97.33777618 71.90742493]
[99.94250488 57.13530350]
[102.54722595 42.36318970]
[105.15194702 27.59107208]
[103.84461212 12.64815235]
[98.71430969 -1.44723713]
[93.58400726 -15.54262638]
[88.45370483 -29.63801575]
[83.32340240 -43.73340607]
[78.19309998 -57.82879257]
[73.06279755 -71.92418671]
[67.93249512 -86.01956940]
[55.94187546 -96.34117889]
[58.85957718 -110.94721985]
[53.72927475 -125.04260254]
[48.59897232 -139.13800049]
[37.49996948 -151.95393372]
[46.74255371 -166.16699219]
[62.95875931 -161.22018433]
[62.69436264 -144.26829529]
[67.82466125 -130.17291260]
[72.95496368 -116.07752228]
[84.57863617 -106.76410675]
[82.02788544 -91.14987183]
[87.15818787 -77.05448914]
[92.28849030 -62.95909500]
[97.41879272 -48.86370850]
[102.54909515 -34.76831818]
[107.67939758 -20.67292786]
[112.80970001 -6.57753944]
[117.94000244 7.51784992]
[124.60498047 -5.92008400]
[136.28688049 -15.32928467]
[150.83624268 -18.97844696]
[165.57592773 -16.19611931]
[177.79385376 -7.49425459]
[185.24188232 5.52599287]
[186.54957581 20.46888161]
[181.47631836 34.58490372]
[170.95559692 45.27668762]
[156.92321777 50.57693863]
[141.96118164 49.51040268]
[128.82252502 42.27331924]
[119.92406464 30.19579506]
[117.31934357 44.96791077]
[114.71462250 59.74002838]
[112.10989380 74.51214600]
[109.50517273 89.28426361]
[114.10633087 102.48732758]
[105.26694489 113.32046509]
[102.66222382 128.09257507]
[100.05749512 142.86470032]
[105.28087616 157.79878235]
[95.45105743 168.98912048]
[100.67443085 183.92321777]
[90.84461212 195.11355591]
[88.23989105 209.88568115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[8 68]
[10 66]
[11 65]
[12 64]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
