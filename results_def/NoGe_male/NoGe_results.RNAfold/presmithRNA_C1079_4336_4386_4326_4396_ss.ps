%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUUUGAUCUCUUUUUCUUUUGUCGCUGGUUCGGUUUUUGAUAAAACAUGUUUUUUUUAGGGUAUAGG\
) } def
/len { sequence length } bind def

/coor [
[107.36350250 287.57556152]
[106.70921326 272.58984375]
[93.88613129 261.93154907]
[92.56219482 244.97538757]
[104.01590729 231.95491028]
[102.70857239 217.01197815]
[101.40123749 202.06906128]
[100.09390259 187.12614441]
[98.78656769 172.18322754]
[97.47922516 157.24029541]
[82.75398254 154.63864136]
[69.20341492 148.31538391]
[57.75049210 138.70123291]
[49.17530441 126.45102692]
[44.06193542 112.39916229]
[42.75866699 97.50275421]
[45.35427475 82.77644348]
[51.67195892 69.22327423]
[61.28140640 57.76640320]
[73.52809143 49.18618011]
[87.57785034 44.06703568]
[86.27051544 29.12411499]
[84.96318054 14.18119431]
[83.65584564 -0.76172632]
[82.34850311 -15.70464706]
[81.04116821 -30.64756775]
[79.73383331 -45.59048843]
[77.12911224 -60.36260223]
[73.24682617 -74.85149384]
[69.36454010 -89.34037781]
[65.48225403 -103.82926941]
[55.54246902 -117.56378174]
[65.98863220 -130.91720581]
[81.71199036 -124.57588959]
[79.97113800 -107.71155548]
[83.85342407 -93.22266388]
[87.73571014 -78.73377991]
[91.61799622 -64.24488831]
[94.34204102 -62.74302673]
[96.52828979 -59.89982224]
[97.58918762 -55.96025848]
[97.05774689 -51.40613174]
[94.67675781 -46.89782333]
[95.98409271 -31.95490265]
[97.29142761 -17.01198196]
[98.59876251 -2.06906247]
[99.90609741 12.87385845]
[101.21343231 27.81677818]
[102.52077484 42.75970078]
[117.24601746 45.36135864]
[130.79658508 51.68461227]
[142.24951172 61.29876709]
[150.82469177 73.54897308]
[155.93806458 87.60083771]
[157.24133301 102.49724579]
[154.64572144 117.22355652]
[148.32804871 130.77671814]
[138.71859741 142.23359680]
[126.47190857 150.81382751]
[112.42214966 155.93296814]
[113.72948456 170.87588501]
[115.03681946 185.81880188]
[116.34415436 200.76171875]
[117.65149689 215.70465088]
[118.95883179 230.64756775]
[130.34043884 238.19387817]
[135.13180542 250.77171326]
[131.75552368 263.59780884]
[121.69493866 271.93554688]
[122.34922791 286.92126465]
[125.37798309 306.06484985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 38]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
