%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUUGUGGGCUCUUGGUUUCAUUUUCCUCUUUACUGUAGGAGGUCUGACUGGUAUUGUUCUGUCUAAUU\
) } def
/len { sequence length } bind def

/coor [
[78.71527863 327.19946289]
[63.44463348 328.23193359]
[49.44803619 322.03887939]
[39.94180298 310.04345703]
[37.11039734 295.00210571]
[41.60445404 280.37124634]
[52.39127350 269.51293945]
[66.99212646 264.92233276]
[69.59684753 250.15020752]
[72.20156860 235.37809753]
[74.80628967 220.60597229]
[77.41101837 205.83386230]
[65.69323730 194.54612732]
[62.87292099 178.35556030]
[70.22928619 163.47616577]
[85.09761047 155.73516846]
[87.05550385 140.86349487]
[89.01339722 125.99182129]
[90.97129059 111.12014771]
[85.79859924 98.13034821]
[94.15704346 86.92195892]
[96.11492920 72.05028534]
[98.07282257 57.17861176]
[99.70582581 42.26776505]
[101.01316833 27.32484627]
[89.55944824 14.30436039]
[90.88338470 -2.65180135]
[103.70646667 -13.31008816]
[104.36075592 -28.29581261]
[105.01505280 -43.28153610]
[105.66934204 -58.26725769]
[106.32363129 -73.25298309]
[106.97792053 -88.23870850]
[96.11725616 -99.72006226]
[96.63965607 -115.51570892]
[108.23519135 -126.25437927]
[124.02444458 -125.56501007]
[134.63992310 -113.85658264]
[133.78364563 -98.07550812]
[121.96364594 -87.58441162]
[121.30935669 -72.59869385]
[120.65505981 -57.61296844]
[120.00077057 -42.62724304]
[119.34648132 -27.64152145]
[118.69219208 -12.65579796]
[128.75277710 -4.31805086]
[132.12905884 8.50803375]
[127.33769226 21.08586693]
[115.95608521 28.63218117]
[114.64875031 43.57510376]
[117.28644562 50.73466873]
[112.94449615 59.13650513]
[110.98660278 74.00817871]
[109.02870941 88.87985229]
[114.20140076 101.86965179]
[105.84295654 113.07804108]
[103.88507080 127.94971466]
[101.92717743 142.82139587]
[99.96928406 157.69306946]
[110.76235199 166.54743958]
[115.65477753 179.50566101]
[113.44187927 193.06805420]
[104.82240295 203.62971497]
[92.18312836 208.43858337]
[89.57840729 223.21069336]
[86.97368622 237.98281860]
[84.36896515 252.75492859]
[81.76424408 267.52703857]
[93.91446686 276.83459473]
[100.33699799 290.72738647]
[99.55598450 306.01296997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[16 59]
[17 58]
[18 57]
[19 56]
[21 54]
[22 53]
[23 52]
[24 50]
[25 49]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
