%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUUUUGUUUCUCGUCCUGGUGUUUAUUAUGGCCAGUGCUCUGAGAUUUGUGGGGCUAACCAUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[192.45870972 283.84936523]
[185.53248596 270.54421997]
[178.60624695 257.23904419]
[171.68002319 243.93389893]
[164.75379944 230.62872314]
[157.82756042 217.32356262]
[141.65969849 215.50173950]
[129.56599426 204.37379456]
[126.34418488 188.09091187]
[133.42759705 172.89830017]
[125.92760468 159.90792847]
[118.42760468 146.91754150]
[110.92760468 133.92715454]
[103.42760468 120.93677521]
[87.50963593 117.14899445]
[79.02124786 103.16056061]
[83.01154327 87.29215240]
[74.95204926 74.64128113]
[61.01164627 67.15958405]
[60.69886017 52.26826096]
[52.63936615 39.61738968]
[44.57987213 26.96651840]
[36.52037811 14.31564617]
[28.46088409 1.66477418]
[13.12031937 2.41487169]
[-0.53270513 -4.62007618]
[-8.82559490 -17.54770470]
[-9.52760315 -32.89054489]
[-2.44989419 -46.52145004]
[10.50366402 -54.77377701]
[25.84862900 -55.42769241]
[39.45728302 -48.30728912]
[47.66896820 -35.32792664]
[48.27477646 -19.98098755]
[41.11175537 -6.39472008]
[49.17124939 6.25615168]
[57.23074341 18.90702248]
[65.29023743 31.55789566]
[73.34973145 44.20876694]
[86.71366119 50.78559113]
[87.60292053 66.58178711]
[95.66241455 79.23265839]
[108.45159149 80.54061127]
[118.13737488 88.99397278]
[121.16320038 101.48869324]
[116.41798401 113.43677521]
[123.91798401 126.42716217]
[131.41798401 139.41754150]
[138.91798401 152.40792847]
[146.41798401 165.39830017]
[160.37091064 165.85255432]
[172.14079285 173.15467834]
[178.64144897 185.26158142]
[178.23268127 198.88790894]
[171.13272095 210.39733887]
[178.05895996 223.70249939]
[184.98518372 237.00765991]
[191.91142273 250.31282043]
[198.83764648 263.61798096]
[205.76387024 276.92315674]
[221.01788330 276.39602661]
[234.98652649 282.54745483]
[244.89630127 294.15603638]
[248.77963257 308.91687012]
[245.86547852 323.89920044]
[236.73243713 336.12829590]
[223.19387817 343.17599487]
[207.93791199 343.64303589]
[193.99360657 337.43667603]
[184.12960815 325.78915405]
[180.30444336 311.01315308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[17 42]
[18 41]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
