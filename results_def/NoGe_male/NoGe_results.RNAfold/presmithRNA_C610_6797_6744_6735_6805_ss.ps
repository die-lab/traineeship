%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUCCCUCCUGAUUUUCAGGCAAUGGGGAGUCCCCCACUCUAUAGCGUCCAAGGCUAUUGUUUUGGUA\
) } def
/len { sequence length } bind def

/coor [
[99.24261475 134.71031189]
[87.23692322 132.28752136]
[76.81955719 125.84660339]
[69.28694916 116.18914795]
[65.57650757 104.51698303]
[50.63359070 103.20964813]
[35.69067001 101.90231323]
[20.74774933 100.59497833]
[5.80482912 99.28763580]
[-9.13809109 97.98030090]
[-24.13809204 97.98030090]
[-39.08101273 99.28763580]
[-54.02393341 100.59497833]
[-68.96685028 101.90231323]
[-83.90977478 103.20964813]
[-99.16165924 110.61344910]
[-110.49826050 98.00718689]
[-101.52294159 83.62386322]
[-85.21710968 88.26672363]
[-70.27418518 86.95938873]
[-55.33126831 85.65205383]
[-40.38834763 84.34471893]
[-25.44542694 83.03738403]
[-23.49335670 80.61552429]
[-20.31370926 78.95620728]
[-16.24977303 78.59552002]
[-11.85711861 79.90970612]
[-7.83075476 83.03738403]
[7.11216545 84.34471893]
[22.05508614 85.65205383]
[36.99800491 86.95938873]
[51.94092560 88.26672363]
[66.88385010 89.57406616]
[76.31548309 74.61450958]
[91.89222717 66.24139404]
[109.57258606 66.62717438]
[124.76927948 75.67177582]
[133.53941345 91.02849579]
[148.52513123 90.37419891]
[163.51084900 89.71990967]
[174.92494202 76.66466522]
[191.90884399 75.76406097]
[204.14968872 87.08625031]
[217.22300720 78.17562866]
[230.57620239 84.77423096]
[245.51911926 83.46689606]
[260.46203613 82.15956116]
[275.40496826 80.85221863]
[290.34786987 79.54488373]
[299.16842651 66.63240814]
[314.23919678 62.46040726]
[328.44424438 68.99877167]
[335.07641602 83.16029358]
[331.00415039 98.25833130]
[318.15026855 107.16404724]
[302.58398438 105.67244720]
[291.65521240 94.48780823]
[276.71228027 95.79514313]
[261.76937866 97.10247803]
[246.82644653 98.40981293]
[231.88352966 99.71714783]
[219.87904358 108.53426361]
[205.45703125 102.02916718]
[198.50378418 113.09198761]
[186.22811890 118.11351013]
[173.13249207 115.00487518]
[164.16514587 104.70563507]
[149.17942810 105.35992432]
[134.19369507 106.01421356]
[129.97766113 117.51342010]
[122.03096008 126.83312225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[38 69]
[39 68]
[40 67]
[43 63]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
