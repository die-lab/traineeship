%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGUAUGGUUUUCUGAAGGUUGUUUUGUGGUGUGUACAAAUCGCCCGUCGCUCUUUCCGUGCGAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[103.54869843 337.52352905]
[98.26325989 323.20477295]
[99.72247314 308.01156616]
[107.63661194 294.96054077]
[120.43430328 286.64297485]
[118.47640991 271.77130127]
[116.51851654 256.89962769]
[114.56062317 242.02795410]
[112.60272980 227.15628052]
[110.64483643 212.28462219]
[95.50008392 207.66482544]
[83.79307556 196.91879272]
[77.85330963 182.11737061]
[78.89176941 166.14480591]
[86.75437927 152.13674927]
[99.94250488 142.86470032]
[97.33777618 128.09257507]
[94.73305511 113.32046509]
[85.89366913 102.48732758]
[90.49482727 89.28426361]
[87.89010620 74.51214600]
[77.87397766 62.26519394]
[83.28366089 48.38771057]
[80.67893982 33.61559677]
[70.66281128 21.36864662]
[76.07249451 7.49116230]
[73.46777344 -7.28095388]
[70.86305237 -22.05307007]
[68.25833130 -36.82518768]
[65.65360260 -51.59730148]
[63.04888153 -66.36941528]
[50.78480148 -76.71213531]
[51.36854935 -92.74456787]
[64.35232544 -102.16799927]
[79.77609253 -97.75358582]
[85.80805206 -82.88768005]
[77.82099915 -68.97414398]
[80.42572021 -54.20202637]
[83.03044128 -39.42990875]
[85.63516998 -24.65779305]
[88.23989105 -9.88567638]
[90.84461212 4.88643980]
[100.67443085 16.07678795]
[95.45105743 31.01087189]
[98.05577850 45.78298950]
[107.88559723 56.97333527]
[102.66222382 71.90742493]
[105.26694489 86.67953491]
[114.10633087 97.51267242]
[109.50517273 110.71573639]
[112.10989380 125.48785400]
[114.71462250 140.25997925]
[128.60995483 143.62843323]
[140.10197449 152.06123352]
[147.43879700 164.23109436]
[149.51806641 178.24430847]
[146.05252075 191.93542480]
[137.60908508 203.20184326]
[125.51651001 210.32672119]
[127.47440338 225.19839478]
[129.43229675 240.07006836]
[131.39019775 254.94174194]
[133.34808350 269.81341553]
[135.30598450 284.68508911]
[149.82034302 289.40695190]
[160.84266663 299.96493530]
[166.18444824 314.26278687]
[164.78507996 329.46160889]
[156.92239380 342.54370117]
[144.15756226 350.91159058]
[129.02500916 352.90380859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[16 52]
[17 51]
[18 50]
[20 48]
[21 47]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
