%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGGGUUUUGGUUACUGCUGCUGAUGUCUUACACUCCUGGACUGUUCCUUGCUUAGGGGUGAAGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[96.89636993 120.73014832]
[89.51157379 118.14839935]
[83.58772278 113.03874207]
[69.28196716 117.54932404]
[54.97621536 122.05991364]
[40.67045975 126.57050323]
[38.41465378 141.62615967]
[29.88047791 154.15830994]
[16.80490685 161.71142578]
[1.80819643 162.83378601]
[-12.13114262 157.35617065]
[-22.26790619 146.41488647]
[-32.94204712 158.86457825]
[-49.00885391 155.57980347]
[-53.94017410 139.93965149]
[-42.66308594 128.03338623]
[-26.77849197 132.10913086]
[-24.75060081 117.33235931]
[-16.47399330 104.85008240]
[-3.54565144 97.16770172]
[11.49752140 95.85501862]
[25.67645454 101.22575378]
[36.15987396 112.26474762]
[50.46562576 107.75415802]
[64.77137756 103.24357605]
[79.07713318 98.73298645]
[91.55795288 80.81398010]
[113.20114136 83.71806335]
[126.19152069 76.21806335]
[139.18190002 68.71806335]
[152.17228699 61.21806335]
[165.16265869 53.71806335]
[171.26335144 46.49138641]
[178.88734436 46.18844986]
[192.19250488 39.26222229]
[205.49766541 32.33599091]
[218.80282593 25.40976334]
[232.10798645 18.48353386]
[245.41314697 11.55730438]
[258.71832275 4.63107538]
[272.02346802 -2.29515386]
[285.32864380 -9.22138309]
[293.99685669 -22.45666313]
[308.85876465 -21.47039413]
[311.01907349 -36.83635330]
[321.82284546 -47.97447205]
[337.11587524 -50.60191345]
[351.01760864 -43.70837402]
[358.18261719 -29.94456100]
[355.85574341 -14.60293961]
[344.93176270 -3.58267760]
[329.61114502 -1.12129021]
[315.78500366 -8.16523075]
[308.06845093 4.57463837]
[292.25485229 4.08377934]
[278.94970703 11.01000881]
[265.64453125 17.93623734]
[252.33938599 24.86246681]
[239.03421021 31.78869629]
[225.72904968 38.71492386]
[212.42388916 45.64115524]
[199.11872864 52.56738281]
[185.81356812 59.49361420]
[172.66265869 66.70844269]
[159.67228699 74.20844269]
[146.68190002 81.70844269]
[133.69152832 89.20844269]
[120.70114136 96.70844269]
[120.46628571 104.52800751]
[117.38064575 111.71685028]
[111.87403870 117.27364349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[12 17]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
