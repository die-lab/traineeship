%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGUUCUUUUUGUUUUUAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUA\
) } def
/len { sequence length } bind def

/coor [
[64.16631317 287.77929688]
[49.82366180 292.30252075]
[34.91343689 294.26623535]
[19.88873672 293.61080933]
[5.20615292 290.35617065]
[-8.68813133 284.60116577]
[-21.37188530 276.52072144]
[-32.45965958 266.36038208]
[-41.61451340 254.42892456]
[-48.55824280 241.08892822]
[-53.07983017 226.74575806]
[-55.04187012 211.83531189]
[-54.38474274 196.81068420]
[-51.12841797 182.12846375]
[-45.37184525 168.23483276]
[-37.28996658 155.55200195]
[-27.12837601 144.46537781]
[-15.19587612 135.31187439]
[-1.85508251 128.36965942]
[12.48859501 123.84970093]
[27.39926720 121.88935089]
[42.42381668 122.54817963]
[57.10566330 125.80617523]
[70.99864197 131.56431580]
[79.05813599 118.91345215]
[87.11763000 106.26258087]
[87.91930389 92.30374908]
[100.23149872 85.67792511]
[108.29099274 73.02705383]
[116.35048676 60.37618256]
[124.40998077 47.72531128]
[132.46948242 35.07444000]
[125.49811554 21.46020699]
[126.27210999 6.28464222]
[134.48359680 -6.38176823]
[147.84323120 -13.19176388]
[162.71762085 -12.40563774]
[170.77711487 -25.05650902]
[178.83660889 -37.70738220]
[175.17167664 -53.08085632]
[183.52191162 -66.49909210]
[198.93327332 -70.00128937]
[212.26248169 -61.50964737]
[215.60154724 -46.06211853]
[206.96945190 -32.82344055]
[191.48748779 -29.64788628]
[183.42799377 -16.99701500]
[175.36849976 -4.34614372]
[182.36715698 8.80240345]
[181.84123230 23.78837585]
[173.83187866 36.58356094]
[160.40525818 43.69850922]
[145.12034607 43.13393402]
[137.06085205 55.78480530]
[129.00135803 68.43567657]
[120.94186401 81.08654785]
[112.88237000 93.73741913]
[112.08069611 107.69625092]
[99.76850128 114.32207489]
[91.70900726 126.97294617]
[83.64951324 139.62380981]
[94.73959351 149.78163147]
[103.89715576 161.71101379]
[110.84390259 175.04945374]
[115.36874390 189.39158630]
[117.33416748 204.30158997]
[116.68045044 219.32637024]
[113.42745209 234.00932312]
[107.67403412 247.90425110]
[99.59503174 260.58892822]
[89.43595886 271.67785645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 61]
[25 60]
[26 59]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
