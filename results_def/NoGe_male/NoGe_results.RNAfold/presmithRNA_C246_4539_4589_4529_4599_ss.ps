%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUCUACUCCUUUUACGUUUAGGACUUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGU\
) } def
/len { sequence length } bind def

/coor [
[53.70599747 309.48242188]
[38.31049347 312.22329712]
[24.78089142 304.38214111]
[19.50545692 289.66128540]
[24.97508621 275.01144409]
[38.60718918 267.34988403]
[41.21191406 252.57775879]
[43.81663513 237.80564880]
[46.42135620 223.03352356]
[49.02608109 208.26141357]
[51.63080215 193.48930359]
[54.23552704 178.71717834]
[56.84024811 163.94506836]
[59.44496918 149.17294312]
[46.86555862 157.34353638]
[31.95677185 158.99520874]
[17.89398956 153.77618408]
[7.67241144 142.79804993]
[3.46910310 128.39901733]
[6.17931700 113.64589691]
[15.22581196 101.68090820]
[28.68179893 95.05245209]
[43.68132019 95.17230225]
[57.02966690 102.01493835]
[65.88381195 114.12295532]
[68.35798645 128.91658020]
[77.48941040 117.01627350]
[86.62082672 105.11597443]
[88.63604736 91.28013611]
[101.47886658 85.75260162]
[110.61029053 73.85230255]
[119.74171448 61.95200348]
[122.00431061 46.29341888]
[135.89059448 40.90636444]
[145.02201843 29.00606537]
[154.15344238 17.10576630]
[163.28486633 5.20546532]
[172.41629028 -6.69483471]
[181.54769897 -18.59513474]
[190.67912292 -30.49543571]
[188.36802673 -46.12983322]
[197.85595703 -58.76923370]
[213.51391602 -60.91491318]
[226.05230713 -51.29387283]
[228.03231812 -35.61410522]
[218.27925110 -23.17813873]
[202.57942200 -21.36401367]
[193.44799805 -9.46371365]
[184.31658936 2.43658662]
[175.18516541 14.33688641]
[166.05374146 26.23718643]
[156.92231750 38.13748550]
[147.79089355 50.03778839]
[146.18144226 64.84518433]
[131.64201355 71.08341980]
[122.51058960 82.98372650]
[113.37917328 94.88402557]
[111.36395264 108.71986389]
[98.52113342 114.24739838]
[89.38970947 126.14769745]
[80.25828552 138.04800415]
[74.21708679 151.77766418]
[71.61236572 166.54978943]
[69.00764465 181.32189941]
[66.40291595 196.09402466]
[63.79819489 210.86613464]
[61.19347382 225.63824463]
[58.58875275 240.41036987]
[55.98402786 255.18247986]
[53.37930679 269.95458984]
[63.56887817 281.81658936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[26 61]
[27 60]
[28 59]
[30 57]
[31 56]
[32 55]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
