%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGAGCUUGACUUAGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUGCGGUUAUACAGGC\
) } def
/len { sequence length } bind def

/coor [
[127.52602386 138.23544312]
[128.91658020 131.64201355]
[117.01627350 122.51058960]
[105.11597443 113.37917328]
[91.28013611 111.36395264]
[85.75260162 98.52113342]
[73.85230255 89.38970947]
[61.95200348 80.25828552]
[50.05170059 71.12686920]
[38.15140152 61.99544525]
[26.25110245 52.86402130]
[14.35080147 43.73260117]
[2.45050168 34.60118103]
[-9.44979858 25.46975899]
[-21.35009956 16.33833694]
[-33.25040054 7.20691586]
[-46.32353210 8.08479309]
[-56.09251785 -0.02651261]
[-57.53672409 -12.23381710]
[-69.02738953 -21.87563133]
[-84.57237244 -24.81909561]
[-89.34859467 -38.92714310]
[-100.83925629 -48.56895828]
[-116.88226318 -48.60873795]
[-126.74053192 -61.26551819]
[-122.85164642 -76.83010101]
[-108.19882202 -83.36266327]
[-94.02246094 -75.85198975]
[-91.19744110 -60.05962372]
[-79.70677948 -50.41780853]
[-64.98368073 -48.16399384]
[-59.38557434 -33.36629868]
[-47.89490891 -23.72448349]
[-30.59146881 -21.77487564]
[-24.11897659 -4.69338417]
[-12.21867752 4.43803740]
[-0.31837711 13.56945896]
[11.58192253 22.70088005]
[23.48222351 31.83230209]
[35.38252258 40.96372223]
[47.28282166 50.09514618]
[59.18312454 59.22656631]
[71.08341980 68.35798645]
[82.98372650 77.48941040]
[94.88402557 86.62082672]
[108.71986389 88.63604736]
[114.24739838 101.47886658]
[126.14769745 110.61029053]
[138.04800415 119.74171448]
[163.66810608 118.09005737]
[177.13076782 139.27262878]
[191.61965942 143.15492249]
[206.10855103 147.03720093]
[220.59742737 150.91949463]
[235.08631897 154.80177307]
[251.95065308 153.06092834]
[258.29199219 168.78428650]
[244.93855286 179.23045349]
[231.20404053 169.29066467]
[216.71514893 165.40837097]
[202.22625732 161.52609253]
[187.73738098 157.64379883]
[173.24848938 153.76152039]
[169.12258911 158.74101257]
[163.81150818 162.47770691]
[157.67993164 164.69760132]
[151.15348816 165.23139954]
[144.68925476 164.02742004]
[138.74368286 161.15614319]
[133.74040222 156.80630493]
[130.04008484 151.27256775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[19 33]
[20 32]
[22 30]
[23 29]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
