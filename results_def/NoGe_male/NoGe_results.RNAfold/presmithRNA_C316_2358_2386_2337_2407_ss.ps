%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUUAGUGGAGCGUCUCUUGAUGCCACAGCUUGCUCCUUUGUUUUGGGUUGGGGUUACUGUUUCUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[73.71716309 97.37115479]
[76.29409027 86.94657135]
[61.30836487 86.29228210]
[51.10300827 94.50984192]
[38.44826889 93.46870422]
[30.26342583 84.29743195]
[15.32050514 82.99009705]
[0.35262129 82.00904846]
[-14.63310242 81.35475922]
[-26.23084450 91.75331879]
[-41.41917801 90.87629700]
[-51.26114655 79.75553894]
[-66.24687195 79.10124969]
[-81.23258972 78.44696045]
[-96.21831512 77.79267120]
[-111.20404053 77.13838196]
[-125.49249268 85.18648529]
[-139.46688843 76.60463715]
[-138.75157166 60.22109604]
[-124.08239746 52.88985062]
[-110.54975128 62.15265656]
[-95.56402588 62.80694580]
[-80.57830048 63.46123886]
[-65.59258270 64.11552429]
[-50.60685730 64.76982117]
[-39.83309937 54.54916382]
[-24.62612534 54.99922943]
[-13.97881126 66.36903381]
[1.00691211 67.02332306]
[8.04461098 64.07584381]
[16.62784195 68.04717255]
[31.57076263 69.35450745]
[46.86315918 61.02669144]
[61.96265411 71.30655670]
[76.94837952 71.96085358]
[90.25354004 65.03462219]
[98.31303406 52.38375092]
[106.37252808 39.73287964]
[100.56041718 25.34541702]
[104.34772491 10.29762745]
[116.27813721 0.37569094]
[131.76417542 -0.60520554]
[144.85115051 7.73211288]
[150.50683594 22.18177795]
[146.55651855 37.18759537]
[134.51916504 46.97952652]
[119.02339935 47.79237366]
[110.96390533 60.44324493]
[102.90441132 73.09411621]
[115.30166626 79.53916168]
[122.19477081 90.77075958]
[122.30269623 103.15468597]
[135.60786438 110.08090973]
[148.91302490 117.00714111]
[162.21818542 123.93337250]
[176.04434204 116.88942719]
[191.36494446 119.35081482]
[202.28894043 130.37107849]
[204.61579895 145.71270752]
[197.45080566 159.47651672]
[183.54905701 166.37005615]
[168.25604248 163.74261475]
[157.45225525 152.60449219]
[155.29194641 137.23854065]
[141.98678589 130.31230164]
[128.68162537 123.38607788]
[115.37646484 116.45984650]
[107.89665985 121.78592682]
[98.66890717 123.78391266]
[89.14669800 121.93067169]
[80.91255951 116.32669830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[6 32]
[7 31]
[8 29]
[9 28]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[36 49]
[37 48]
[38 47]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
