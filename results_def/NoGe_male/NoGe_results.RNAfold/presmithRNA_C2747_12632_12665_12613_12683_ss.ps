%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGAUUUUGGGGGGGGACCGGGCCAGCGGGGCGCAAGGGCUGUUUCUGACUAUUUUUUUGGGGCUGUAC\
) } def
/len { sequence length } bind def

/coor [
[169.90975952 353.62802124]
[180.25915527 342.35202026]
[175.12886047 328.25662231]
[169.99855042 314.16122437]
[164.86825562 300.06585693]
[159.73794556 285.97045898]
[145.39344788 282.04962158]
[135.99711609 270.29489136]
[135.31616211 255.08340454]
[143.82109070 242.23924255]
[138.69078064 228.14385986]
[133.56048584 214.04846191]
[119.99489594 208.00608826]
[114.59123993 193.78443909]
[121.02101898 179.59657288]
[115.89071655 165.50119019]
[110.76041412 151.40579224]
[105.63011169 137.31040955]
[100.49981689 123.21501160]
[95.36951447 109.11962891]
[89.70495605 103.00328064]
[90.33755493 94.29595947]
[85.82696533 79.99020386]
[74.29798126 69.15539551]
[77.85001373 54.69053268]
[73.33942413 40.38477707]
[59.50179291 28.46040916]
[63.58788681 11.53369045]
[58.45758438 -2.56169939]
[53.32728195 -16.65708923]
[42.22827911 -29.47303391]
[51.47086334 -43.68609238]
[67.68707275 -38.73927689]
[67.42267609 -21.78739166]
[72.55297852 -7.69200134]
[77.68328094 6.40338802]
[88.66044617 11.93563938]
[92.94139099 23.88971519]
[87.64517975 35.87419128]
[92.15576172 50.17994308]
[103.36212158 59.99150848]
[100.13272095 75.47961426]
[104.64331055 89.78536987]
[109.46489716 103.98932648]
[114.59519958 118.08470917]
[119.72550201 132.18009949]
[124.85580444 146.27549744]
[129.98611450 160.37088013]
[135.11640930 174.46626282]
[149.16169739 181.20182800]
[154.16375732 195.56964111]
[147.65586853 208.91816711]
[152.78617859 223.01354980]
[157.91647339 237.10894775]
[172.68769836 241.48127747]
[181.94381714 253.57167053]
[182.30158997 268.61614990]
[173.83334351 280.84014893]
[178.96363831 294.93554688]
[184.09394836 309.03094482]
[189.22424316 323.12631226]
[194.35455322 337.22171021]
[209.53073120 339.20718384]
[222.03919983 348.02743530]
[229.00559998 361.65560913]
[228.82911682 376.96011353]
[221.55029297 390.42404175]
[208.84173584 398.95349121]
[193.62380981 400.58843994]
[179.39346313 394.95321655]
[169.42071533 383.34274292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[10 54]
[11 53]
[12 52]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[22 43]
[23 42]
[25 40]
[26 39]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
