%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUGGUGGGUUCUGGCUAGUUUGGUUCUGGCUGUUUGCUUGGCUUUGCCCAGGUUUGCACAUGAUAGUU\
) } def
/len { sequence length } bind def

/coor [
[110.86578369 252.52592468]
[109.55844116 237.58299255]
[108.25110626 222.64007568]
[106.61810303 207.72923279]
[94.68188477 198.89395142]
[92.48444366 183.83985901]
[101.83263397 171.37994385]
[99.87474060 156.50827026]
[97.91684723 141.63659668]
[88.58449554 130.02813721]
[94.45432281 115.33610535]
[83.88180542 102.48082733]
[90.09933472 87.04131317]
[87.49461365 72.26919556]
[84.88989258 57.49708176]
[82.28516388 42.72496414]
[79.68044281 27.95284843]
[75.87546539 23.48142624]
[74.54549408 18.47977448]
[75.43260193 14.07548237]
[77.83383179 11.09157181]
[77.17954254 -3.89415121]
[65.80973816 -14.54146576]
[65.35967255 -29.74844170]
[75.58032990 -40.52219391]
[74.92604065 -55.50791931]
[74.27174377 -70.49364471]
[73.61745453 -85.47936249]
[64.54171753 -94.92967987]
[64.47595215 -107.62700653]
[72.89897156 -116.58003235]
[72.89897156 -131.58003235]
[72.89897156 -146.58003235]
[62.61720276 -158.89526367]
[65.97608185 -174.58274841]
[80.39897156 -181.60841370]
[94.82186127 -174.58274841]
[98.18074036 -158.89526367]
[87.89897156 -146.58003235]
[87.89897156 -131.58003235]
[87.89897156 -116.58003235]
[97.52792358 -102.07164764]
[88.60317993 -86.13365936]
[89.25746918 -71.14793396]
[89.91175842 -56.16220856]
[90.56604767 -41.17648697]
[101.68680573 -31.33451843]
[102.56382751 -16.14618492]
[92.16526794 -4.54844189]
[92.81955719 10.43728161]
[94.45256042 25.34812546]
[97.05728149 40.12024307]
[99.66200256 54.89236069]
[102.26673126 69.66447449]
[104.87145233 84.43659210]
[114.11746216 91.83618164]
[115.91897583 103.54076385]
[109.32598877 113.37821198]
[118.79838562 126.05039978]
[112.78852081 139.67871094]
[114.74641418 154.55038452]
[116.70430756 169.42205811]
[128.95881653 179.03791809]
[130.73254395 194.14779663]
[121.48977661 205.77134705]
[125.83172607 214.17317200]
[123.19403076 221.33274841]
[124.50136566 236.27566528]
[125.80870056 251.21858215]
[133.21250916 266.47045898]
[120.60624695 277.80706787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 65]
[7 62]
[8 61]
[9 60]
[11 58]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[21 50]
[22 49]
[25 46]
[26 45]
[27 44]
[28 43]
[31 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
