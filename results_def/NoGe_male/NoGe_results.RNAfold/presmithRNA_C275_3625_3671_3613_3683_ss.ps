%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUGGGUAGUAGGGAAGGUUAAGUUUGUGCCAGCUGCUGCGGUUAUACAGGCUUCUCUGGUCAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[71.21194458 353.27862549]
[57.05042648 346.64648438]
[50.51205826 332.44143677]
[54.68405914 317.37063599]
[67.59653473 308.55010986]
[68.90387726 293.60717773]
[59.16289139 282.39785767]
[60.27584839 267.22500610]
[72.09925842 257.08377075]
[69.46156311 249.92419434]
[73.80351257 241.52235413]
[67.79364777 227.89404297]
[77.26603699 215.22186279]
[79.22393036 200.35018921]
[81.18182373 185.47851562]
[83.13971710 170.60684204]
[85.09761047 155.73516846]
[87.05550385 140.86349487]
[89.01339722 125.99182129]
[90.97129059 111.12014771]
[85.79859924 98.13034821]
[94.15704346 86.92195892]
[96.11492920 72.05028534]
[93.76952362 65.31860352]
[95.20191193 59.40321732]
[98.94689178 55.98946762]
[102.19348145 41.34502792]
[92.21319580 31.58365631]
[88.46876526 18.24835205]
[91.85528564 4.93042803]
[101.36247253 -4.83980036]
[114.37276459 -8.52878189]
[118.25505066 -23.01766968]
[122.13733673 -37.50655746]
[121.34114838 -46.93043137]
[126.51790619 -52.53560638]
[131.02848816 -66.84136200]
[126.95274353 -82.72595215]
[138.85900879 -94.00304413]
[154.49916077 -89.07172394]
[157.78393555 -73.00491333]
[145.33424377 -62.33077240]
[140.82365417 -48.02502060]
[136.62622070 -33.62427139]
[132.74394226 -19.13538361]
[128.86164856 -4.64649677]
[139.55105591 7.61955118]
[140.94953918 23.99431992]
[132.32434082 38.17594147]
[116.83792114 44.59162140]
[113.59133148 59.23606110]
[110.98660278 74.00817871]
[109.02870941 88.87985229]
[114.20140076 101.86965179]
[105.84295654 113.07804108]
[103.88507080 127.94971466]
[101.92717743 142.82139587]
[99.96928406 157.69306946]
[98.01139069 172.56472778]
[96.05349731 187.43640137]
[94.09560394 202.30807495]
[92.13771057 217.17974854]
[98.00753021 231.87178040]
[88.67518616 243.48025513]
[87.04218292 258.39108276]
[96.92495728 270.43136597]
[95.38626862 285.56701660]
[83.84679413 294.91452026]
[82.53945923 309.85745239]
[93.72409821 320.78619385]
[95.21570587 336.35247803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[9 65]
[11 64]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[22 53]
[23 52]
[26 51]
[27 50]
[32 46]
[33 45]
[34 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
