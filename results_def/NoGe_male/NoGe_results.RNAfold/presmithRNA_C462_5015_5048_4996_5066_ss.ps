%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGUGAUUUCUGCCCGGUGUUUUUAGAAUAAACGGCCGCGGUACUCUGACCGUGCAAAGGUAGCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[114.08688354 193.77809143]
[117.12099457 179.08815002]
[128.65925598 169.50334167]
[143.65682983 169.21479797]
[134.52540588 157.31448364]
[125.39398956 145.41418457]
[111.50770569 140.02713013]
[109.24510956 124.36855316]
[95.90736389 125.74002075]
[83.65273285 120.29939270]
[75.72441101 109.48652649]
[74.22062683 96.16304779]
[79.53935242 83.85501862]
[70.93570709 71.56774139]
[62.33206177 59.28046036]
[53.72841263 46.99317932]
[44.85876846 34.89650726]
[35.72734833 22.99620819]
[26.59592628 11.09590912]
[17.46450615 -0.80439132]
[8.07565308 -12.50265884]
[-1.56616092 -23.99332428]
[-11.20797539 -35.48399353]
[-20.84978867 -46.97465897]
[-36.48632431 -46.79372787]
[-48.54807281 -56.74602509]
[-51.33984375 -72.13238525]
[-43.54344559 -85.68783569]
[-28.84010506 -91.01190948]
[-14.17228508 -85.59073639]
[-6.46568394 -71.98403931]
[-9.35912228 -56.61647415]
[0.28269154 -45.12580490]
[9.92450523 -33.63513947]
[19.56632042 -22.14447212]
[26.49403191 -18.94702530]
[29.36480522 -9.93581295]
[38.49622726 1.96448731]
[47.62764740 13.86478710]
[56.75907135 25.76508713]
[63.54071808 29.26167488]
[66.01569366 38.38953018]
[74.61933899 50.67681122]
[83.22298431 62.96409225]
[91.82663727 75.25137329]
[107.94013977 75.17556000]
[121.01865387 84.58848572]
[126.06313324 99.89221191]
[121.14540863 115.23712921]
[135.68482971 121.47537231]
[137.29429626 136.28277588]
[146.42570496 148.18307495]
[155.55712891 160.08337402]
[166.39259338 170.45606995]
[178.67987061 179.05970764]
[190.96714783 187.66336060]
[203.25444031 196.26699829]
[218.31134033 192.04521179]
[232.53793335 198.53657532]
[239.21685791 212.67610168]
[235.19453430 227.78750610]
[222.37016296 236.73567200]
[206.79904175 235.29553223]
[195.83335876 224.14709473]
[194.65078735 208.55429077]
[182.36351013 199.95063782]
[170.07623291 191.34698486]
[157.78894043 182.74334717]
[158.15496826 197.73887634]
[149.08276367 209.68438721]
[134.53923035 213.35662842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[8 49]
[13 45]
[14 44]
[15 43]
[16 42]
[17 40]
[18 39]
[19 38]
[20 37]
[21 35]
[22 34]
[23 33]
[24 32]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
