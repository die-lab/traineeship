%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUG\
) } def
/len { sequence length } bind def

/coor [
[82.66718292 115.03855133]
[77.51939392 104.60508728]
[62.64772034 102.64719391]
[47.77604675 100.68930054]
[32.90437317 98.73140717]
[18.03270149 96.77351379]
[3.16102815 94.81562805]
[-2.92010427 103.26427460]
[-11.71303272 108.72438049]
[-21.86513519 110.40926361]
[-31.83484268 108.10891724]
[-40.12571716 102.21503448]
[-45.51104736 93.65517426]
[-47.21529007 83.74697113]
[-61.61603928 79.54953766]
[-76.10492706 75.66725159]
[-90.59381104 71.78496552]
[-105.08270264 67.90267944]
[-119.63941193 74.64669037]
[-133.92301941 67.34204102]
[-136.97637939 51.59222794]
[-126.45719147 39.47916031]
[-110.43489075 40.29495239]
[-101.20041656 53.41379547]
[-86.71152496 57.29608154]
[-72.22264099 61.17836380]
[-57.73375320 65.06065369]
[-50.22492218 63.70627594]
[-42.70470428 69.44122314]
[-25.95319748 58.26349258]
[-5.97919464 62.48154831]
[5.11892128 79.94395447]
[19.99059486 81.90184784]
[34.86226654 83.85974121]
[49.73394012 85.81762695]
[64.60561371 87.77552032]
[79.47728729 89.73341370]
[92.98211670 78.15203094]
[110.70512390 79.70259094]
[121.99369812 93.45311737]
[136.97943115 94.10741425]
[151.96514893 94.76170349]
[159.84516907 83.23799133]
[172.32766724 77.23480225]
[186.03131104 78.25723267]
[197.30401611 85.92340851]
[203.19616699 98.09545898]
[217.61817932 91.59037018]
[229.62266541 100.40747833]
[244.56559753 101.71481323]
[259.50851440 103.02214813]
[274.45144653 104.32949066]
[287.61590576 95.16018677]
[302.95095825 99.87354279]
[308.69284058 114.85387421]
[300.43688965 128.60954285]
[284.51635742 130.58839417]
[273.14410400 119.27240753]
[258.20117188 117.96507263]
[243.25825500 116.65773773]
[228.31533813 115.35040283]
[214.96214294 121.94900513]
[201.88883972 113.03838348]
[191.66532898 125.69535828]
[175.78218079 129.91604614]
[160.31825256 123.88449860]
[151.31085205 109.74742889]
[136.32513428 109.09313202]
[121.33940887 108.43884277]
[114.45807648 117.81989288]
[103.86034393 122.62039948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[14 29]
[15 27]
[16 26]
[17 25]
[18 24]
[40 69]
[41 68]
[42 67]
[47 63]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
