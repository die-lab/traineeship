%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGAUAGAGAGGUGAAAGAGGAGUAAGUAGGGGCUUCUAACCCUUGCUUGAGUAGUUAGAGUCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[98.14871216 164.82247925]
[89.99761200 177.41453552]
[79.48979950 188.11901855]
[67.05104828 196.50218201]
[53.18538284 202.22434998]
[38.45463181 205.05366516]
[23.45569038 204.87547302]
[8.79631519 201.69699097]
[-4.92949533 195.64701843]
[-17.16557121 186.97070312]
[-27.41610527 176.01960754]
[-35.26574707 163.23747253]
[-40.39642715 149.14221191]
[-42.60025024 134.30499268]
[-41.78791809 119.32700348]
[-37.99234772 104.81516266]
[-31.36733437 91.35747528]
[-22.18132401 79.49926758]
[-10.80653286 69.72101593]
[2.29613090 62.41894913]
[16.59574699 57.88893890]
[31.51289368 56.31454468]
[46.44313049 57.75955963]
[60.78147888 62.16543579]
[73.94695282 69.35363770]
[85.40608978 79.03291321]
[94.69670105 90.81441498]
[98.57898712 76.32552338]
[102.46127319 61.83663940]
[106.34355927 47.34775162]
[110.22584534 32.85886383]
[114.10813141 18.36997604]
[117.99040985 3.88108873]
[121.87269592 -10.60779858]
[125.75498199 -25.09668541]
[116.63802338 -37.80160904]
[117.87213898 -53.39041901]
[128.87461853 -64.50255585]
[144.45040894 -65.89120483]
[157.24513245 -56.90069962]
[161.21748352 -41.77606964]
[154.49185181 -27.65870667]
[140.24386597 -21.21440125]
[136.36158752 -6.72551298]
[132.47929382 7.76337433]
[128.59701538 22.25226212]
[124.71472931 36.74114990]
[120.83244324 51.23003769]
[116.95015717 65.71892548]
[113.06787109 80.20780945]
[109.18558502 94.69670105]
[114.31588745 108.79209137]
[126.60317230 117.39573669]
[138.89045715 125.99938202]
[151.17773438 134.60302734]
[163.46501160 143.20668030]
[175.75228882 151.81031799]
[190.80920410 147.58851624]
[205.03579712 154.07989502]
[211.71472168 168.21940613]
[207.69238281 183.33082581]
[194.86802673 192.27899170]
[179.29689026 190.83885193]
[168.33122253 179.69039917]
[167.14865112 164.09759521]
[154.86135864 155.49395752]
[142.57408142 146.89030457]
[130.28680420 138.28666687]
[117.99951935 129.68301392]
[105.71224213 121.07936859]
[106.16850281 136.07243347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
