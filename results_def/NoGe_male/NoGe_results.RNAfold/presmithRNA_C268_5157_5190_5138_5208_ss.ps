%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUUUGCUGUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUUUACCUUU\
) } def
/len { sequence length } bind def

/coor [
[92.96309662 111.04923248]
[89.20110321 108.98641968]
[74.32942963 110.94431305]
[59.45775604 112.90220642]
[45.31166840 124.45896149]
[29.35164642 117.49565125]
[14.57952976 120.10037994]
[-0.19258687 122.70510101]
[-14.96470356 125.30982208]
[-23.16914749 130.01411438]
[-30.43695641 127.69123077]
[-45.30862808 129.64912415]
[-60.18030167 131.60700989]
[-69.60129547 144.29640198]
[-85.24768829 146.52482605]
[-97.83676147 136.97019958]
[-99.89963531 121.30111694]
[-90.21244049 108.81376648]
[-74.52243042 106.91667175]
[-62.13819504 116.73534393]
[-47.26652145 114.77745056]
[-32.39484787 112.81955719]
[-17.56942558 110.53770447]
[-2.79730964 107.93298340]
[11.97480679 105.32826233]
[26.74692345 102.72354126]
[34.10129166 92.87380219]
[46.61713791 90.73370361]
[57.49986267 98.03053284]
[72.37153625 96.07263947]
[87.24320984 94.11474609]
[101.81333923 90.54946136]
[115.90872955 85.41915894]
[130.00411987 80.28885651]
[144.09950256 75.15855408]
[158.19490051 70.02825165]
[172.29028320 64.89794922]
[186.38568115 59.76764679]
[199.69084167 52.84141541]
[211.97811890 44.23777008]
[224.26539612 35.63412094]
[236.55267334 27.03047562]
[243.41918945 12.77699661]
[258.28268433 11.81495953]
[262.47335815 -3.67109632]
[277.25036621 -9.91763783]
[291.27807617 -2.13285327]
[293.79562378 13.71143627]
[282.87176514 25.46084976]
[266.88635254 24.10223961]
[260.89871216 37.74032974]
[245.15632629 39.31775665]
[232.86904907 47.92140198]
[220.58177185 56.52505112]
[208.29447937 65.12869263]
[222.19448853 70.76695251]
[228.40216064 84.42216492]
[223.51176453 98.60256958]
[210.20632935 105.52828217]
[195.78572083 101.39958954]
[188.16162109 88.48165131]
[191.51597595 73.86303711]
[177.42059326 78.99333954]
[163.32519531 84.12364197]
[149.22981262 89.25394440]
[135.13441467 94.38423920]
[121.03903198 99.51454163]
[106.94364166 104.64484406]
[105.78849792 107.28295898]
[103.62983704 109.58820343]
[100.58486176 111.18615723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[6 26]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[13 20]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 55]
[40 54]
[41 53]
[42 52]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
