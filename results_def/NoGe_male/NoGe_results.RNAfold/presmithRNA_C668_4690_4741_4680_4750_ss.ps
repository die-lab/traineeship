%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGGACAAGCUCAGCUGGUUGCUAAAAAUGUUAUUUUUUUGAUGGGGGUGAAGUAGGCACAAAAGCUG\
) } def
/len { sequence length } bind def

/coor [
[84.19078064 145.60906982]
[73.13162231 155.74291992]
[62.07246017 165.87677002]
[51.01330185 176.01063538]
[39.95413971 186.14448547]
[28.89498138 196.27833557]
[28.45608902 212.07652283]
[16.91748238 222.87634277]
[1.12481189 222.27044678]
[-9.55241108 210.61831665]
[-8.77957916 194.83293152]
[2.98479962 184.27949524]
[18.76112747 185.21917725]
[29.82028770 175.08532715]
[40.87944794 164.95147705]
[51.93861008 154.81761169]
[62.99776840 144.68376160]
[74.05693054 134.54991150]
[82.66057587 122.26263428]
[88.40082550 108.40443420]
[86.76640320 94.51846313]
[97.74098206 85.85530853]
[103.48123169 71.99711609]
[109.22148132 58.13892365]
[114.96173859 44.28073120]
[120.70198822 30.42253876]
[106.14112854 34.02551270]
[92.51519012 27.75383949]
[85.78220367 14.34985352]
[88.88620758 -0.32547230]
[100.46995544 -9.85525799]
[115.46837616 -10.07254505]
[127.32332611 -0.88232291]
[130.85110474 13.69729805]
[140.49291992 2.20663166]
[150.13473511 -9.28403473]
[159.77655029 -20.77470207]
[169.41836548 -32.26536942]
[179.06018066 -43.75603485]
[188.70199585 -55.24670029]
[198.34381104 -66.73736572]
[198.38359070 -82.78037262]
[211.04037476 -92.63864136]
[226.60494995 -88.74975586]
[233.13751221 -74.09693909]
[225.62684631 -59.92057037]
[209.83447266 -57.09555435]
[200.19265747 -45.60488892]
[190.55084229 -34.11421967]
[180.90904236 -22.62355423]
[171.26722717 -11.13288784]
[161.62541199 0.35777915]
[151.98359680 11.84844589]
[142.34178162 23.33911324]
[134.56018066 36.16279221]
[128.81993103 50.02098465]
[123.07967377 63.87917709]
[117.33942413 77.73736572]
[111.59917450 91.59556580]
[113.23359680 105.48153687]
[102.25901794 114.14469147]
[96.51876831 128.00288391]
[110.65139008 122.97605133]
[125.45269012 125.40945435]
[137.23207092 134.69633484]
[143.05244446 148.52107239]
[141.46252441 163.43656921]
[132.85873413 175.72375488]
[119.38640594 182.31890869]
[104.40473175 181.57759094]
[91.64929962 173.68461609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[19 62]
[20 61]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
