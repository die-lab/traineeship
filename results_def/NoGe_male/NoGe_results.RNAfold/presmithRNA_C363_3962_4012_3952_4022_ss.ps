%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUUACCUCUUCUUUUAUUGGUUAGCUUGUGUAUUUCCGUUGUCAGCAUAUGUGCAGAAGCUCUUUAUG\
) } def
/len { sequence length } bind def

/coor [
[59.94235992 234.67451477]
[45.44361496 230.82922363]
[33.41014862 221.87400818]
[25.56348801 209.09004211]
[23.02618408 194.30619812]
[26.16122818 179.63746643]
[34.52136612 167.18113708]
[19.87692451 170.42771912]
[5.23248482 173.67431641]
[1.79360843 188.54499817]
[-7.76355124 200.44555664]
[-21.54141235 207.01315308]
[-36.80437469 206.94377136]
[-50.52195740 200.25119019]
[-59.97053528 188.26423645]
[-63.27407837 173.36291504]
[-59.77666855 158.50590515]
[-50.17271805 146.64306641]
[-36.36909866 140.12977600]
[-21.10653114 140.25926208]
[-7.41540718 147.00581360]
[1.98589039 159.02987671]
[16.63033104 155.78327942]
[31.27477074 152.53669739]
[36.09262466 147.45960999]
[43.64111328 145.75228882]
[54.24771500 135.14567566]
[64.85431671 124.53907776]
[75.46092224 113.93247986]
[86.06752014 103.32587433]
[89.87144470 89.87144470]
[103.32587433 86.06752014]
[113.93247986 75.46092224]
[124.53907776 64.85431671]
[135.14567566 54.24771500]
[145.75228882 43.64111328]
[141.89282227 28.84071541]
[145.93307495 14.19239521]
[156.69142151 3.60351920]
[171.20832825 -0.15349779]
[185.55999756 3.83340216]
[196.16659546 -6.77319956]
[206.77319336 -17.37980080]
[213.69775391 -32.85516739]
[230.48524475 -30.48523903]
[232.85516357 -13.69775009]
[217.37980652 -6.77319956]
[206.77319336 3.83340216]
[196.16659546 14.44000435]
[200.15350342 28.79166603]
[196.39648438 43.30858231]
[185.80760193 54.06692886]
[171.15928650 58.10717010]
[156.35888672 54.24771500]
[145.75228882 64.85431671]
[135.14567566 75.46092224]
[124.53907776 86.06752014]
[113.93247986 96.67412567]
[110.12855530 110.12855530]
[96.67412567 113.93247986]
[86.06752014 124.53907776]
[75.46092224 135.14567566]
[64.85431671 145.75228882]
[54.24771500 156.35888672]
[69.24343872 156.00050354]
[83.29960632 161.23730469]
[94.40533447 171.32011414]
[100.97181702 184.80644226]
[102.05966187 199.76695251]
[97.51322174 214.06134033]
[87.98292542 225.64466858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
