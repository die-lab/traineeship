%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUGGUUGAGGCUGUGGGUGUUGAGGACUUUGUUGACUGGGUUGUUGGUCUGGGGGAUUGAGGGGCUAGU\
) } def
/len { sequence length } bind def

/coor [
[92.24774933 119.74841309]
[80.50045013 108.35851288]
[65.51472473 109.01280212]
[52.06518555 117.34469604]
[39.01253128 110.16991425]
[24.02680779 110.82420349]
[9.04108524 111.47850037]
[-5.94463825 112.13278961]
[-17.35872078 125.18803406]
[-34.34262848 126.08863831]
[-46.58348083 114.76644897]
[-61.52640152 116.07378387]
[-76.46932220 117.38111877]
[-85.28986359 130.29359436]
[-100.36064148 134.46560669]
[-114.56570435 127.92723083]
[-121.19784546 113.76570892]
[-117.12557983 98.66767883]
[-104.27170563 89.76195526]
[-88.70542145 91.25356293]
[-77.77665710 102.43820190]
[-62.83373642 101.13086700]
[-47.89081573 99.82353210]
[-40.93757248 88.76071167]
[-28.66190910 83.73918915]
[-15.56628132 86.84782410]
[-6.59892893 97.14706421]
[8.38679409 96.49277496]
[23.37251663 95.83848572]
[38.35824203 95.18418884]
[50.73590469 86.89910126]
[64.86043549 94.02708435]
[79.84616089 93.37278748]
[87.37346649 82.95101166]
[99.53718567 78.78955841]
[111.87084961 82.41648102]
[119.84558105 92.50000000]
[134.84558105 92.50000000]
[149.84558105 92.50000000]
[164.84558105 92.50000000]
[179.84558105 92.50000000]
[193.64575195 84.76270294]
[206.37303162 92.50000000]
[221.37303162 92.50000000]
[235.17320251 84.76270294]
[247.90046692 92.50000000]
[262.90048218 92.50000000]
[277.90048218 92.50000000]
[292.90048218 92.50000000]
[307.90048218 92.50000000]
[322.90048218 92.50000000]
[337.90048218 92.50000000]
[353.73959351 86.45365906]
[363.93435669 100.00000000]
[353.73959351 113.54634094]
[337.90048218 107.50000000]
[322.90048218 107.50000000]
[307.90048218 107.50000000]
[292.90048218 107.50000000]
[277.90048218 107.50000000]
[262.90048218 107.50000000]
[247.90046692 107.50000000]
[235.17320251 115.23729706]
[221.37303162 107.50000000]
[206.37303162 107.50000000]
[193.64575195 115.23729706]
[179.84558105 107.50000000]
[164.84558105 107.50000000]
[149.84558105 107.50000000]
[134.84558105 107.50000000]
[119.84558105 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[5 30]
[6 29]
[7 28]
[8 27]
[11 23]
[12 22]
[13 21]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[43 65]
[44 64]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
