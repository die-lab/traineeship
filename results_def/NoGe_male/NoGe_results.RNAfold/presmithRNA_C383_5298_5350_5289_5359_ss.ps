%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUGUUUUUACUUUCUGUUGAAUGUUUGAUCCAAGAUUUUUUGAUUCAGGGAAUUAGUUACUAUAGG\
) } def
/len { sequence length } bind def

/coor [
[109.24915314 183.20030212]
[107.71302032 168.27915955]
[110.68979645 153.57749939]
[117.90940094 140.42921448]
[128.71678162 130.02726746]
[142.13070679 123.31565857]
[128.03532410 118.18535614]
[113.93993378 113.05505371]
[100.76395416 119.08330536]
[87.14826202 114.12760162]
[80.92976379 101.04033661]
[66.83437347 95.91003418]
[48.95032120 99.62906647]
[38.00890732 86.08301544]
[23.70315361 81.57243347]
[8.21504402 84.80183411]
[-1.59651959 73.59547424]
[-15.90227413 69.08488464]
[-30.20802879 64.57430267]
[-46.09262085 68.65005493]
[-57.36970901 56.74377823]
[-52.43838882 41.10363388]
[-36.37158203 37.81885529]
[-25.69744110 50.26854706]
[-11.39168644 54.77913284]
[2.91406727 59.28971863]
[17.37893295 55.73768997]
[28.21374130 67.26667786]
[42.51949310 71.77725983]
[53.59099960 66.43630981]
[65.68087769 70.31719208]
[71.96467590 81.81464386]
[86.06006622 86.94494629]
[99.23604584 80.91669464]
[112.85173798 85.87239838]
[119.07023621 98.95966339]
[133.16563416 104.08996582]
[147.26101685 109.22026825]
[162.24673462 108.56597900]
[175.84135437 102.22670746]
[189.43597412 95.88742828]
[203.03059387 89.54815674]
[216.62521362 83.20888519]
[230.21981812 76.86960602]
[243.81443787 70.53033447]
[257.40905762 64.19106293]
[271.00366211 57.85178757]
[282.80349731 45.67803574]
[297.76803589 53.64670181]
[294.25335693 70.23234558]
[277.34295654 71.44640350]
[263.74832153 77.78567505]
[250.15371704 84.12495422]
[236.55909729 90.46422577]
[222.96447754 96.80349731]
[209.36985779 103.14277649]
[195.77525330 109.48204803]
[182.18063354 115.82131958]
[168.58601379 122.16059875]
[182.53445435 127.67791748]
[194.20716858 137.09852600]
[202.54507446 149.56765747]
[206.79165649 163.95399475]
[206.56163025 178.95222473]
[201.87583923 193.20155334]
[193.15946960 205.40913391]
[181.20333862 214.46733093]
[167.09225464 219.55429077]
[152.10652161 220.20848083]
[137.60581970 216.37052917]
[124.90583038 208.38867188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[11 33]
[12 32]
[14 29]
[15 28]
[17 26]
[18 25]
[19 24]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
