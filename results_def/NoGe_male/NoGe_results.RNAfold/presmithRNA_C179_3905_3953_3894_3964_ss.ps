%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUU\
) } def
/len { sequence length } bind def

/coor [
[113.45815277 201.19589233]
[119.66946411 187.54232788]
[132.55288696 179.86006165]
[147.51773071 180.88647461]
[138.91407776 168.59919739]
[130.31044006 156.31190491]
[121.70678711 144.02462769]
[108.06870270 138.03698730]
[106.49127197 122.29462433]
[97.88762665 110.00733948]
[90.83305359 105.56549835]
[89.19048309 96.99114227]
[81.13098907 84.34027100]
[73.07149506 71.68939972]
[56.61911392 63.75278854]
[56.18502045 46.34527588]
[47.58137512 34.05799484]
[38.71172714 21.96132469]
[29.58030701 10.06102467]
[14.17796040 10.33284378]
[1.71458900 1.58540058]
[-3.15058756 -12.65517712]
[1.24989724 -26.85988426]
[-7.88152409 -38.76018524]
[-17.01294518 -50.66048431]
[-26.14436722 -62.56078720]
[-41.49401855 -68.33315277]
[-43.90251160 -84.55447388]
[-30.89219093 -94.53764343]
[-15.84696388 -88.01283264]
[-14.24406719 -71.69220734]
[-5.11264563 -59.79190826]
[4.01877594 -47.89160538]
[13.15019703 -35.99130630]
[28.00982094 -36.56539917]
[40.50596237 -28.18026733]
[45.72958755 -13.87757015]
[41.48060608 0.92960280]
[50.61203003 12.82990265]
[57.39367676 16.32649040]
[59.86865234 25.45434761]
[68.47229767 37.74162674]
[80.50727844 40.24427032]
[87.73629761 50.68303299]
[85.72236633 63.62990570]
[93.78186035 76.28077698]
[101.84135437 88.93164825]
[110.17490387 101.40369415]
[118.77854919 113.69097137]
[133.03202820 120.55747986]
[133.99406433 135.42098999]
[142.59771729 147.70826721]
[151.20135498 159.99554443]
[159.80500793 172.28282166]
[170.41160583 182.88943481]
[182.69888306 191.49307251]
[194.98617554 200.09672546]
[207.27345276 208.70036316]
[223.25888062 207.34176636]
[234.18273926 219.09117126]
[231.66519165 234.93545532]
[217.63748169 242.72024536]
[202.86047363 236.47370911]
[198.66979980 220.98765564]
[186.38252258 212.38400269]
[174.09524536 203.78034973]
[161.80796814 195.17671204]
[162.83438110 210.14155579]
[155.15209961 223.02497864]
[141.49855042 229.23628235]
[126.73882294 226.56221008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[9 49]
[10 48]
[12 47]
[13 46]
[14 45]
[16 42]
[17 41]
[18 39]
[19 38]
[23 34]
[24 33]
[25 32]
[26 31]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
