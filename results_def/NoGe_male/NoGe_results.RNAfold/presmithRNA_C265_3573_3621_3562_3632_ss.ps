%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUAGCAUCAGUGUGAGAUCUUAGGGUUUAAAAUAGCGGGAGCUUGACUUAGUUGUGGGUAGUAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[130.62440491 159.73619080]
[128.24659729 152.59092712]
[127.37860107 145.10061646]
[128.06108093 137.58117676]
[130.26925659 130.35057068]
[117.98197937 121.74692535]
[105.69469452 113.14328003]
[91.78412628 111.73348999]
[85.70165253 99.14399719]
[73.41437531 90.54035187]
[57.67200089 88.96292877]
[51.68436432 75.32483673]
[39.39708328 66.72119141]
[21.99900246 73.81089020]
[3.88987541 69.38044739]
[-8.08363628 55.27874756]
[-9.49678135 36.97789764]
[-22.80194283 30.05166817]
[-36.10710526 23.12543869]
[-49.41226959 16.19921112]
[-62.71743011 9.27298069]
[-79.06845093 10.52848244]
[-88.10670471 -3.15515327]
[-80.53442383 -17.70137405]
[-64.14131165 -18.14627647]
[-55.79120255 -4.03218126]
[-42.48603821 2.89404774]
[-29.18087769 9.82027721]
[-15.87571430 16.74650574]
[-2.57055187 23.67273521]
[6.73770475 16.61833191]
[18.09636688 13.68296242]
[29.76078415 15.35921860]
[39.92321777 21.42813492]
[46.99300003 30.98683929]
[49.84547043 42.58267593]
[48.00072861 54.43391037]
[60.28800964 63.03755569]
[75.15151215 63.99959564]
[82.01802063 78.25307465]
[94.30530548 86.85671997]
[108.21587372 88.26651001]
[114.29834747 100.85600281]
[126.58562469 109.45964813]
[138.87290955 118.06329346]
[162.81671143 108.34665680]
[187.05429077 116.76815796]
[199.63565063 138.92263794]
[214.62136841 139.57693481]
[229.60710144 140.23121643]
[244.59281921 140.88551331]
[259.57855225 141.53979492]
[273.86700439 133.49169922]
[287.84140015 142.07354736]
[287.12606812 158.45707703]
[272.45690918 165.78833008]
[258.92425537 156.52552795]
[243.93852234 155.87123108]
[228.95280457 155.21694946]
[213.96708679 154.56265259]
[198.98135376 153.90835571]
[196.44181824 160.87120056]
[192.52723694 167.17625427]
[187.39953613 172.55505371]
[181.27235413 176.77761841]
[174.40220642 179.66226196]
[167.07771301 181.08338928]
[159.60745239 180.97698975]
[152.30703735 179.34350586]
[145.48570251 176.24800110]
[139.43325806 171.81748962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[7 43]
[9 41]
[10 40]
[12 38]
[13 37]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
