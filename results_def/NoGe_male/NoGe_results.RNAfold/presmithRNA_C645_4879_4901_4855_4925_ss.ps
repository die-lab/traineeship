%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUUUCUCUCUUGUUGUUAGCGGUGUUGUUUUUGUUUGCGCCCGGUUUUUGAGUGUGAGCUUAAGUUGG\
) } def
/len { sequence length } bind def

/coor [
[84.01552582 112.04759979]
[69.52663422 115.92988586]
[55.03775024 119.81217194]
[40.54886246 123.69445801]
[26.05997467 127.57674408]
[11.57108688 131.45903015]
[0.24370442 142.50444031]
[-14.05245686 138.32482910]
[-28.54134369 142.20712280]
[-36.47539902 155.61192322]
[-51.22449493 159.34271240]
[-63.95502472 151.69618225]
[-73.18949890 164.81503296]
[-89.21179962 165.63081360]
[-99.73097992 153.51776123]
[-96.67763519 137.76794434]
[-82.39402008 130.46328735]
[-67.83731079 137.20730591]
[-60.63560867 124.21995544]
[-45.99711990 120.07637024]
[-32.42362976 127.71823120]
[-17.93474197 123.83594513]
[-7.64370251 113.06822968]
[7.68880081 116.97013855]
[22.17768860 113.08785248]
[36.66657639 109.20556641]
[51.15546417 105.32328033]
[65.64434814 101.44099426]
[80.13323975 97.55870819]
[93.15406036 81.19092560]
[113.64958954 85.35975647]
[127.24420929 79.02048492]
[140.83882141 72.68120575]
[146.32463074 58.10232925]
[160.20181274 51.86706161]
[174.06672668 57.18677902]
[187.66134644 50.84750748]
[201.25596619 44.50823212]
[214.85058594 38.16895676]
[228.44520569 31.82968521]
[242.03982544 25.49040985]
[255.63442993 19.15113640]
[269.22906494 12.81186295]
[278.46633911 -0.03271745]
[293.27108765 1.60088050]
[306.86569214 -4.73839331]
[320.46032715 -11.07766724]
[332.26016235 -23.25141907]
[347.22467041 -15.28275490]
[343.71002197 1.30288756]
[326.79959106 2.51694942]
[313.20498657 8.85622311]
[299.61035156 15.19549751]
[291.34545898 27.58665085]
[275.56832886 26.40647888]
[261.97369385 32.74575424]
[248.37908936 39.08502579]
[234.78446960 45.42430115]
[221.18986511 51.76357651]
[207.59524536 58.10284805]
[194.00062561 64.44212341]
[180.40600586 70.78139496]
[175.56893921 84.82199860]
[161.87237549 91.44458008]
[147.17810059 86.27582550]
[133.58348083 92.61509705]
[119.98886871 98.95437622]
[118.64421082 107.28295898]
[113.98748779 114.31776428]
[106.84593964 118.80907440]
[98.48824310 119.95902252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[8 22]
[9 21]
[12 18]
[31 67]
[32 66]
[33 65]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
