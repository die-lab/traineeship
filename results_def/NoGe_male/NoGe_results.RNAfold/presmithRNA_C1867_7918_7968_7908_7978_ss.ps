%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGGCUCGGGGAACCCUCUUGGUCUCAAUAGUGACAGGGAAAAGGUCUCUUUUCAUUCUUACUAUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[94.82134247 121.22522736]
[88.07931519 118.30918121]
[82.68482971 113.32341766]
[68.37907410 117.83400726]
[54.07331848 122.34459686]
[39.76756287 126.85517883]
[25.46181107 131.36576843]
[14.62700367 142.89476013]
[0.16213726 139.34272766]
[-14.14361668 143.85331726]
[-28.44937134 148.36390686]
[-42.75512695 152.87448120]
[-53.42926788 165.32417297]
[-69.49607086 162.03939819]
[-74.42739105 146.39924622]
[-63.15030670 134.49298096]
[-47.26571274 138.56872559]
[-32.95995712 134.05815125]
[-18.65420341 129.54756165]
[-4.34844971 125.03697205]
[5.46311426 113.83061218]
[20.95122337 117.06001282]
[35.25697708 112.54943085]
[49.56273270 108.03884125]
[63.86848450 103.52825165]
[78.17424011 99.01766968]
[90.76670074 80.19911957]
[113.27681732 82.64906311]
[125.92768860 74.58956909]
[138.57856750 66.53007507]
[151.22943115 58.47058487]
[163.88031006 50.41109085]
[176.53117371 42.35159683]
[189.18205261 34.29210281]
[201.83291626 26.23260880]
[209.31462097 12.29220772]
[224.20593262 11.97942257]
[236.85681152 3.91992831]
[244.33851624 -10.02047157]
[259.22982788 -10.33325672]
[271.88070679 -18.39275169]
[284.53158569 -26.45224571]
[297.18243408 -34.51173782]
[309.83331299 -42.57123184]
[322.48419189 -50.63072586]
[329.57238770 -65.41887665]
[345.94189453 -66.40441895]
[354.75317383 -52.57352066]
[346.94189453 -38.15421677]
[330.54367065 -37.97985458]
[317.89282227 -29.92036247]
[305.24194336 -21.86086845]
[292.59106445 -13.80137348]
[279.94018555 -5.74187946]
[267.28933716 2.31761479]
[260.71249390 15.68154621]
[244.91630554 16.57080078]
[232.26542664 24.63029480]
[225.68861389 37.99422455]
[209.89241028 38.88348007]
[197.24154663 46.94297409]
[184.59066772 55.00246811]
[171.93980408 63.06196213]
[159.28892517 71.12145233]
[146.63806152 79.18095398]
[133.98718262 87.24044800]
[121.33631134 95.29994202]
[121.68811035 102.63713837]
[119.58824921 109.67623138]
[115.27407837 115.62149811]
[109.23329926 119.80088043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[9 20]
[10 19]
[11 18]
[12 17]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
