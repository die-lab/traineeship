%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:04:12 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGUGAAAGAGGAGUAAGUAGGGGCUUCUAACCCUUGCUUGAGUAGUUAGAGUCUAUUCUUGCCUCUG\
) } def
/len { sequence length } bind def

/coor [
[94.15665436 222.91917419]
[93.49315643 207.93385315]
[92.82965851 192.94853210]
[92.16615295 177.96321106]
[91.50265503 162.97789001]
[90.83915710 147.99258423]
[90.17565155 133.00726318]
[89.51215363 118.02194214]
[80.64779663 130.12248230]
[66.88527679 136.08848572]
[51.99398041 134.28591919]
[40.05244064 125.20849609]
[34.33129501 111.34240723]
[36.39749146 96.48538971]
[45.68513107 84.70660400]
[59.65044022 79.23210907]
[74.46849823 81.56129456]
[86.07981873 91.05481720]
[79.06380463 77.79677582]
[72.04779053 64.53874207]
[65.03177643 51.28070450]
[58.01576233 38.02266693]
[50.99974823 24.76462936]
[43.98373413 11.50659275]
[36.96772003 -1.75144386]
[29.95170784 -15.00948048]
[14.62532330 -18.11366844]
[4.92044878 -30.37537384]
[5.41942692 -46.00499344]
[15.88665676 -57.62269974]
[31.37983322 -59.74296951]
[44.58354950 -51.36466980]
[49.26341629 -36.44378281]
[43.20974350 -22.02549553]
[50.22575760 -8.76745796]
[57.24177170 4.49057865]
[64.25778961 17.74861526]
[71.27380371 31.00665283]
[78.28981781 44.26469040]
[85.30583191 57.52272797]
[92.32184601 70.78076172]
[99.33786011 84.03880310]
[112.59589386 91.05481720]
[127.50421143 89.39890289]
[142.41253662 87.74299622]
[157.32084656 86.08708191]
[172.22917175 84.43117523]
[187.13748169 82.77526855]
[195.65409851 69.66033936]
[210.62335205 65.13755798]
[224.97721863 71.34244537]
[231.93823242 85.34523773]
[228.21963501 100.53424835]
[215.57722473 109.73768616]
[199.98034668 108.60997772]
[188.79339600 97.68358612]
[173.88508606 99.33949280]
[158.97676086 100.99540710]
[144.06843567 102.65131378]
[129.16012573 104.30722046]
[114.25180817 105.96313477]
[104.49747467 117.35843658]
[105.16097260 132.34376526]
[105.82447052 147.32907104]
[106.48797607 162.31439209]
[107.15147400 177.29971313]
[107.81497192 192.28503418]
[108.47847748 207.27035522]
[109.14197540 222.25566101]
[112.18249512 241.39738464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
