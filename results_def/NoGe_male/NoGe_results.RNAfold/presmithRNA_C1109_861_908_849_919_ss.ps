%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:57 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUGGGCUCAUCAUAUGUUUGUGGUUGGGAUGGAUGUUGACACUCGUGCUUAUUUUACUGCUGCUACGA\
) } def
/len { sequence length } bind def

/coor [
[82.87652588 122.42745972]
[72.05166626 103.88524628]
[57.17999649 101.92735291]
[42.30832291 99.96946716]
[27.43664932 98.01157379]
[12.56497669 96.05368042]
[1.68224943 103.35050964]
[-10.83359432 101.21040344]
[-18.18796349 91.36067200]
[-32.96007919 88.75595093]
[-47.73219681 86.15122986]
[-62.50431442 83.54650116]
[-77.32973480 81.26465607]
[-92.20140839 79.30676270]
[-107.07308197 77.34886932]
[-121.94475555 75.39097595]
[-136.81642151 73.43308258]
[-151.75195312 80.20524597]
[-164.92521667 70.43810272]
[-162.78469849 54.17924881]
[-147.53237915 48.15440369]
[-134.85853577 58.56140900]
[-119.98686218 60.51930237]
[-105.11518860 62.47719574]
[-90.24351501 64.43508911]
[-75.37184143 66.39298248]
[-68.10403442 64.07009125]
[-59.89958954 68.77439117]
[-45.12747192 71.37911224]
[-30.35535812 73.98383331]
[-15.58324146 76.58855438]
[0.37678060 69.62524414]
[14.52286911 81.18200684]
[29.39454269 83.13990021]
[44.26621628 85.09779358]
[59.13788986 87.05568695]
[74.00955963 89.01358032]
[78.75462341 81.43017578]
[85.63497925 75.71315765]
[93.95911407 72.43712616]
[102.89039612 71.93133545]
[111.53117371 74.24662018]
[119.01300049 79.15029144]
[124.58389282 86.14949036]
[127.68394470 94.54074860]
[128.00158691 103.48069763]
[141.85978699 109.22094727]
[155.71797180 114.96119690]
[169.57617188 120.70145416]
[183.55628967 126.13802338]
[197.65167236 131.26832581]
[208.20018005 120.28428650]
[222.30676270 114.54634094]
[237.52738953 115.04862213]
[251.22500610 121.70410919]
[261.02639771 133.35969543]
[265.23339844 147.99598694]
[263.11715698 163.07714844]
[255.04431152 175.99028015]
[242.41352844 184.49810791]
[227.41316223 187.12658691]
[212.64212036 183.42034912]
[200.65959167 174.02148438]
[193.54159546 160.55842590]
[192.52137756 145.36370850]
[178.42597961 140.23341370]
[170.82768250 140.92819214]
[163.83592224 134.55964661]
[149.97772217 128.81939697]
[136.11953735 123.07913971]
[122.26133728 117.33889008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[46 71]
[47 70]
[48 69]
[49 68]
[50 66]
[51 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
