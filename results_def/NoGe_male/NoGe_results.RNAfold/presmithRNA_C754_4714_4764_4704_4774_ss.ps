%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAAAUGUUAUUUUUUUGAUGGGGGUGAAGUAGGCACAAAAGCUGCCAGUUUUUGGAGUUCGUUUUAGA\
) } def
/len { sequence length } bind def

/coor [
[91.79582977 318.93872070]
[91.14154053 303.95300293]
[90.48725128 288.96728516]
[89.83296204 273.98156738]
[89.17867279 258.99581909]
[88.52437592 244.01011658]
[84.97473907 237.25608826]
[88.18287659 228.35939026]
[88.18287659 213.35939026]
[79.75985718 204.40635681]
[79.82562256 191.70903015]
[88.90135956 182.25872803]
[89.55564880 167.27299500]
[90.20994568 152.28727722]
[90.86423492 137.30155945]
[91.51852417 122.31582642]
[80.05686188 113.12261200]
[76.14948273 98.95866394]
[81.27645874 85.18916321]
[93.49575043 77.02987671]
[94.15003967 62.04415512]
[94.47726440 47.04772568]
[94.47726440 32.04772568]
[94.47726440 17.04772568]
[86.73996735 3.24755383]
[94.47726440 -9.47971821]
[94.47726440 -24.47971725]
[94.47726440 -39.47971725]
[80.74654388 -49.09519196]
[75.39526367 -64.80748749]
[80.30474854 -80.49142456]
[93.39562225 -90.15310669]
[92.74133301 -105.13883209]
[83.47853088 -118.67147827]
[90.80977631 -133.34065247]
[107.19331360 -134.05598450]
[115.77516174 -120.08157349]
[107.72705841 -105.79312134]
[108.38134766 -90.80739594]
[120.28480530 -84.38991547]
[127.45197296 -72.79354858]
[127.87568665 -59.05833817]
[121.33372498 -46.84957504]
[109.47726440 -39.47971725]
[109.47726440 -24.47971725]
[109.47726440 -9.47971821]
[117.21456909 3.24755383]
[109.47726440 17.04772568]
[109.47726440 32.04772568]
[109.47726440 47.04772568]
[112.72891998 53.95016098]
[109.13576508 62.69844818]
[108.48147583 77.68417358]
[119.94313812 86.87738800]
[123.85051727 101.04133606]
[118.72354126 114.81083679]
[106.50424957 122.97012329]
[105.84996033 137.95584106]
[105.19566345 152.94157410]
[104.54137421 167.92729187]
[103.88708496 182.91300964]
[112.81182861 198.85099792]
[103.18287659 213.35939026]
[103.18287659 228.35939026]
[103.51010132 243.35581970]
[104.16439056 258.34155273]
[104.81867981 273.32727051]
[105.47297668 288.31298828]
[106.12726593 303.29870605]
[106.78155518 318.28442383]
[109.81031799 337.42800903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[8 64]
[9 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[20 53]
[21 52]
[22 50]
[23 49]
[24 48]
[26 46]
[27 45]
[28 44]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
