%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 10 11:08:58 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACCAGUGGUACUGGUCUUAUGAGUAUUCUGAUUUUUUGGACUUGGAGUUUGAUUCUUACAUGGUUUC\
) } def
/len { sequence length } bind def

/coor [
[84.48551941 118.77648163]
[71.83464813 126.83597565]
[59.18377304 134.89547729]
[53.40411377 142.38137817]
[45.80060196 143.01658630]
[32.81022263 150.51658630]
[19.81983948 158.01658630]
[6.82945919 165.51658630]
[-6.16092205 173.01658630]
[-19.15130234 180.51658630]
[-29.84522438 193.67242432]
[-45.44731140 187.03833008]
[-43.39156342 170.20948792]
[-26.65130234 167.52619934]
[-13.66092205 160.02619934]
[-0.67054099 152.52619934]
[12.31984043 145.02619934]
[25.31022072 137.52619934]
[38.30060196 130.02619934]
[51.12427902 122.24459839]
[63.77515030 114.18510437]
[76.42602539 106.12561035]
[83.15692902 82.40550232]
[107.14806366 76.71565247]
[115.75170898 64.42837524]
[124.35535431 52.14109421]
[132.95899963 39.85381317]
[129.09086609 26.75704765]
[133.50534058 14.04203892]
[144.33616638 6.38691378]
[157.40242004 6.46665239]
[166.53384399 -5.43364763]
[168.79644775 -21.09222984]
[182.68273926 -26.47928429]
[191.81414795 -38.37958527]
[200.94557190 -50.27988434]
[210.07699585 -62.18018341]
[219.20841980 -74.08048248]
[228.33984375 -85.98078156]
[223.80380249 -100.82005310]
[228.88818359 -115.48049927]
[241.63795471 -124.32487488]
[257.15057373 -123.95233917]
[269.46109009 -114.50614166]
[273.83587646 -99.61853790]
[268.59274292 -85.01411438]
[255.74778748 -76.30857086]
[240.24014282 -76.84936523]
[231.10871887 -64.94906616]
[221.97729492 -53.04876328]
[212.84587097 -41.14846420]
[203.71444702 -29.24816322]
[194.58303833 -17.34786224]
[192.97357178 -2.54046917]
[178.43414307 3.69777369]
[169.30271912 15.59807396]
[172.27476501 32.00531387]
[162.38973999 45.84549713]
[145.24627686 48.45746231]
[136.64263916 60.74474335]
[128.03898621 73.03202057]
[119.43534088 85.31930542]
[122.59635925 90.90824890]
[124.18704224 97.12903595]
[124.09683990 103.54933167]
[122.33202362 109.72296906]
[119.01524353 115.22090912]
[114.37699127 119.66107178]
[108.73960876 122.73487854]
[102.49486542 124.22872162]
[96.07674408 124.03879547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[24 62]
[25 61]
[26 60]
[27 59]
[31 56]
[32 55]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
