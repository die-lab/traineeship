%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUAAUUAGGGGUGUAGUGUGGUAGUAGUGUUGAGGGGUUAUAAAUAAGUUGUAGUGUAGAUUGAAAGU\
) } def
/len { sequence length } bind def

/coor [
[242.02200317 159.67311096]
[227.92662048 154.54281616]
[213.83122253 149.41250610]
[199.73583984 144.28221130]
[185.64044189 139.15190125]
[172.29193115 145.65979004]
[157.92411804 140.65773010]
[151.18855286 126.61244202]
[137.09317017 121.48213959]
[122.99777985 116.35183716]
[108.90238953 111.22153473]
[95.10092163 113.46010590]
[85.96730804 102.87385559]
[70.35308075 105.42459869]
[61.03966522 93.80093384]
[46.94427872 88.67063141]
[32.74032593 83.84903717]
[18.43457222 79.33844757]
[4.53348827 86.85745239]
[-10.58873272 82.26464081]
[-17.96034622 68.28483582]
[-13.20790577 53.21201706]
[0.84905171 45.98862076]
[15.87078190 50.90015411]
[22.94515800 65.03269958]
[37.25091171 69.54328156]
[44.81167221 68.51772308]
[52.07458115 74.57524109]
[66.16996765 79.70554352]
[80.77600861 76.78784180]
[91.09761047 88.77846527]
[104.89907837 86.53989410]
[114.03269196 97.12614441]
[128.12808228 102.25644684]
[142.22346497 107.38674927]
[156.31886292 112.51705170]
[170.50672913 106.08727264]
[184.72837830 111.49092865]
[190.77075195 125.05651855]
[204.86613464 130.18681335]
[218.96153259 135.31712341]
[233.05691528 140.44741821]
[247.15231323 145.57772827]
[257.81317139 133.74104309]
[272.13790894 126.85990906]
[287.96487427 125.94058990]
[302.91790771 131.09208679]
[314.76309204 141.51414490]
[321.74240112 155.62142944]
[322.83471680 171.28459167]
[337.14047241 175.79518127]
[351.44622803 180.30577087]
[365.75198364 184.81634521]
[378.14492798 175.47853088]
[393.66021729 175.24212646]
[406.33187866 184.19804382]
[411.28744507 198.90254211]
[406.62136841 213.70143127]
[394.12786865 222.90425110]
[378.61093140 222.97233582]
[366.03713989 213.87948608]
[361.24139404 199.12210083]
[346.93563843 194.61151123]
[332.62988281 190.10093689]
[318.32415771 185.59034729]
[309.60281372 196.78691101]
[297.53048706 204.30622864]
[283.57644653 207.20864868]
[269.44741821 205.11795044]
[256.87896729 198.26991272]
[247.42207336 187.48597717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[8 36]
[9 35]
[10 34]
[11 33]
[13 31]
[15 29]
[16 28]
[17 26]
[18 25]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
