%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUCGUCCUUGUAUUGUGAAAAAUAAAUUACUAAAUUCUUGAAAAGGGUCAAUAAUAGGUUUUAAGAAU\
) } def
/len { sequence length } bind def

/coor [
[89.62223053 124.03567505]
[79.98041534 135.52633667]
[70.33860016 147.01701355]
[60.69678497 158.50767517]
[63.59022522 173.87524414]
[55.88362122 187.48193359]
[41.21580124 192.90310669]
[26.51246071 187.57904053]
[18.71606445 174.02359009]
[21.50783539 158.63723755]
[33.56958389 148.68493652]
[49.20611954 148.86585999]
[58.84793091 137.37519836]
[68.48974609 125.88452911]
[78.13156128 114.39385986]
[74.74564362 106.90139008]
[73.85053253 98.72824097]
[75.53453064 90.68052673]
[63.63422775 81.54910278]
[51.73392868 72.41768646]
[39.83362961 63.28626251]
[24.99435806 67.82230377]
[10.33391380 62.73791504]
[1.48953736 49.98814392]
[1.86207092 34.47554016]
[11.30826759 22.16501808]
[26.19587326 17.79022026]
[40.80029678 23.03334999]
[49.50584412 35.87831497]
[48.96504974 51.38596344]
[60.86534882 60.51738358]
[72.76564789 69.64880371]
[84.66594696 78.78022766]
[96.10701752 74.11068726]
[108.41540527 75.20901489]
[118.84892273 81.83052063]
[125.08309937 92.50000000]
[140.08309937 92.50000000]
[155.08309937 92.50000000]
[170.08309937 92.50000000]
[185.08309937 92.50000000]
[200.08309937 92.50000000]
[215.08309937 92.50000000]
[230.08309937 92.50000000]
[245.08309937 92.50000000]
[260.08309937 92.50000000]
[269.24380493 80.11502075]
[283.77084351 75.55226898]
[298.03036499 80.36157990]
[306.62088013 92.50000000]
[321.62088013 92.50000000]
[333.93612671 82.21823120]
[349.62359619 85.57711029]
[356.64926147 100.00000000]
[349.62359619 114.42288971]
[333.93612671 117.78176880]
[321.62088013 107.50000000]
[306.62088013 107.50000000]
[298.03036499 119.63842010]
[283.77084351 124.44773102]
[269.24380493 119.88497925]
[260.08309937 107.50000000]
[245.08309937 107.50000000]
[230.08309937 107.50000000]
[215.08309937 107.50000000]
[200.08309937 107.50000000]
[185.08309937 107.50000000]
[170.08309937 107.50000000]
[155.08309937 107.50000000]
[140.08309937 107.50000000]
[125.08309937 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[18 33]
[19 32]
[20 31]
[21 30]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
