%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUGGUAUUUUCUCUGAACAUACAUGGUAUUUGAUGAGAAUAGGGAGGCGCUACUAUUUUGAAAACAAG\
) } def
/len { sequence length } bind def

/coor [
[220.92787170 252.09698486]
[228.33734131 238.94395447]
[217.73074341 228.33734131]
[207.12414551 217.73074341]
[196.51754761 207.12414551]
[182.75476074 212.91337585]
[167.78347778 212.99253845]
[153.88493347 207.31845093]
[143.18881226 196.72692871]
[137.34693909 182.80981445]
[137.27824402 167.67579651]
[143.02433777 153.63093567]
[132.41772461 143.02433777]
[121.81112671 132.41772461]
[111.20452881 121.81112671]
[100.59792328 111.20452881]
[89.76246643 100.83183289]
[74.36066437 97.21310425]
[70.20438385 82.91014862]
[59.14522171 72.77629852]
[50.41850662 69.13106537]
[47.83701324 61.95104218]
[37.23041153 51.34444046]
[26.62381172 40.73783875]
[16.01721001 30.13123703]
[0.54184377 23.20668793]
[2.91177225 6.41919851]
[19.69926071 4.04927015]
[26.62381172 19.52463531]
[37.23041153 30.13123703]
[47.83701324 40.73783875]
[58.44361496 51.34444046]
[69.27907562 61.71713638]
[80.33823395 71.85099030]
[94.94901276 74.74487305]
[99.89631653 89.77267456]
[107.74505615 92.58233643]
[111.20452881 100.59792328]
[121.81112671 111.20452881]
[132.41772461 121.81112671]
[143.02433777 132.41772461]
[153.63093567 143.02433777]
[167.67579651 137.27824402]
[182.80981445 137.34693909]
[196.72692871 143.18881226]
[207.31845093 153.88493347]
[212.99253845 167.78347778]
[212.91337585 182.75476074]
[207.12414551 196.51754761]
[217.73074341 207.12414551]
[228.33734131 217.73074341]
[238.94395447 228.33734131]
[252.09698486 220.92787170]
[266.76159668 217.34294128]
[281.84957886 217.84855652]
[296.24127197 222.40719604]
[308.86877441 230.68060303]
[318.79498291 242.05482483]
[325.28332520 255.68580627]
[327.85235596 270.56207275]
[326.31140137 285.57965088]
[320.77481079 299.62417603]
[311.65344238 311.65344238]
[299.62417603 320.77481079]
[285.57965088 326.31140137]
[270.56207275 327.85235596]
[255.68580627 325.28332520]
[242.05482483 318.79498291]
[230.68060303 308.86877441]
[222.40719604 296.24127197]
[217.84855652 281.84957886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 36]
[19 34]
[20 33]
[22 32]
[23 31]
[24 30]
[25 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
