%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUUCGACUCUGUUUUUUUCUCUGUGGGACGGACUGGUUAUCAGAGUUUGCAGCAUAGUGCUUGACCU\
) } def
/len { sequence length } bind def

/coor [
[102.27297211 131.70550537]
[117.27032471 131.42375183]
[107.62850952 119.93308258]
[97.98669434 108.44241333]
[94.60736847 107.99818420]
[91.35240173 106.15344238]
[88.80661011 102.96970367]
[87.51462555 98.74998474]
[87.88333130 94.01332092]
[80.38333130 81.02294159]
[72.88333130 68.03255463]
[65.38333130 55.04217529]
[57.88333511 42.05179596]
[50.38333511 29.06141472]
[42.88333511 16.07103348]
[27.58834457 15.96835518]
[14.48484707 8.27451706]
[7.04124403 -4.85785294]
[7.16949797 -19.85250282]
[14.73503113 -32.68325806]
[7.23503113 -45.67363739]
[-7.76649094 -49.86793137]
[-15.18750477 -63.14886475]
[-11.09643841 -77.42467499]
[-18.59643936 -90.41505432]
[-26.09643936 -103.40544128]
[-33.59643936 -116.39582062]
[-41.09643936 -129.38619995]
[-54.25228882 -140.08012390]
[-47.61819077 -155.68220520]
[-30.78934097 -153.62646484]
[-28.10605812 -136.88619995]
[-20.60605812 -123.89582062]
[-13.10605717 -110.90544128]
[-5.60605764 -97.91505432]
[1.89394248 -84.92467499]
[16.30269051 -81.32973480]
[24.09380913 -68.26248169]
[20.22541237 -53.17363739]
[27.72541237 -40.18325806]
[42.61993790 -40.31982422]
[55.66981506 -32.93357086]
[63.32098007 -19.92103577]
[63.43228912 -4.72615480]
[55.87371445 8.57103348]
[63.37371445 21.56141472]
[70.87371826 34.55179596]
[78.37371826 47.54217529]
[85.87371826 60.53255844]
[93.37371826 73.52294159]
[100.87371826 86.51332092]
[109.47736359 98.80059814]
[119.11917877 110.29126740]
[128.76098633 121.78193665]
[140.25166321 131.42375183]
[153.24203491 138.92375183]
[166.23242188 146.42375183]
[179.22279358 153.92375183]
[195.96305847 156.60702515]
[198.01881409 173.43588257]
[182.41671753 180.06997681]
[171.72279358 166.91412354]
[158.73242188 159.41412354]
[145.74203491 151.91412354]
[132.75166321 144.41412354]
[135.07843018 159.23257446]
[128.54826355 172.73652649]
[115.48800659 180.11418152]
[100.55139160 178.73667908]
[89.06072998 169.09486389]
[85.11044312 154.62437439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[9 51]
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
