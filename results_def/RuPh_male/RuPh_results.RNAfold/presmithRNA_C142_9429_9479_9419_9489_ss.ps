%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAGGUAGUUUAUGAAAAUAUAAGAUUGUCAAUCUUAAGAUGUCUAGAGGACGCUUAUUUAGAUAGUU\
) } def
/len { sequence length } bind def

/coor [
[141.75112915 231.50811768]
[136.62081909 217.41271973]
[131.49052429 203.31733704]
[126.36021423 189.22193909]
[121.22991180 175.12655640]
[116.09960938 161.03117371]
[110.96930695 146.93577576]
[105.53273773 132.95565796]
[99.79248810 119.09746552]
[86.44643402 113.45574188]
[80.90153503 100.06917572]
[86.34931946 86.64278412]
[80.60906982 72.78459167]
[74.86881256 58.92639923]
[69.12856293 45.06820679]
[62.76001358 38.07643509]
[63.45479965 30.47813988]
[58.32449722 16.38274956]
[43.18477631 14.78580856]
[30.29229546 6.80640078]
[22.17601395 -5.92726231]
[20.40058136 -20.86074257]
[25.26495743 -35.02574539]
[35.75365829 -45.63011169]
[30.62335777 -59.72550201]
[25.49305534 -73.82089233]
[20.36275291 -87.91628265]
[15.23245144 -102.01166534]
[10.10214901 -116.10705566]
[4.97184706 -130.20245361]
[-6.12715626 -143.01838684]
[3.11542773 -157.23144531]
[19.33163452 -152.28463745]
[19.06723595 -135.33274841]
[24.19753838 -121.23735809]
[29.32784081 -107.14196777]
[34.45814133 -93.04658508]
[39.58844376 -78.95119476]
[44.71874619 -64.85580444]
[49.84904861 -50.76041412]
[64.70021820 -49.37900543]
[77.53163147 -41.65474319]
[85.77062988 -29.07380867]
[87.73823547 -14.10221291]
[82.99108887 0.29749459]
[72.41988373 11.25244808]
[77.55018616 25.34783745]
[82.98675537 39.32795334]
[88.72701263 53.18614960]
[94.46726227 67.04434204]
[100.20751190 80.90253448]
[113.55356598 86.54425812]
[119.09846497 99.93082428]
[113.65068054 113.35721588]
[119.39093018 127.21540833]
[125.75948334 134.20718384]
[125.06469727 141.80548096]
[130.19500732 155.90086365]
[135.32530212 169.99624634]
[140.45561218 184.09164429]
[145.58590698 198.18702698]
[150.71621704 212.28242493]
[155.84651184 226.37780762]
[170.91714478 229.67623901]
[181.79589844 240.61499023]
[185.01142883 255.70352173]
[179.53764343 270.12716675]
[167.12123108 279.28335571]
[151.72419739 280.25042725]
[138.25970459 272.71975708]
[131.02421570 259.09436035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[8 55]
[9 54]
[12 51]
[13 50]
[14 49]
[15 48]
[17 47]
[18 46]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
