%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCCUCGAGUAUUUCACCUUUAGUGUUCUUUAUAUACCGCCGUUGAGGACUGCUCUAAAAAGGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[75.42473602 136.45745850]
[64.81855011 125.85044098]
[64.41979218 110.85574341]
[74.44723511 99.70000458]
[89.39793396 98.50321960]
[80.26651764 86.60292053]
[71.13509369 74.70261383]
[62.00366974 62.80231857]
[52.87224960 50.90201569]
[43.74082947 39.00171661]
[34.60940552 27.10141754]
[24.23671150 16.26595688]
[12.74604416 6.62414360]
[1.25537777 -3.01767063]
[-10.23528862 -12.65948486]
[-31.93654251 -8.09217453]
[-50.32129669 -20.04231644]
[-54.85304642 -41.24121475]
[-68.44766235 -47.58048630]
[-82.04228210 -53.91976166]
[-97.54892731 -49.80595398]
[-110.34709930 -59.47995758]
[-110.61913300 -75.52070618]
[-98.15634918 -85.62310791]
[-82.51912689 -82.03746796]
[-75.70300293 -67.51438141]
[-62.10838699 -61.17510605]
[-48.51377106 -54.83583069]
[-41.73973083 -60.74946976]
[-33.41937256 -64.25006104]
[-24.38610840 -64.96338654]
[-15.55219841 -62.79558945]
[-7.81662464 -57.94490051]
[-1.97360814 -50.88367844]
[1.36891758 -42.31250763]
[1.85250831 -33.09069824]
[-0.59347475 -24.15015221]
[10.89719200 -14.50833702]
[22.38785934 -4.86652327]
[33.87852478 4.77529097]
[36.47805786 4.29893303]
[39.43430328 4.85726118]
[42.34740448 6.59033585]
[44.77494812 9.48985100]
[46.28484344 13.38892174]
[46.50970840 17.96999550]
[55.64112854 29.87029648]
[64.77255249 41.77059555]
[73.90396881 53.67089462]
[83.03539276 65.57119751]
[92.16681671 77.47149658]
[101.29823303 89.37179565]
[111.90483856 99.97840118]
[123.80513763 109.10981750]
[139.46371460 111.37242126]
[144.85076904 125.25870514]
[156.75106812 134.39012146]
[168.65136719 143.52154541]
[180.55168152 152.65296936]
[196.87229919 154.25585938]
[203.39710999 169.30108643]
[193.41394043 182.31141663]
[177.19262695 179.90292358]
[171.42025757 164.55326843]
[159.51995850 155.42184448]
[147.61965942 146.29042053]
[135.71934509 137.15901184]
[120.91195679 135.54954529]
[114.67371368 121.01011658]
[102.77341461 111.87870026]
[101.57592010 126.83082581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 40]
[13 39]
[14 38]
[15 37]
[18 28]
[19 27]
[20 26]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
