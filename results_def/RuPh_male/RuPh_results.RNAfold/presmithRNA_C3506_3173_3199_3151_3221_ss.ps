%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCCUUGUAUUGUGAAAAAUAAAUUACUAAAUUCUUGAAAAGGGUCAAUAAUAGGUUUUAAGAAUUAGUU\
) } def
/len { sequence length } bind def

/coor [
[40.03134918 169.65130615]
[33.14839554 178.24003601]
[24.20533752 184.62577820]
[13.88034821 188.33598328]
[2.95321989 189.10054016]
[-7.75352049 186.87147522]
[-17.43652725 181.82574463]
[-25.37191010 174.35130310]
[-30.96935463 165.01727295]
[-45.61379242 168.26385498]
[-60.25823593 171.51045227]
[-74.90267181 174.75704956]
[-83.18186188 188.21923828]
[-98.57450104 191.80285645]
[-111.94840240 183.38180542]
[-115.36907959 167.95213318]
[-106.80709839 154.66801453]
[-91.34213257 151.41065979]
[-78.14926910 160.11260986]
[-63.50482941 156.86601257]
[-48.86038971 153.61941528]
[-34.21595001 150.37283325]
[-30.00939369 131.15139771]
[-17.04880142 116.25418091]
[1.53631997 109.38014984]
[21.20922279 112.27855682]
[37.13334274 124.30438995]
[50.43850708 117.37816620]
[63.74366760 110.45193481]
[77.04882812 103.52570343]
[90.35399628 96.59947205]
[95.67864227 90.18503571]
[104.39404297 89.67568970]
[117.98865509 83.33641815]
[131.58326721 76.99714661]
[145.17788696 70.65786743]
[158.77250671 64.31859589]
[172.36712646 57.97932053]
[185.96174622 51.64004898]
[199.55635071 45.30077362]
[213.15097046 38.96149826]
[216.21926880 23.86541748]
[227.45693970 13.59077072]
[242.41297913 11.92314339]
[255.32853699 19.29378128]
[268.92315674 12.95450687]
[275.73925781 -1.56857991]
[291.37649536 -5.15422010]
[303.83929443 4.94818258]
[303.56726074 20.98892975]
[290.76907349 30.66293144]
[275.26242065 26.54912376]
[261.66781616 32.88839722]
[259.01208496 47.52004623]
[248.12104797 57.90510178]
[233.02677917 59.90923691]
[219.49024963 52.55611801]
[205.89562988 58.89538956]
[192.30101013 65.23466492]
[178.70640564 71.57393646]
[165.11178589 77.91321564]
[151.51716614 84.25248718]
[137.92254639 90.59175873]
[124.32793427 96.93103027]
[110.73331451 103.27030945]
[97.28022003 109.90464020]
[83.97505951 116.83086395]
[70.66989899 123.75709534]
[57.36473465 130.68331909]
[44.05957413 137.60955811]
[45.70958710 148.54476929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
