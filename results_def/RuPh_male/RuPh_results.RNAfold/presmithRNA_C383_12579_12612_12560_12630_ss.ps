%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAAUUCAGGUAAACGUGUAGGAUCUAAAGGGUUUAGCUGAGUUACAAUUUAUGUUAAACGCAGAUAU\
) } def
/len { sequence length } bind def

/coor [
[108.38903046 137.00349426]
[103.95681763 130.09791565]
[102.37914276 121.97417450]
[103.93043518 113.77414703]
[90.32288361 110.56072235]
[85.93570709 97.28501892]
[74.87654877 87.15116119]
[63.81739044 77.01731110]
[52.75822830 66.88345337]
[41.69906998 56.74960327]
[30.63990974 46.61574936]
[19.58074951 36.48189545]
[4.17895079 32.86317062]
[0.02266617 18.56021500]
[-11.03649426 8.42636204]
[-22.09565353 -1.70749116]
[-33.15481567 -11.84134388]
[-44.21397400 -21.97519684]
[-59.61577225 -25.59392166]
[-63.77205658 -39.89687729]
[-81.71797943 -43.30487061]
[-86.64267731 -60.00688553]
[-98.13334656 -69.64869690]
[-109.62401581 -79.29051208]
[-125.64400482 -84.83994293]
[-124.74621582 -101.77010345]
[-108.22916412 -105.59414673]
[-99.98220062 -90.78118134]
[-88.49153137 -81.13936615]
[-77.00086212 -71.49755096]
[-64.72823334 -72.19506836]
[-55.04378891 -63.98300552]
[-53.63820267 -50.95603943]
[-39.02743149 -48.06215668]
[-34.08012009 -33.03435898]
[-23.02096176 -22.90050507]
[-11.96180058 -12.76665115]
[-0.90264076 -2.63279796]
[10.15651894 7.50105524]
[24.76729202 10.39493942]
[29.71460342 25.42273712]
[40.77376175 35.55659103]
[51.83292389 45.69044113]
[62.89208221 55.82429504]
[73.95124054 65.95815277]
[85.01040649 76.09200287]
[96.06956482 86.22585297]
[109.67711639 89.43927765]
[114.06429291 102.71498108]
[137.03572083 104.83552551]
[145.15270996 125.69729614]
[158.14309692 133.19729614]
[171.13348389 140.69729614]
[184.12385559 148.19729614]
[199.94381714 148.39668274]
[207.09730530 161.46101379]
[220.08767700 168.96101379]
[233.07806396 176.46101379]
[249.81832886 179.14430237]
[251.87406921 195.97315979]
[236.27198792 202.60725403]
[225.57806396 189.45140076]
[212.58767700 181.95140076]
[199.59730530 174.45140076]
[184.70651245 174.78846741]
[176.62385559 161.18768311]
[163.63348389 153.68768311]
[150.64309692 146.18768311]
[137.65270996 138.68768311]
[130.75505066 142.59153748]
[122.83337402 143.67729187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 49]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[20 33]
[22 30]
[23 29]
[24 28]
[51 69]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
