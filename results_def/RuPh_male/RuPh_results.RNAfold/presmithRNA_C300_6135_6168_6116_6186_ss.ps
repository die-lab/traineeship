%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCUGGCUUAGUUUAAUUAAAAUGUUGUUUUAUGGAAACAAAGAUAAGCUUAUUAGCUAGAUUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[87.76278687 255.15260315]
[80.17530823 241.98071289]
[78.21101379 226.90722656]
[82.16944885 212.23072815]
[91.44696808 200.18930054]
[104.62882996 192.61915588]
[102.67093658 177.74748230]
[100.71304321 162.87582397]
[98.75514984 148.00415039]
[96.79725647 133.13247681]
[94.83936310 118.26079559]
[81.38861084 103.70203400]
[88.24408722 85.10411072]
[84.36180115 70.61522675]
[80.47951508 56.12633896]
[76.59722900 41.63745117]
[72.71494293 27.14856339]
[68.83265686 12.65967560]
[58.59739685 11.52031326]
[49.16381836 7.44958735]
[41.34969711 0.81570733]
[35.82793045 -7.79160023]
[33.06860352 -17.61350060]
[33.29899979 -27.78894424]
[36.48493576 -37.43014908]
[42.33498764 -45.70005417]
[50.32707596 -51.88500214]
[59.75504303 -55.45631027]
[59.75504303 -70.45630646]
[59.75504303 -85.45630646]
[59.75504303 -100.45630646]
[59.75504303 -115.45630646]
[59.75504303 -130.45631409]
[59.75504303 -145.45631409]
[53.70870209 -161.29544067]
[67.25504303 -171.49020386]
[80.80138397 -161.29544067]
[74.75504303 -145.45631409]
[74.75504303 -130.45631409]
[74.75504303 -115.45630646]
[74.75504303 -100.45630646]
[74.75504303 -85.45630646]
[74.75504303 -70.45630646]
[74.75504303 -55.45631027]
[92.60906219 -45.29166412]
[101.46519470 -26.61808205]
[97.99811554 -6.11952066]
[83.32154846 8.77739048]
[87.20383453 23.26627731]
[91.08612061 37.75516510]
[94.96840668 52.24405289]
[98.85069275 66.73294067]
[102.73297882 81.22182465]
[111.27895355 84.73978424]
[117.14966583 91.87731934]
[118.95263672 100.94148254]
[116.26022339 109.78233337]
[109.71103668 116.30290222]
[111.66893005 131.17457581]
[113.62682343 146.04624939]
[115.58471680 160.91792297]
[117.54261017 175.78959656]
[119.50050354 190.66127014]
[134.19248962 194.56175232]
[146.27044678 203.79167175]
[153.89254761 216.94355774]
[155.89648438 232.01182556]
[151.97668457 246.69866943]
[142.73088074 258.76446533]
[129.56898499 266.36926270]
[114.49809265 268.35339355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
