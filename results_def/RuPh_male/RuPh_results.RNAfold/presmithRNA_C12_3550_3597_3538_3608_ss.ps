%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUAGUGUAGAUUGAAAGUAUCAGAGUGGUUAAGACCGUCUUAGUAGUAUCAUAUGCUUAAUACUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[118.80168152 309.73712158]
[122.75360107 294.82452393]
[134.15592957 284.43267822]
[131.55120850 269.66055298]
[128.94648743 254.88844299]
[113.43876648 245.61280823]
[109.25585175 227.71432495]
[119.38292694 212.00398254]
[115.50064087 197.51510620]
[111.61835480 183.02621460]
[99.51618958 178.09963989]
[92.43930054 166.88244629]
[93.22668457 153.44596863]
[101.81228638 142.82640076]
[98.56569672 128.18196106]
[95.31909943 113.53752136]
[86.01558685 103.10026550]
[90.03646088 89.70906830]
[79.49565887 77.91067505]
[84.29486847 63.81043243]
[81.04827881 49.16599274]
[77.80168152 34.52155304]
[67.22279358 26.79079628]
[64.95316315 14.29779148]
[71.69354248 4.01813745]
[69.08881378 -10.75397873]
[66.48409271 -25.52609444]
[63.55773926 -40.23787308]
[60.31114578 -54.88231277]
[57.06455231 -69.52675629]
[53.81795502 -84.17119598]
[42.34595490 -95.88977814]
[47.01854706 -111.60916138]
[63.02896881 -115.15858459]
[73.90707397 -102.88671112]
[68.46239471 -87.41778564]
[71.70899200 -72.77334595]
[74.95558167 -58.12891006]
[78.20217896 -43.48446655]
[82.87071991 -37.44943619]
[81.25621033 -28.13081741]
[83.86093140 -13.35870171]
[86.46565247 1.41341496]
[98.46767426 14.02933693]
[92.44612122 31.27495766]
[95.69271851 45.91939545]
[98.93930817 60.56383896]
[109.24789429 71.31476593]
[104.68090057 86.46247864]
[113.98441315 96.89973450]
[109.96353912 110.29093170]
[113.21013641 124.93537140]
[116.45672607 139.57980347]
[131.29566956 148.55346680]
[135.13182068 165.12297058]
[126.10723877 179.14392090]
[129.98953247 193.63281250]
[133.87181091 208.12170410]
[145.46734619 212.10556030]
[153.50500488 221.20223999]
[155.98036194 232.96156311]
[152.36607361 244.29431152]
[143.71859741 252.28372192]
[146.32331848 267.05584717]
[148.92803955 281.82794189]
[163.19694519 287.69326782]
[172.01095581 300.35488892]
[172.55752563 315.77258301]
[164.66226196 329.02658081]
[150.84451294 335.88757324]
[135.51348877 334.16629028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[8 58]
[9 57]
[10 56]
[14 53]
[15 52]
[16 51]
[18 49]
[20 47]
[21 46]
[22 45]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
