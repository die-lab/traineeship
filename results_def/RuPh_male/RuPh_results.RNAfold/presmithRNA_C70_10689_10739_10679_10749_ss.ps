%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUAGUUAAUAUAUAAUAAAGGUCUUGUAAACUUUAGUAGGUUUAUCCCUGGCCCUAGUCUUUUAGUUU\
) } def
/len { sequence length } bind def

/coor [
[80.70199585 154.18347168]
[72.17654419 141.84181213]
[72.98966217 126.86386871]
[82.80216217 115.51702881]
[72.19556427 126.12363434]
[61.58895874 136.73023987]
[60.15108871 152.70872498]
[46.68326950 161.42636108]
[31.51685524 156.19573975]
[26.28622627 141.02932739]
[35.00387192 127.56150055]
[50.98235703 126.12363434]
[61.58895874 115.51702881]
[72.19556427 104.91043091]
[57.60994339 101.40903473]
[47.09476089 90.71179199]
[43.84421921 76.06822968]
[48.84574509 61.92663574]
[60.58001709 52.58281708]
[75.48249817 50.87516785]
[89.02623749 57.32241821]
[97.09704590 69.96607971]
[97.24262238 84.96755981]
[101.75321198 70.66180420]
[106.26379395 56.35605240]
[110.77438354 42.05029678]
[101.34222412 25.91318130]
[106.30187988 8.21418285]
[122.19943237 -0.37618399]
[125.44602966 -15.02062416]
[128.69262695 -29.66506386]
[131.93922424 -44.30950546]
[135.18580627 -58.95394516]
[138.43240356 -73.59838104]
[141.67900085 -88.24282837]
[144.92559814 -102.88726807]
[139.48091125 -118.35618591]
[150.35902405 -130.62806702]
[166.36944580 -127.07863617]
[171.04203796 -111.35925293]
[159.57003784 -99.64067078]
[156.32344055 -84.99623108]
[153.07684326 -70.35179138]
[149.83024597 -55.70735168]
[146.58366394 -41.06291199]
[143.33706665 -26.41847038]
[140.09046936 -11.77402973]
[136.84387207 2.87041020]
[145.13462830 11.22941208]
[148.25114441 22.70903015]
[145.26521301 34.34918594]
[136.83840942 43.08660507]
[125.08013916 46.56088257]
[120.56954956 60.86663818]
[116.05896759 75.17239380]
[111.54837799 89.47814941]
[115.43066406 103.96703339]
[126.48982239 114.10089111]
[137.54898071 124.23474121]
[148.60813904 134.36859131]
[164.72695923 137.38783264]
[169.91566467 152.94447327]
[158.83656311 165.03520203]
[142.88688660 161.22209167]
[138.47428894 145.42774963]
[127.41513062 135.29389954]
[116.35597229 125.16004944]
[105.29680634 115.02619171]
[115.59439087 125.93306732]
[117.06087494 140.86120605]
[109.08256531 153.56343079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[23 56]
[24 55]
[25 54]
[26 53]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
