%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGACUCACCUGGGAGCUUGUGAGUAGAGAUUUGUUUAGAAUGUUUGACUGUGUUUGAGGGCCAAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[87.49958801 106.81292725]
[72.85514832 110.05951691]
[58.21070862 113.30611420]
[46.41231537 123.84690857]
[32.31207275 119.04769897]
[17.66763115 122.29429626]
[3.02319074 125.54089355]
[-11.62124920 128.78749084]
[-26.26568985 132.03407288]
[-40.91012955 135.28067017]
[-49.42134094 148.32662964]
[-64.31913757 151.41052246]
[-76.70401001 143.21598816]
[-88.42259979 154.68798828]
[-104.14197540 150.01539612]
[-107.69139862 134.00497437]
[-95.41952515 123.12686920]
[-79.95060730 128.57154846]
[-72.18925476 115.91069794]
[-57.38396072 112.40957642]
[-44.15672302 120.63623047]
[-29.51228333 117.38964081]
[-14.86784363 114.14304352]
[-0.22340356 110.89645386]
[14.42103672 107.64985657]
[29.06547737 104.40325928]
[39.81640244 94.09468079]
[54.96411514 98.66167450]
[69.60855103 95.41507721]
[84.25299835 92.16848755]
[94.14318085 80.89088440]
[95.45051575 65.94796753]
[96.75785065 51.00504684]
[98.06519318 36.06212616]
[88.89588928 22.89764786]
[93.60924530 7.56259537]
[108.58957672 1.82070816]
[122.34525299 10.07667065]
[124.32409668 25.99721527]
[113.00811005 37.36946106]
[111.70077515 52.31238174]
[110.39344025 67.25530243]
[109.08610535 82.19821930]
[118.21752167 94.09852600]
[132.98963928 96.70324707]
[147.76174927 99.30796814]
[162.53387451 101.91268921]
[177.30598450 104.51741028]
[192.24006653 99.29403687]
[203.43041992 109.12385559]
[218.20254517 111.72857666]
[233.13662720 106.50520325]
[244.32696533 116.33502197]
[258.24050903 108.34796906]
[273.10641479 114.37992859]
[277.52084351 129.80369568]
[268.09738159 142.78747559]
[252.06497192 143.37121582]
[241.72224426 131.10713196]
[227.84475708 136.51683044]
[215.59780884 126.50069427]
[200.82569885 123.89597321]
[186.94821167 129.30566406]
[174.70126343 119.28952789]
[159.92915344 116.68480682]
[145.15702820 114.08008575]
[130.38491821 111.47536469]
[115.61280060 108.87063599]
[110.12596893 113.91918182]
[103.33238220 116.12800598]
[96.54653168 115.34068298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[13 18]
[31 43]
[32 42]
[33 41]
[34 40]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 62]
[51 61]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
