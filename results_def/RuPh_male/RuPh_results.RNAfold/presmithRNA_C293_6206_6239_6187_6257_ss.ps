%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGUAAUAAACACAUCAGUUUUUCACAUUGAAGAUGGGCUAUAUCCUAAGGGCUCUAUUAAAUGGUAAA\
) } def
/len { sequence length } bind def

/coor [
[38.94749832 153.58540344]
[27.45683289 163.22721863]
[15.96616650 172.86903381]
[4.47550011 182.51084900]
[-7.01516676 192.15266418]
[-18.50583267 201.79447937]
[-18.32490158 217.43101501]
[-28.27720070 229.49275208]
[-43.66355896 232.28453064]
[-57.21900940 224.48812866]
[-62.54308319 209.78479004]
[-57.12191391 195.11697388]
[-43.51521301 187.41036987]
[-28.14764786 190.30380249]
[-16.65698051 180.66198730]
[-5.16631413 171.02017212]
[6.32435226 161.37835693]
[17.81501961 151.73655701]
[29.30568504 142.09474182]
[29.33152771 131.49385071]
[35.45848846 122.57035065]
[45.75922775 118.57627869]
[56.73574448 121.13814545]
[69.02302551 112.53450012]
[81.31030273 103.93085480]
[83.92967987 89.68006134]
[95.79880524 81.36921692]
[110.08604431 83.78186798]
[122.37332916 75.17821503]
[134.66061401 66.57456970]
[146.94789124 57.97092438]
[148.29470825 46.78016281]
[155.57096863 38.46668625]
[166.05186462 35.76124573]
[176.02227783 39.36267471]
[189.01264954 31.86267471]
[202.00303650 24.36267471]
[214.99342346 16.86267471]
[227.98379517 9.36267567]
[240.80747986 1.58107674]
[253.45834351 -6.47841740]
[266.10922241 -14.53791142]
[265.35913086 -29.87847710]
[272.39407349 -43.53150177]
[285.32168579 -51.82439041]
[300.66455078 -52.52639771]
[314.29544067 -45.44868851]
[322.54776001 -32.49513245]
[323.20169067 -17.15016556]
[316.08126831 -3.54151154]
[303.10192871 4.67017174]
[287.75497437 5.27598238]
[274.16870117 -1.88703978]
[261.51785278 6.17245436]
[248.86697388 14.23194885]
[244.79263306 20.68304062]
[235.48379517 22.35305595]
[222.49342346 29.85305595]
[209.50303650 37.35305786]
[196.51264954 44.85305786]
[183.52227783 52.35305786]
[175.48750305 69.72937012]
[155.55152893 70.25820923]
[143.26425171 78.86185455]
[130.97697449 87.46549988]
[118.68969727 96.06914520]
[116.07032013 110.31993866]
[104.20119476 118.63078308]
[89.91395569 116.21813202]
[77.62667084 124.82178497]
[65.33939362 133.42543030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[23 71]
[24 70]
[25 69]
[28 66]
[29 65]
[30 64]
[31 63]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 55]
[41 54]
[42 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
