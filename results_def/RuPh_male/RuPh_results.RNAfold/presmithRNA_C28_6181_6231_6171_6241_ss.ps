%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCUAGAUUUCUUAUGGUGUAAUAAACACAUCAGUUUUUCACAUUGAAGAUGGGCUAUAUCCUAAGGGC\
) } def
/len { sequence length } bind def

/coor [
[125.03898621 191.16395569]
[131.79464722 177.31956482]
[124.86842346 164.01440430]
[117.94219208 150.70924377]
[111.01596069 137.40406799]
[104.08973694 124.09891510]
[93.40110779 123.53588867]
[83.97777557 118.46000671]
[77.62660980 109.84452820]
[75.56539917 99.34142303]
[78.18937683 88.96459961]
[84.99539948 80.70374298]
[79.86510468 66.60835266]
[74.73480225 52.51296234]
[69.60449982 38.41757202]
[63.54698181 31.15466690]
[64.57254028 23.59390640]
[60.06195450 9.28815269]
[55.55136490 -5.01760149]
[51.04077911 -19.32335663]
[46.53019333 -33.62910843]
[42.01960373 -47.93486404]
[27.45316505 -52.94734955]
[18.73322868 -65.42998505]
[19.03202248 -80.47573853]
[28.02542114 -92.31874084]
[23.51483536 -106.62449646]
[19.00424767 -120.93025208]
[14.49366093 -135.23600769]
[0.36111918 -142.31037903]
[-4.55041552 -157.33210754]
[2.67298365 -171.38906860]
[17.74580193 -176.14151001]
[31.72560310 -168.76989746]
[36.31842041 -153.64767456]
[28.79941559 -139.74659729]
[33.31000137 -125.44083405]
[37.82059097 -111.13508606]
[42.33117676 -96.82933044]
[56.49100494 -92.28650665]
[65.36565399 -80.13313293]
[65.38244629 -64.90640259]
[56.32535934 -52.44544983]
[60.83594513 -38.13969803]
[65.34653473 -23.83394241]
[69.85711670 -9.52818871]
[74.36770630 4.77756548]
[78.87829590 19.08332062]
[83.69988251 33.28727341]
[88.83018494 47.38265991]
[93.96048737 61.47805023]
[99.09078979 75.57344055]
[116.81218719 82.25644684]
[124.44007111 99.59212494]
[117.39489746 117.17268372]
[124.32112885 130.47784424]
[131.24736023 143.78300476]
[138.17358398 157.08816528]
[145.09980774 170.39332581]
[160.31536865 172.80023193]
[171.07041931 183.57902527]
[173.38882446 198.44808960]
[166.58857727 211.67285156]
[173.51480103 224.97801208]
[187.62889099 233.32812500]
[187.18399048 249.72123718]
[172.63777161 257.29351807]
[158.95413208 248.25526428]
[160.20964050 231.90425110]
[153.28341675 218.59909058]
[138.54985046 216.58410645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[12 52]
[13 51]
[14 50]
[15 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[26 39]
[27 38]
[28 37]
[29 36]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
