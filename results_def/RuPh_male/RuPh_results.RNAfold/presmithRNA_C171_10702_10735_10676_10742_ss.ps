%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUGGUAGUUAAUAUAUAAUAAAGGUCUUGUAAACUUUAGUAGGUUUAUCCCUGGCCCUAGUCUU\
) } def
/len { sequence length } bind def

/coor [
[141.78622437 248.27354431]
[137.01936340 234.05113220]
[132.25248718 219.82872009]
[127.48561859 205.60630798]
[122.71874237 191.38389587]
[117.95187378 177.16148376]
[113.18500519 162.93908691]
[99.77894592 156.55055237]
[94.74205780 142.19491577]
[101.53383636 128.17672729]
[96.76696014 113.95431519]
[86.41860199 104.55202484]
[89.01062775 90.81256104]
[84.24375916 76.59014893]
[79.47688293 62.36773682]
[67.75510406 51.74180603]
[71.04669189 37.21545792]
[66.27982330 22.99304962]
[61.51294708 8.77064037]
[56.41765594 3.71800494]
[55.12047577 -2.26621199]
[57.02884293 -6.98935747]
[53.59458542 -21.59092903]
[50.16032410 -36.19249725]
[46.72606659 -50.79407120]
[43.29180908 -65.39563751]
[28.56276703 -69.74890137]
[17.99531364 -80.89450836]
[14.43204021 -95.83434296]
[18.83144951 -110.54966736]
[30.01012230 -121.08213043]
[44.96105194 -124.59855652]
[59.66251373 -120.15304565]
[70.15988922 -108.94141388]
[73.62943268 -93.97953033]
[69.13786316 -79.29207611]
[57.89337921 -68.82990265]
[61.32763672 -54.22832870]
[64.76189423 -39.62675858]
[68.19615173 -25.02518654]
[71.63041687 -10.42361546]
[75.73535919 4.00376892]
[80.50222778 18.22617912]
[85.26910400 32.44858932]
[96.64992523 42.05723953]
[93.69929504 57.60086823]
[98.46616364 71.82328033]
[103.23303986 86.04568481]
[113.58139801 95.44797516]
[110.98937225 109.18743896]
[115.75624084 123.40985107]
[129.62403870 130.50364685]
[134.25572205 144.99510193]
[127.40740967 158.17221069]
[132.17428589 172.39462280]
[136.94114685 186.61703491]
[141.70802307 200.83943176]
[146.47489929 215.06184387]
[151.24176025 229.28425598]
[156.00863647 243.50666809]
[170.84980774 248.03651428]
[180.16706848 260.44488525]
[180.37777710 275.96054077]
[171.40089417 288.61737061]
[156.68821716 293.54855347]
[141.89706421 288.85797119]
[132.71495056 276.34924316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[10 51]
[11 50]
[13 48]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
