%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGCUAAAUGAUAAAGAGACUAUAAGUGCACUGAUAGAAAGCAACCCGGGGGGGCUAUCUUUGUGAAUA\
) } def
/len { sequence length } bind def

/coor [
[-9.37834072 162.80732727]
[-22.36872292 170.30732727]
[-35.35910416 177.80732727]
[-39.55339432 192.80885315]
[-52.83432770 200.22987366]
[-67.11013794 196.13880920]
[-80.10052490 203.63880920]
[-80.73185730 219.05323792]
[-89.61534119 231.66622925]
[-103.91627502 237.45298767]
[-119.07129669 234.56700134]
[-130.24449158 223.92918396]
[-133.87051392 208.93400574]
[-128.79234314 194.36637878]
[-116.63038635 184.87478638]
[-101.26548767 183.48796082]
[-87.60052490 190.64842224]
[-74.61013794 183.14842224]
[-71.01520538 168.73966980]
[-57.94794846 160.94854736]
[-42.85910416 164.81695557]
[-29.86872292 157.31695557]
[-16.87834167 149.81695557]
[-18.91420364 136.65296936]
[-16.25233269 123.56801605]
[-9.20100403 112.19047546]
[1.38383508 103.94418335]
[14.20242023 99.87029266]
[27.67075157 100.49585724]
[40.11633301 105.76572418]
[49.98585510 115.04664612]
[63.58047104 108.70737457]
[77.17508698 102.36809540]
[78.94721985 90.86956024]
[86.13089752 81.71797180]
[96.87958527 77.26571655]
[108.43036652 78.65724182]
[117.81414795 85.53484344]
[131.90953064 80.40454102]
[146.00492859 75.27424622]
[156.32653809 63.28362274]
[170.93257141 66.20132446]
[185.02795410 61.07101822]
[199.12335205 55.94071960]
[205.85890198 41.89543533]
[220.22671509 36.89337158]
[233.57524109 43.40125275]
[247.67063904 38.27095032]
[260.48657227 27.17194939]
[274.69964600 36.41453171]
[269.75280762 52.63074112]
[252.80093384 52.36634064]
[238.70555115 57.49664307]
[232.66316223 71.06223297]
[218.44152832 76.46588898]
[204.25364685 70.03610992]
[190.15826416 75.16641235]
[176.06286621 80.29671478]
[166.74946594 91.92037964]
[151.13522339 89.36962891]
[137.03984070 94.49993134]
[122.94445038 99.63023376]
[116.31320953 116.13889313]
[99.87673950 122.94709778]
[83.51435852 115.96271515]
[69.91974640 122.30198669]
[56.32512665 128.64126587]
[56.52221298 145.53410339]
[49.48040771 160.83110046]
[36.60179138 171.59724426]
[20.40335464 175.78877258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[6 18]
[7 17]
[31 67]
[32 66]
[33 65]
[38 62]
[39 61]
[40 60]
[42 58]
[43 57]
[44 56]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
