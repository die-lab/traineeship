%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGUGGGUCGUAGUUGGACUUCUAAUCUUGAUUAUAAGCAGUUCGACUCUGUUUUUUUCUCUGUGGGAC\
) } def
/len { sequence length } bind def

/coor [
[187.74578857 238.33810425]
[179.14215088 226.05082703]
[170.53849792 213.76354980]
[161.93486023 201.47627258]
[147.26762390 199.15081787]
[138.36726379 186.81233215]
[140.90585327 171.44374084]
[132.30221558 159.15646362]
[123.69856262 146.86918640]
[115.09491730 134.58190918]
[106.49127197 122.29462433]
[97.88762665 110.00733948]
[90.83305359 105.56549835]
[89.19048309 96.99114227]
[81.13098907 84.34027100]
[73.07149506 71.68939972]
[65.01199341 59.03852844]
[56.95250320 46.38765717]
[50.82877350 42.73849106]
[48.12371063 37.28632355]
[48.79821396 32.26401138]
[41.87198257 18.95884895]
[34.94575500 5.65368652]
[21.71047401 -3.01452827]
[22.69674301 -17.87644386]
[15.77051449 -31.18160629]
[8.84428501 -44.48677063]
[1.91805565 -57.79193115]
[-12.19603920 -66.14204407]
[-11.75113773 -82.53515625]
[2.79508376 -90.10743713]
[16.47871971 -81.06917572]
[15.22321796 -64.71816254]
[22.14944649 -51.41299820]
[29.07567596 -38.10783386]
[36.00190735 -24.80267334]
[48.74177551 -17.08613205]
[48.25091553 -1.27254283]
[55.17714691 12.03261948]
[62.10337448 25.33778191]
[69.60337830 38.32816315]
[77.66287231 50.97903442]
[85.72236633 63.62990570]
[93.78186035 76.28077698]
[101.84135437 88.93164825]
[110.17490387 101.40369415]
[118.77854919 113.69097137]
[127.38219452 125.97825623]
[135.98583984 138.26553345]
[144.58949280 150.55281067]
[153.19313049 162.84010315]
[168.50312805 165.71096802]
[177.05342102 178.29457092]
[174.22213745 192.87261963]
[182.82577515 205.15989685]
[191.42942810 217.44717407]
[200.03308105 229.73446655]
[215.34306335 232.60533142]
[223.89335632 245.18893433]
[221.06207275 259.76699829]
[229.66572571 272.05426025]
[238.26936340 284.34155273]
[246.87301636 296.62881470]
[260.91082764 306.13543701]
[255.66180420 322.25634766]
[238.71781921 321.67517090]
[234.58573914 305.23248291]
[225.98208618 292.94519043]
[217.37843323 280.65789795]
[208.77479553 268.37063599]
[194.10755920 266.04516602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[27 34]
[28 33]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
