%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUAUGUGGUAAAUUUAGAAUUUAUUUAUGGGGUUAUUCCUCUUCAAUAGUGAGAAUAUUUUUAACUUC\
) } def
/len { sequence length } bind def

/coor [
[18.34074783 183.51106262]
[11.17372608 185.68974304]
[3.72255397 186.35633850]
[-3.69768000 185.48677063]
[-10.77402782 183.12176514]
[-17.20887947 179.36506653]
[-22.73248100 174.37886047]
[-27.11423874 168.37678528]
[-30.17234993 161.61471558]
[-31.78133774 154.37995911]
[-46.72425842 153.07263184]
[-61.66717911 151.76528931]
[-76.61009979 150.45796204]
[-91.55301666 149.15061951]
[-106.49594116 147.84329224]
[-121.43885803 146.53594971]
[-136.38177490 145.22860718]
[-152.68762207 149.87147522]
[-161.66293335 135.48814392]
[-150.32632446 122.88188934]
[-135.07444763 130.28569031]
[-120.13152313 131.59303284]
[-105.18860626 132.90036011]
[-90.24568176 134.20770264]
[-75.30276489 135.51502991]
[-60.35984421 136.82237244]
[-45.41692352 138.12971497]
[-30.47400284 139.43704224]
[-15.10853767 119.11429596]
[10.02091789 113.92848206]
[32.49160004 126.68728638]
[45.79676056 119.76105499]
[59.10192490 112.83482361]
[72.40708923 105.90859985]
[85.71224976 98.98236847]
[93.38594055 87.29450226]
[107.36151886 87.71247101]
[120.66668701 80.78623962]
[133.97184753 73.86000824]
[147.27700806 66.93378448]
[160.58216858 60.00755310]
[173.73307800 52.79272079]
[181.81571960 39.19193649]
[196.70651245 39.52899933]
[209.69689941 32.02899933]
[215.22131348 16.96711349]
[230.48651123 12.03224373]
[243.78236389 21.01000023]
[244.90940857 37.01341629]
[233.00308228 47.76604080]
[217.19689941 45.01937866]
[204.20651245 52.51937866]
[197.05302429 65.58371735]
[181.23307800 65.78310394]
[176.88121033 72.05033875]
[167.50840759 73.31271362]
[154.20323181 80.23894501]
[140.89807129 87.16517639]
[127.59291077 94.09140015]
[114.28775024 101.01763153]
[106.61405945 112.70549774]
[92.63848114 112.28752899]
[79.33331299 119.21376038]
[66.02815247 126.13999176]
[52.72299194 133.06622314]
[39.41782761 139.99244690]
[40.66333389 147.44941711]
[40.35849380 154.99362183]
[38.52022934 162.30654907]
[35.23012543 169.08030701]
[30.63079453 175.03057861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 54]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
