%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAGCAUUGAACAACACUUAUUAUCGUUAUGGACAGUUGAUAAUGAAACUUUUUUUGAUGUAUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[91.97356415 311.50555420]
[95.00231934 292.36199951]
[95.65660858 277.37625122]
[96.31089783 262.39053345]
[96.96519470 247.40481567]
[97.61948395 232.41909790]
[97.61948395 217.41909790]
[96.96519470 202.43336487]
[96.31089783 187.44764709]
[95.65660858 172.46192932]
[95.00231934 157.47619629]
[94.34803009 142.49047852]
[93.69374084 127.50475311]
[93.03944397 112.51902771]
[85.68968964 100.62480164]
[91.97483063 88.13526154]
[91.32054138 73.14953613]
[77.18346405 64.14214325]
[71.15191650 48.67821884]
[75.37260437 32.79506302]
[88.02958679 22.57155991]
[86.72224426 7.62863874]
[85.41490936 -7.31428194]
[84.10757446 -22.25720215]
[82.80023956 -37.20012283]
[81.49290466 -52.14304352]
[80.18556976 -67.08596039]
[78.87822723 -82.02888489]
[77.57089233 -96.97180176]
[63.42570496 -102.81750488]
[53.62629700 -114.57463837]
[50.42450333 -129.54150391]
[54.55607224 -144.27882385]
[65.07160187 -155.40007019]
[79.55469513 -160.34967041]
[94.67725372 -157.99023438]
[106.96421051 -148.86393738]
[113.59212494 -135.06794739]
[113.03794098 -119.77248383]
[105.42901611 -106.49231720]
[92.51381683 -98.27914429]
[93.82115173 -83.33621979]
[95.12848663 -68.39330292]
[96.43582153 -53.45037842]
[97.74315643 -38.50745773]
[99.05049896 -23.56453896]
[100.35783386 -8.62161827]
[101.66516876 6.32130241]
[102.97250366 21.26422310]
[115.14455414 27.15637589]
[122.81072998 38.42907715]
[123.83316040 52.13273621]
[117.82997131 64.61523438]
[106.30625916 72.49524689]
[106.96055603 87.48097229]
[114.31031036 99.37519836]
[108.02516937 111.86473846]
[108.67945862 126.85046387]
[109.33375549 141.83618164]
[109.98804474 156.82191467]
[110.64233398 171.80763245]
[111.29662323 186.79335022]
[111.95091248 201.77908325]
[112.60520935 216.76480103]
[116.08393097 222.98693848]
[115.70050049 229.06118774]
[112.60520935 233.07337952]
[111.95091248 248.05911255]
[111.29662323 263.04483032]
[110.64233398 278.03054810]
[109.98804474 293.01626587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[16 55]
[17 54]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
