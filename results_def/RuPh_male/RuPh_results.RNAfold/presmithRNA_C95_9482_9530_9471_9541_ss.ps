%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCUUAUUUAGAUAGUUUAGAACUAGAGUAAGAGUAAACUUGUAAGUUGUUUAGUUUUGCUAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[152.97470093 207.70640564]
[140.49111938 216.02265930]
[126.35634613 221.04344177]
[111.42391205 222.46556091]
[96.59551239 220.20314026]
[82.76655579 214.39280701]
[70.77210236 205.38542175]
[61.33643723 193.72488403]
[55.02933121 180.11531067]
[52.23163605 165.37852478]
[53.11229706 150.40440369]
[57.61812973 136.09715271]
[65.47705078 123.32070923]
[76.21450043 112.84658813]
[89.17787170 105.30907440]
[74.68898010 101.42678833]
[60.20009232 97.54450226]
[45.71120453 93.66221619]
[31.22231865 89.77993011]
[14.35798359 91.52078247]
[8.01665783 75.79742432]
[21.37008476 65.35126495]
[35.10460281 75.29104614]
[49.59349060 79.17333221]
[64.08238220 83.05561829]
[78.57126617 86.93790436]
[93.06015778 90.82019043]
[97.12998962 89.03900146]
[101.50271606 88.94851685]
[112.99337769 79.30670166]
[124.48404694 69.66488647]
[135.97471619 60.02307510]
[147.46537781 50.38125992]
[158.95605469 40.73944855]
[170.44671631 31.09763336]
[176.04481506 16.29993820]
[190.76791382 14.04612064]
[202.25857544 4.40430689]
[213.74925232 -5.23750734]
[225.23991394 -14.87932205]
[236.73057556 -24.52113533]
[234.67564392 -39.81102753]
[241.23393250 -53.77499008]
[254.31274414 -61.95717621]
[269.73867798 -61.74667740]
[282.58935547 -53.21066666]
[288.76419067 -39.07295227]
[286.29281616 -23.84482574]
[275.96380615 -12.38552856]
[261.07315063 -8.35168171]
[246.37239075 -13.03046894]
[234.88172913 -3.38865495]
[223.39106750 6.25315905]
[211.90039062 15.89497375]
[200.40972900 25.53678703]
[195.63351440 39.64483643]
[180.08853149 42.58829880]
[168.59785461 52.23011398]
[157.10719299 61.87192917]
[145.61653137 71.51374054]
[134.12585449 81.15555573]
[122.63519287 90.79737091]
[111.14453125 100.43918610]
[126.08332062 101.79291534]
[140.24093628 106.74890900]
[152.76246643 115.00791931]
[162.89181519 126.07120514]
[170.01730347 139.27072144]
[173.70867920 153.80943298]
[173.74301147 168.80938721]
[170.11825562 183.36483765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
