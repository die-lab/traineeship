%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGCUUUUUAGUUAUAGCCUUAUAGCAAUUCAGGUAAACGUGUAGGAUCUAAAGGGUUUAGCUGAGUU\
) } def
/len { sequence length } bind def

/coor [
[121.13262177 107.50946808]
[112.93443298 117.24456787]
[101.19316864 120.65097809]
[90.01540375 117.11499786]
[78.11510468 126.24641418]
[66.21479797 135.37783813]
[54.31450272 144.50926208]
[42.41419983 153.64068604]
[36.64183426 168.99032593]
[20.42051315 171.39881897]
[10.43734550 158.38850403]
[16.96215630 143.34327698]
[33.28277969 141.74038696]
[45.18307877 132.60896301]
[57.08338165 123.47753906]
[68.98368073 114.34611511]
[80.88397980 105.21469116]
[79.10261536 96.05758667]
[81.76808929 86.44704437]
[88.86544037 78.54860687]
[76.21456909 70.48911285]
[60.84108734 74.15404510]
[47.42285156 65.80381012]
[43.92065811 50.39244461]
[52.41229630 37.06324005]
[67.85983276 33.72418213]
[81.09851074 42.35626984]
[84.27406311 57.83824158]
[96.92493439 65.89773560]
[111.79660034 67.85562897]
[126.10235596 63.34503937]
[140.40811157 58.83445358]
[154.71386719 54.32386780]
[169.01962280 49.81328201]
[183.32537842 45.30269241]
[197.63113403 40.79210663]
[208.46594238 29.26312065]
[222.93080139 32.81515121]
[237.23655701 28.30456352]
[251.54231262 23.79397583]
[265.84805298 19.28338814]
[280.15380859 14.77280235]
[290.98861694 3.24381566]
[305.45349121 6.79584551]
[317.37786865 -7.04178429]
[334.30456543 -2.95569038]
[348.39996338 -8.08599281]
[362.49536133 -13.21629429]
[375.31130981 -24.31529808]
[389.52435303 -15.07271385]
[384.57754517 1.14349294]
[367.62567139 0.87909460]
[353.53027344 6.00939655]
[339.43487549 11.13969898]
[333.90261841 22.11686516]
[321.94854736 26.39780998]
[309.96408081 21.10160065]
[300.15252686 32.30796051]
[284.66439819 29.07855606]
[270.35864258 33.58914185]
[256.05288696 38.09973145]
[241.74714661 42.61031723]
[227.44139099 47.12090302]
[217.62982178 58.32726288]
[202.14172363 55.09786224]
[187.83596802 59.60844803]
[173.53021240 64.11903381]
[159.22445679 68.62962341]
[144.91870117 73.14020538]
[130.61294556 77.65079498]
[116.30718994 82.16138458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 29]
[21 28]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[44 57]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
