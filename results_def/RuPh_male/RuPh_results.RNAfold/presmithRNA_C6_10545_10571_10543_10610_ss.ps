%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:03:32 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGGGUAGUGUAAAGUGCACAUAGGGUUUUGAUCCCUAAAGAAACUAUUCAAAUGGUUUCUUGUUA\
) } def
/len { sequence length } bind def

/coor [
[125.01912689 179.57104492]
[111.22264099 185.45806885]
[96.22653961 185.79985046]
[82.17617035 180.54750061]
[71.08160400 170.45242310]
[64.53004456 156.95883179]
[63.45875931 141.99713135]
[68.02101135 127.70777130]
[77.56411743 116.13499451]
[90.72452545 108.93388367]
[75.82159424 110.63758087]
[60.91866302 112.34128571]
[46.01572800 114.04499054]
[31.11279678 115.74869537]
[16.06290627 123.55491638]
[4.39552784 111.25415802]
[12.98571491 96.63755798]
[29.40909386 100.84575653]
[44.31202698 99.14205933]
[59.21495819 97.43835449]
[74.11788940 95.73464966]
[89.02082062 94.03094482]
[88.20149994 90.76847076]
[88.21217346 87.11330414]
[84.82682037 72.50031281]
[81.44146729 57.88732910]
[78.05610657 43.27434158]
[74.67075348 28.66135597]
[60.65109634 21.73436546]
[54.41136551 7.39561319]
[58.89777374 -7.58457851]
[71.99197388 -16.13302231]
[87.51129150 -14.21340275]
[98.12796783 -2.73210788]
[98.82913971 12.88974762]
[89.28373718 25.27600098]
[92.66909790 39.88898849]
[96.05445099 54.50197220]
[99.43980408 69.11495972]
[102.82516479 83.72794342]
[114.24233246 93.45668030]
[129.20736694 94.48031616]
[144.17239380 95.50395203]
[159.13742065 96.52758789]
[174.10246277 97.55122375]
[189.06748962 98.57485962]
[204.03251648 99.59849548]
[218.99755859 100.62213135]
[233.96258545 101.64576721]
[248.92761230 102.66940308]
[263.41018677 94.97608948]
[277.16870117 103.89994049]
[276.04959106 120.26085663]
[261.20410156 127.22813416]
[247.90397644 117.63443756]
[232.93894958 116.61080170]
[217.97392273 115.58716583]
[203.00888062 114.56352234]
[188.04385376 113.53988647]
[173.07882690 112.51625061]
[158.11378479 111.49261475]
[143.14875793 110.46897888]
[128.18373108 109.44534302]
[113.21869659 108.42170715]
[126.69180298 115.01529694]
[136.75224304 126.14128113]
[141.96076965 140.20794678]
[141.57225037 155.20291138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
