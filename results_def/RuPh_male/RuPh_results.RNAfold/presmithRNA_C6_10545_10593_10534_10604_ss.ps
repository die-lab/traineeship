%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUAUUAAACAGGGUAGUGUAAAGUGCACAUAGGGUUUUGAUCCCUAAAGAAACUAUUCAAAUGGUUUC\
) } def
/len { sequence length } bind def

/coor [
[93.14730835 136.54663086]
[77.40905762 131.20550537]
[65.07082367 119.21463776]
[52.41995621 127.27413177]
[39.76908112 135.33363342]
[27.11821175 143.39312744]
[14.46733952 151.45262146]
[1.81646776 159.51211548]
[-1.35908437 174.99407959]
[-14.59776306 183.62617493]
[-30.04529381 180.28710938]
[-38.53693390 166.95791626]
[-35.03474045 151.54653931]
[-21.61650276 143.19630432]
[-6.24302626 146.86123657]
[6.40784550 138.80174255]
[19.05871773 130.74224854]
[31.70958900 122.68275452]
[44.36046219 114.62326050]
[57.01133347 106.56376648]
[57.33855438 91.56733704]
[45.05127335 82.96369171]
[32.76399231 74.36004639]
[16.32129860 70.22796631]
[15.74010563 53.28398132]
[31.86102104 48.03493881]
[41.36764145 62.07276535]
[53.65492249 70.67641449]
[65.94219971 79.28005981]
[74.77528381 70.88216400]
[85.39960480 65.80285645]
[96.66577911 64.31279755]
[107.43505859 66.30895233]
[113.77433777 52.71433258]
[120.11360931 39.11971664]
[126.45288086 25.52509880]
[132.79216003 11.93048191]
[126.01988983 -2.16456842]
[129.94223022 -17.30224800]
[142.70715332 -26.33500671]
[158.28746033 -24.99785233]
[169.32659912 -13.92214966]
[170.61224365 1.66249526]
[161.53733826 14.39748859]
[146.38677979 18.26975632]
[140.04750061 31.86437225]
[133.70822144 45.45898819]
[127.36894989 59.05360413]
[121.02967834 72.64822388]
[130.83682251 84.52557373]
[134.49787903 99.48712921]
[131.28320312 114.55089569]
[143.18350220 123.68231964]
[155.08380127 132.81373596]
[166.98410034 141.94515991]
[178.88439941 151.07658386]
[190.78469849 160.20800781]
[202.68499756 169.33943176]
[214.58529663 178.47085571]
[230.90591431 180.07374573]
[237.43072510 195.11897278]
[227.44757080 208.12928772]
[211.22624207 205.72079468]
[205.45387268 190.37115479]
[193.55357361 181.23973083]
[181.65327454 172.10830688]
[169.75297546 162.97688293]
[157.85267639 153.84545898]
[145.95237732 144.71403503]
[134.05207825 135.58262634]
[122.15177917 126.45119476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[21 29]
[22 28]
[23 27]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
