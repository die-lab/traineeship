%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUUGGCGGUGUUUCAAAUCCGGUUAGGGGAACUUGGCGAUUAAAUCGAUAAUCCUCGAGUAUUUCACC\
) } def
/len { sequence length } bind def

/coor [
[60.32271194 133.94969177]
[47.33232880 141.44969177]
[34.34194946 148.94969177]
[26.25930023 162.55047607]
[11.36850929 162.21340942]
[-1.62187219 169.71340942]
[-14.61225319 177.21340942]
[-27.60263443 184.71340942]
[-30.13970757 200.14381409]
[-42.03530884 210.29411316]
[-57.67270279 210.37165833]
[-69.66838074 200.33982849]
[-72.35836029 184.93534851]
[-64.47251129 171.43174744]
[-49.73429108 166.20500183]
[-35.10263443 171.72303772]
[-22.11225319 164.22303772]
[-9.12187195 156.72303772]
[3.86850882 149.22303772]
[11.02199936 136.15870667]
[26.84194946 135.95930481]
[39.83232880 128.45930481]
[52.82271194 120.95931244]
[65.64639282 113.17771149]
[78.29726410 105.11821747]
[90.94813538 97.05872345]
[93.33379364 92.00211334]
[98.50024414 88.79415131]
[105.07177734 88.90443420]
[118.37693787 81.97820282]
[131.68209839 75.05197906]
[144.98727417 68.12574768]
[153.65548706 54.89046860]
[168.51739502 55.87673569]
[181.82255554 48.95050812]
[195.12771606 42.02427673]
[208.43289185 35.09804916]
[221.73805237 28.17181969]
[235.04321289 21.24559021]
[243.71142578 8.01031017]
[258.57333374 8.99657917]
[271.87850952 2.07035041]
[285.18365479 -4.85587883]
[298.48883057 -11.78210831]
[311.79397583 -18.70833778]
[316.30679321 -33.85462570]
[330.24743652 -41.30004120]
[345.34515381 -36.62734604]
[352.64279175 -22.60877037]
[347.81072998 -7.56128597]
[333.71578979 -0.41229823]
[318.72021484 -5.40317488]
[305.41506958 1.52305448]
[292.10989380 8.44928360]
[278.80471802 15.37551308]
[265.49957275 22.30174255]
[257.78302002 35.04161072]
[241.96943665 34.55075455]
[228.66427612 41.47698212]
[215.35911560 48.40320969]
[202.05395508 55.32944107]
[188.74879456 62.25566864]
[175.44361877 69.18190002]
[167.72708130 81.92176819]
[151.91349792 81.43090820]
[138.60833740 88.35713959]
[125.30316925 95.28337097]
[111.99800873 102.20959473]
[99.00762939 109.70959473]
[86.35675812 117.76908875]
[73.70588684 125.82858276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[5 19]
[6 18]
[7 17]
[8 16]
[24 71]
[25 70]
[26 69]
[29 68]
[30 67]
[31 66]
[32 65]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
