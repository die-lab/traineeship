%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAUAUAUAAAGCAAAGGAUUUUUAAUCUUUCGUUGCAGUAAUUGUCAAAAAUACAGGAAAUAGCAUAU\
) } def
/len { sequence length } bind def

/coor [
[85.13578796 129.38241577]
[75.49397278 140.87307739]
[65.85215759 152.36373901]
[56.21034241 163.85441589]
[59.10378265 179.22196960]
[51.39717865 192.82867432]
[36.72935867 198.24984741]
[22.02601814 192.92576599]
[14.22962189 179.37031555]
[17.02139282 163.98396301]
[29.08313942 154.03166199]
[44.71967697 154.21260071]
[54.36148834 142.72192383]
[64.00330353 131.23126221]
[73.64511871 119.74059296]
[67.35343933 104.29800415]
[69.43389893 87.75319672]
[57.14661789 79.14954376]
[44.85933685 70.54589844]
[32.57205582 61.94225311]
[20.28477478 53.33860779]
[7.99749374 44.73496246]
[-4.28978682 36.13131332]
[-20.73248291 31.99923325]
[-21.31367493 15.05525017]
[-5.19275999 9.80620956]
[4.31385946 23.84403419]
[16.60114098 32.44768143]
[28.88842010 41.05132675]
[41.17570114 49.65497208]
[53.46298218 58.25862122]
[65.75025940 66.86226654]
[78.03754425 75.46591187]
[92.01042175 68.05570984]
[107.82658386 68.01538849]
[121.83706665 75.35424805]
[130.80952454 88.37913513]
[145.68118286 86.42124176]
[160.55285645 84.46334839]
[173.22505188 74.99095917]
[186.85336304 81.00082397]
[201.72503662 79.04293060]
[211.95783997 65.04256439]
[228.79862976 62.66513443]
[241.97969055 72.87738037]
[256.75180054 70.27265930]
[271.52392578 67.66793060]
[286.29605103 65.06320953]
[293.95761108 51.43110657]
[308.60745239 45.96147919]
[323.32830811 51.23691177]
[331.16946411 64.76651764]
[328.42858887 80.16201782]
[316.39981079 90.15413666]
[300.76275635 90.02490234]
[288.90075684 79.83532715]
[274.12866211 82.44004822]
[259.35653687 85.04476929]
[244.58441162 87.64949799]
[238.62182617 99.27622986]
[226.83052063 105.34854126]
[213.51379395 103.39309692]
[203.68292236 93.91460419]
[188.81124878 95.87248993]
[177.20278931 105.20484161]
[162.51075745 99.33502197]
[147.63908386 101.29291534]
[132.76741028 103.25080872]
[129.10102844 115.40782166]
[121.10721588 125.27363586]
[109.97467041 131.38114929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[37 68]
[38 67]
[39 66]
[41 64]
[42 63]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
