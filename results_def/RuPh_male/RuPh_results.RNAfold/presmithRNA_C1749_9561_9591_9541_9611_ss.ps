%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGUGAUCUUUCUUACUAUGCUUGAGUUUUUAGUUAUGGGUUGUUGUUUAAGCUCAGUUAAAUUAGUU\
) } def
/len { sequence length } bind def

/coor [
[157.91691589 243.64184570]
[167.45504761 231.83557129]
[159.95504761 218.84518433]
[152.45504761 205.85479736]
[144.95504761 192.86442566]
[131.89071655 185.71093750]
[131.69132996 169.89097595]
[124.19132233 156.90060425]
[116.69132233 143.91021729]
[103.62699127 136.75672913]
[103.42760468 120.93677521]
[90.70764923 119.07221222]
[81.39981079 110.20441437]
[78.92188263 97.58959198]
[84.18374634 85.85987091]
[68.96819305 83.45296478]
[58.21315002 72.67417908]
[55.89473724 57.80511475]
[62.69498825 44.58034515]
[55.76876068 31.27518272]
[48.84252930 17.97002029]
[41.91630173 4.66485834]
[34.99007416 -8.64030457]
[21.75479317 -17.30851936]
[22.74106216 -32.17043304]
[15.81483269 -45.47559738]
[8.88860321 -58.78075790]
[1.96237445 -72.08592224]
[-12.15172005 -80.43603516]
[-11.70681858 -96.82914734]
[2.83940244 -104.40142822]
[16.52303886 -95.36316681]
[15.26753712 -79.01215363]
[22.19376564 -65.70698547]
[29.11999512 -52.40182495]
[36.04622269 -39.09666443]
[48.78609467 -31.38012314]
[48.29523468 -15.56653309]
[55.22146606 -2.26137114]
[62.14769363 11.04379177]
[69.07392120 24.34895325]
[76.00015259 37.65411758]
[90.73371124 39.66909027]
[101.58394623 50.09676743]
[104.24457550 65.08924866]
[97.48891449 78.93363953]
[113.22650146 83.41214752]
[121.09664917 97.75752258]
[116.41798401 113.43677521]
[130.01876831 121.51943207]
[129.68170166 136.41021729]
[137.18170166 149.40060425]
[144.68170166 162.39097595]
[158.28248596 170.47363281]
[157.94541931 185.36442566]
[165.44541931 198.35479736]
[172.94541931 211.34518433]
[180.44541931 224.33557129]
[195.43904114 221.97843933]
[210.27082825 225.20062256]
[222.93492126 233.56634521]
[231.71858215 245.94421387]
[235.43392944 260.66021729]
[233.57846069 275.72412109]
[226.40313721 289.09869385]
[214.87834167 298.97512817]
[200.56271362 304.01766968]
[185.39233398 303.54440308]
[171.41886902 297.61932373]
[160.53210449 287.04376221]
[154.20439148 273.24792480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[7 53]
[8 52]
[9 51]
[11 49]
[15 46]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
