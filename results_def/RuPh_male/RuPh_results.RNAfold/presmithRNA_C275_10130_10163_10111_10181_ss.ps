%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAAAGCAAAGGAUUUUUAAUCUUUCGUUGCAGUAAUUGUCAAAAAUACAGGAAAUAGCAUAUAUAGAA\
) } def
/len { sequence length } bind def

/coor [
[87.47586823 183.94569397]
[77.35790253 172.87199402]
[71.21376038 159.18807983]
[69.66071320 144.26869202]
[72.85478210 129.61270142]
[80.47508240 116.69252014]
[91.75431824 106.80724335]
[76.81139374 105.49990845]
[61.86847687 104.19257355]
[47.44646835 110.69766235]
[35.44197845 101.88055420]
[20.49905777 100.57321930]
[5.55613661 99.26588440]
[-9.38678360 97.95854187]
[-24.32970428 96.65120697]
[-39.27262497 95.34387207]
[-54.21554565 94.03653717]
[-70.52137756 98.67939758]
[-79.49669647 84.29607391]
[-68.16009521 71.68981171]
[-52.90821075 79.09361267]
[-37.96529007 80.40095520]
[-23.02236748 81.70829010]
[-8.07944775 83.01562500]
[6.86347294 84.32295990]
[21.80639267 85.63029480]
[36.74931335 86.93762970]
[50.10250473 80.33902740]
[63.17581177 89.24964905]
[78.11873627 90.55699158]
[93.06165314 91.86432648]
[107.46240234 87.66689301]
[119.36270142 78.53546906]
[125.60094452 63.99604416]
[140.40834045 62.38658142]
[152.30863953 53.25516129]
[154.17033386 36.01408386]
[167.56616211 25.53477859]
[184.08741760 27.78830910]
[195.57809448 18.14649582]
[207.06875610 8.50468159]
[218.55941772 -1.13713300]
[218.37849426 -16.77367020]
[228.33079529 -28.83541679]
[243.71714783 -31.62718773]
[257.27261353 -23.83079147]
[262.59667969 -9.12744904]
[257.17550659 5.54037094]
[243.56880188 13.24697208]
[228.20123291 10.35353374]
[216.71057129 19.99534798]
[205.21990967 29.63716125]
[193.72923279 39.27897644]
[194.37884521 52.32932281]
[187.20343018 63.48374939]
[174.69308472 68.44864655]
[161.44006348 65.15546417]
[149.53976440 74.28688049]
[144.15270996 88.17317200]
[128.49412537 90.43576813]
[116.59382629 99.56719208]
[131.41992188 101.84464264]
[144.78852844 108.64759827]
[155.35658264 119.29261017]
[162.06236267 132.71023560]
[164.23217773 147.55247498]
[161.64802551 162.32820129]
[154.56954956 175.55299377]
[143.70785522 185.89822388]
[130.15417480 192.32455444]
[115.27017212 194.18638611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[32 61]
[33 60]
[35 58]
[36 57]
[39 53]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
