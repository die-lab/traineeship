%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGACUUCUAAUCUUGAUUAUAAGCAGUUCGACUCUGUUUUUUUCUCUGUGGGACGGACUGGUUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[20.31513405 196.45817566]
[11.18371201 208.35847473]
[2.05229068 220.25877380]
[-7.07913065 232.15907288]
[-16.21055222 244.05937195]
[-17.81344986 260.38000488]
[-32.85867691 266.90481567]
[-45.86899567 256.92163086]
[-43.46050262 240.70031738]
[-28.11085320 234.92794800]
[-18.97943115 223.02764893]
[-9.84800911 211.12734985]
[-0.71658802 199.22705078]
[8.41483307 187.32675171]
[2.21439719 176.71885681]
[0.08497362 164.58175659]
[2.31675935 152.42710876]
[8.65521526 141.77740479]
[18.32983589 133.97537231]
[30.14774323 130.01458740]
[42.64074326 130.41308594]
[54.24771500 135.14567566]
[64.85431671 124.53907776]
[75.46092224 113.93247986]
[86.06752014 103.32587433]
[89.87144470 89.87144470]
[103.32587433 86.06752014]
[113.93247986 75.46092224]
[124.53907776 64.85431671]
[135.14567566 54.24771500]
[145.75228882 43.64111328]
[156.35888672 33.03451157]
[166.96548462 22.42791176]
[171.25257874 7.19861889]
[185.72322083 3.67017603]
[196.32981873 -6.93642569]
[206.93643188 -17.54302788]
[200.77899170 -31.41567612]
[200.05262756 -46.57604599]
[204.85559082 -60.97382355]
[214.53829956 -72.66182709]
[227.79127502 -80.05934906]
[242.82212830 -82.16593933]
[257.59808350 -78.69669342]
[270.12078857 -70.12080383]
[278.69668579 -57.59808350]
[282.16595459 -42.82212830]
[280.05935669 -27.79127121]
[272.66183472 -14.53830528]
[260.97381592 -4.85558844]
[246.57604980 -0.05262825]
[231.41567993 -0.77898526]
[217.54302979 -6.93642569]
[206.93643188 3.67017603]
[196.32981873 14.27677727]
[192.80137634 28.74741554]
[177.57208252 33.03451157]
[166.96548462 43.64111328]
[156.35888672 54.24771500]
[145.75228882 64.85431671]
[135.14567566 75.46092224]
[124.53907776 86.06752014]
[113.93247986 96.67412567]
[110.12855530 110.12855530]
[96.67412567 113.93247986]
[86.06752014 124.53907776]
[75.46092224 135.14567566]
[64.85431671 145.75228882]
[70.30390167 162.99829102]
[66.55032349 180.60748291]
[54.65020370 194.00985718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[22 68]
[23 67]
[24 66]
[25 65]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[35 55]
[36 54]
[37 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
