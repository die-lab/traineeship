%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:13:19 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUGUAGCUUAUAUAUAAAGCAAAGGAUUUUUAAUCUUUCGUUGCAGUAAUUGUCAAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[99.11602783 239.06600952]
[98.40229797 224.08300781]
[97.68856812 209.09999084]
[96.97483826 194.11698914]
[96.26110840 179.13397217]
[95.54738617 164.15097046]
[94.83365631 149.16795349]
[83.67394257 139.37017822]
[82.73668671 124.18544006]
[93.08915710 112.54653931]
[85.69227600 100.68156433]
[91.92782593 88.16719055]
[91.21410370 73.18417358]
[90.50037384 58.20116806]
[89.78664398 43.21815872]
[78.71678162 38.41622162]
[70.40473175 29.74188995]
[66.11683655 18.57553482]
[66.48352814 6.67242908]
[71.40696716 -4.11314344]
[80.08262634 -12.11675072]
[91.13047791 -16.12064362]
[92.55632019 -31.05272293]
[93.98215485 -45.98480225]
[87.59168243 -60.45796204]
[96.50375366 -72.39212799]
[97.92958832 -87.32420349]
[99.35543060 -102.25628662]
[100.78127289 -117.18836212]
[102.20711517 -132.12043762]
[103.63295746 -147.05252075]
[105.05879211 -161.98460388]
[100.54544067 -178.32675171]
[114.99951172 -187.18768311]
[127.51544189 -175.75143433]
[119.99087524 -160.55876160]
[118.56503296 -145.62667847]
[117.13919067 -130.69459534]
[115.71334839 -115.76251984]
[114.28751373 -100.83044434]
[112.86167145 -85.89836884]
[111.43582916 -70.96628571]
[117.92829132 -57.56116867]
[108.91423798 -44.55895996]
[107.48839569 -29.62688255]
[106.06255341 -14.69480324]
[120.63108063 -3.61045909]
[126.01735687 14.03472137]
[120.03055573 31.63652039]
[104.76965332 42.50442886]
[105.48338318 57.48743820]
[106.19711304 72.47045135]
[106.91084290 87.45346069]
[114.30772400 99.31843567]
[108.07217407 111.83280945]
[119.48412323 122.43494415]
[119.99450684 137.64001465]
[109.81666565 148.45422363]
[110.53039551 163.43724060]
[111.24411774 178.42024231]
[111.95784760 193.40325928]
[112.67157745 208.38626099]
[113.38530731 223.36927795]
[114.09903717 238.35227966]
[117.20370483 257.48370361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[10 55]
[12 53]
[13 52]
[14 51]
[15 50]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
