%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUAAAGCAAAGGAUUUUUAAUCUUUCGUUGCAGUAAUUGUCAAAAAUACAGGAAAUAGCAUAUAUAGA\
) } def
/len { sequence length } bind def

/coor [
[100.36601257 190.23641968]
[99.05867767 175.29350281]
[97.75134277 160.35057068]
[96.44400787 145.40765381]
[95.13667297 130.46473694]
[93.82933044 115.52181244]
[81.62000275 104.46817780]
[84.05332947 86.14134216]
[69.28121185 83.53662109]
[54.50909424 80.93190002]
[39.57501221 86.15527344]
[28.38466263 76.32545471]
[13.61254692 73.72073364]
[-1.15956938 71.11601257]
[-15.93168545 68.51128387]
[-30.70380211 65.90656281]
[-45.47591782 63.30184174]
[-60.24803543 60.69711685]
[-76.89646912 63.90116501]
[-84.58404541 48.79032516]
[-72.19187927 37.22008514]
[-57.64331055 45.92500305]
[-42.87119675 48.52972412]
[-28.09907913 51.13444901]
[-13.32696342 53.73917007]
[1.44515324 56.34389114]
[16.21726990 58.94861603]
[30.98938560 61.55333710]
[44.86687088 56.14365387]
[57.11381912 66.15978241]
[71.88593292 68.76450348]
[86.65805054 71.36922455]
[101.36982727 68.44287109]
[114.02069855 60.38337708]
[121.50240326 46.44297791]
[136.39372253 46.13019180]
[149.04458618 38.07069778]
[152.40185547 21.05748367]
[166.66004944 11.78557873]
[182.92202759 15.47045803]
[195.20932007 6.86681128]
[207.49659729 -1.73683536]
[219.78387451 -10.34048176]
[220.96644592 -25.93328667]
[231.93212891 -37.08173370]
[247.50325012 -38.52186966]
[260.32760620 -29.57370758]
[264.34994507 -14.46229267]
[257.67102051 -0.32277468]
[243.44442749 6.16859865]
[228.38752747 1.94679880]
[216.10023499 10.55044556]
[203.81295776 19.15409279]
[191.52568054 27.75773811]
[191.03540039 40.81504059]
[182.91513062 51.30164337]
[170.01966858 55.15729523]
[157.10408020 50.72156906]
[144.45321655 58.78106308]
[137.87638855 72.14499664]
[122.08019257 73.03424835]
[109.42932129 81.09374237]
[118.89603424 99.14641571]
[108.77225494 114.21447754]
[110.07958984 129.15739441]
[111.38692474 144.10032654]
[112.69425964 159.04324341]
[114.00160217 173.98616028]
[115.30893707 188.92907715]
[122.71273804 204.18096924]
[110.10647583 215.51756287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[8 32]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[33 62]
[34 61]
[36 59]
[37 58]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
