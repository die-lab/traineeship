%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 11:09:26 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCAUAGGCUAAACUUAAGGGUUGGUAGUUAAUAUAUAAUAAAGGUCUUGUAAACUUUAGUAGGUUUAU\
) } def
/len { sequence length } bind def

/coor [
[106.57687378 120.37342834]
[94.64643097 119.29700470]
[85.51501465 131.19729614]
[76.38359070 143.09759521]
[67.25216675 154.99790955]
[65.64926910 171.31852722]
[50.60404205 177.84333801]
[37.59372330 167.86016846]
[40.00221634 151.63885498]
[55.35186768 145.86648560]
[64.48329163 133.96618652]
[73.61470795 122.06587982]
[82.74613190 110.16558075]
[79.39212036 102.12622833]
[79.72438049 93.12751007]
[83.92652130 84.83234406]
[91.44522858 78.87491608]
[101.05258942 76.54067230]
[111.04403687 78.49585724]
[109.73670197 63.55293274]
[108.42936707 48.61001205]
[107.12203217 33.66709137]
[98.21141052 20.59378433]
[104.81001282 7.24059391]
[103.50267792 -7.70232677]
[92.77509308 -13.63920784]
[86.43917084 -23.99341011]
[86.04339600 -36.00392151]
[91.57069397 -46.53688812]
[101.47413635 -52.90330124]
[101.47413635 -67.90329742]
[101.47413635 -82.90329742]
[101.47413635 -97.90329742]
[91.19236755 -110.21852875]
[94.55124664 -125.90602112]
[108.97413635 -132.93168640]
[123.39702606 -125.90602112]
[126.75590515 -110.21852875]
[116.47413635 -97.90329742]
[116.47413635 -82.90329742]
[116.47413635 -67.90329742]
[116.47413635 -52.90330124]
[130.13555908 -41.07569885]
[131.14688110 -22.72277069]
[118.44559479 -9.00966263]
[119.75292969 5.93325758]
[128.57003784 17.93774796]
[122.06494904 32.35975647]
[123.37229156 47.30267715]
[124.67962646 62.24559784]
[125.98696136 77.18851471]
[133.20179749 90.33941650]
[145.10209656 99.47084045]
[157.00239563 108.60226440]
[168.90269470 117.73368073]
[180.80299377 126.86510468]
[192.70329285 135.99652100]
[204.60359192 145.12794495]
[216.50389099 154.25936890]
[232.82452393 155.86227417]
[239.34931946 170.90750122]
[229.36616516 183.91781616]
[213.14483643 181.50932312]
[207.37246704 166.15966797]
[195.47216797 157.02824402]
[183.57186890 147.89682007]
[171.67156982 138.76541138]
[159.77127075 129.63398743]
[147.87097168 120.50256348]
[135.97067261 111.37113953]
[124.07037354 102.23972321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[19 51]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[30 42]
[31 41]
[32 40]
[33 39]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
