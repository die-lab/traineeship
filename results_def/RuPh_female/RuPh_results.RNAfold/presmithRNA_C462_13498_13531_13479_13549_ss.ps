%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCGCGGUUAAACCAUUUAUCAUCAAGCCAAUGAACUUAAAUCGUAUAAAAGUGAUAGUGAAAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[141.38874817 251.79443359]
[147.20967102 237.79827881]
[157.46881104 226.63914490]
[150.54257202 213.33398438]
[143.61634827 200.02882385]
[136.69010925 186.72366333]
[129.76388550 173.41850281]
[115.52566528 169.19848633]
[108.31194305 155.80381775]
[112.83482361 140.89807129]
[105.90859985 127.59291077]
[98.98236847 114.28775024]
[87.29450226 106.61405945]
[87.71247101 92.63848114]
[80.78623962 79.33331299]
[67.55096436 70.66510010]
[68.53723145 55.80318451]
[61.61100006 42.49802399]
[54.68477249 29.19285965]
[47.75854111 15.88769817]
[40.83231354 2.58253551]
[25.61676216 0.17563643]
[14.86171436 -10.60315514]
[12.54330158 -25.47221565]
[19.34355354 -38.69698715]
[12.41732502 -52.00214767]
[5.49109602 -65.30731201]
[-9.65519333 -69.82012177]
[-17.10060692 -83.76075745]
[-12.42791271 -98.85848999]
[1.59066272 -106.15609741]
[16.63814735 -101.32404327]
[23.78713417 -87.22909546]
[18.79625893 -72.23354340]
[25.72248840 -58.92837906]
[32.64871597 -45.62321472]
[47.38227844 -43.60824203]
[58.23251343 -33.18056488]
[60.89314270 -18.18808556]
[54.13747406 -4.34369373]
[61.06370544 8.96146870]
[67.98993683 22.26663208]
[74.91616058 35.57179260]
[81.84239197 48.87695694]
[94.58226013 56.59349823]
[94.09140015 72.40708923]
[101.01763153 85.71224976]
[112.70549774 93.38594055]
[112.28752899 107.36151886]
[119.21376038 120.66668701]
[126.13999176 133.97184753]
[140.94427490 138.81649780]
[147.77893066 152.40849304]
[143.06904602 166.49226379]
[149.99528503 179.79743958]
[156.92150879 193.10260010]
[163.84773254 206.40776062]
[170.77397156 219.71292114]
[185.79937744 217.70974731]
[200.60311890 220.96939087]
[213.39753723 229.09826660]
[222.63766479 241.11474609]
[227.20771790 255.56777954]
[226.55581665 270.71212769]
[220.76069641 284.71899414]
[210.52215576 295.89700317]
[197.07652283 302.89636230]
[182.04743958 304.87182617]
[167.24974060 301.58489990]
[154.47032166 293.43246460]
[145.25234985 281.39898682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[10 51]
[11 50]
[12 49]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[25 36]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
