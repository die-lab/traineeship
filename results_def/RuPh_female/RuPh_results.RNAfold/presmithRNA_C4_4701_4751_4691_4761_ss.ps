%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAAAAUAUAAUUUGAUUAUUGUAUUGUGAAAAAUUUUAUAUGGUAUUUUCGAAGGGAGAUGAUGAGA\
) } def
/len { sequence length } bind def

/coor [
[132.24427795 135.21411133]
[119.79067993 143.45176697]
[105.40161133 147.43995667]
[90.48427582 146.78865051]
[76.49755859 141.56153870]
[64.80931091 132.26983643]
[56.56261444 119.82221222]
[52.56398010 105.43604279]
[37.57825470 104.78175354]
[22.59253311 104.12746429]
[7.60680914 103.47317505]
[-7.37891388 102.81887817]
[-22.36463737 102.16458893]
[-37.35036087 101.51029968]
[-52.33608246 100.85601044]
[-63.81743622 111.71667480]
[-79.61309052 111.19427490]
[-90.35176086 99.59873199]
[-89.66239166 83.80948639]
[-77.95396423 73.19401550]
[-62.17288589 74.05027771]
[-51.68179321 85.87028503]
[-36.69607162 86.52457428]
[-21.71034622 87.17886353]
[-6.72462320 87.83316040]
[8.26109982 88.48744965]
[23.24682426 89.14173889]
[38.23254776 89.79602814]
[53.21826935 90.45031738]
[58.45552826 76.46739960]
[67.75572205 64.78589630]
[80.20932007 56.54824066]
[94.59838867 52.56004715]
[109.51572418 53.21134949]
[123.50244141 58.43845749]
[135.19068909 67.73017120]
[143.43737793 80.17778778]
[147.43601990 94.56395721]
[162.42173767 95.21824646]
[177.40747070 95.87253571]
[192.39318848 96.52682495]
[207.37892151 97.18112183]
[222.36463928 97.83541107]
[226.76480103 95.26004028]
[231.29141235 94.53044891]
[235.27349854 95.41850281]
[238.20936584 97.47864532]
[239.82861328 100.13459015]
[254.47305298 103.38117981]
[269.11749268 106.62777710]
[283.76193237 109.87436676]
[298.40637207 113.12096405]
[313.05081177 116.36755371]
[327.69525146 119.61415100]
[343.16418457 114.16947937]
[355.43606567 125.04757690]
[351.88662720 141.05799866]
[336.16723633 145.73059082]
[324.44866943 134.25859070]
[309.80422974 131.01199341]
[295.15979004 127.76540375]
[280.51535034 124.51880646]
[265.87091064 121.27221680]
[251.22645569 118.02561951]
[236.58201599 114.77902985]
[221.71034241 112.82113647]
[206.72462463 112.16683960]
[191.73890686 111.51255035]
[176.75317383 110.85826111]
[161.76745605 110.20397186]
[146.78172302 109.54968262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
