%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUGCUUAAUGCUGUAUAUUAUUGGCAUUUUGUAGAUAUUAUUUGAAUUUUUUUAUAUUUUCUUGUAUA\
) } def
/len { sequence length } bind def

/coor [
[88.03842163 130.63107300]
[77.16005707 123.65753174]
[69.80838776 113.03105164]
[67.11857605 100.39246368]
[52.47413635 97.14586639]
[37.82969666 93.89926910]
[23.18525696 90.65267944]
[9.95801926 98.87934113]
[-4.84727669 95.37821198]
[-12.60862446 82.71736908]
[-27.25306511 79.47077179]
[-41.89750290 76.22417450]
[-56.54194641 72.97758484]
[-71.18638611 69.73098755]
[-85.83082581 66.48439789]
[-100.47526550 63.23780060]
[-112.00719452 73.62019348]
[-127.44282532 75.20794678]
[-140.84684753 67.39052582]
[-147.06512451 53.17389297]
[-143.70660400 38.02463531]
[-132.06272888 27.76794815]
[-116.61077881 26.34774017]
[-103.29235840 34.31010818]
[-97.22866821 48.59336090]
[-82.58422852 51.83995438]
[-67.93978882 55.08654785]
[-53.29534912 58.33314133]
[-38.65090942 61.57973862]
[-24.00646973 64.82633209]
[-9.36203003 68.07292175]
[3.02284527 59.87838745]
[17.92063904 62.96228027]
[26.43185234 76.00823975]
[41.07629013 79.25482941]
[55.72072983 82.50142670]
[70.36517334 85.74802399]
[81.33202362 72.92882538]
[97.21219635 67.23461914]
[113.82610321 70.16410065]
[126.80104828 80.94623566]
[132.72209167 96.74322510]
[147.59376526 98.70111847]
[162.46543884 100.65901184]
[174.92533875 91.31082916]
[189.97944641 93.50826263]
[198.81472778 105.44448853]
[213.68640137 107.40238190]
[228.55807495 109.36027527]
[241.01797485 100.01209259]
[256.07208252 102.20952606]
[264.90734863 114.14574432]
[277.29159546 104.32707214]
[292.98159790 106.22417450]
[302.66879272 118.71151733]
[300.60592651 134.38059998]
[288.01684570 143.93522644]
[272.37045288 141.70680237]
[262.94946289 129.01742554]
[251.32591248 138.26019287]
[236.21603394 136.48646545]
[226.60017395 124.23194885]
[211.72850037 122.27405548]
[196.85682678 120.31616211]
[185.23327637 129.55892944]
[170.12339783 127.78520203]
[160.50755310 115.53068542]
[145.63587952 113.57279205]
[130.76420593 111.61489868]
[123.91395569 122.57132721]
[113.37117767 130.04252625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[7 34]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 69]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
