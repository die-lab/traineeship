%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGCUUAAUGCUGUAUAUUAUUGGCAUUUUGUAGAUAUUAUUUGAAUUUUUUUAUAUUUUCUUGUAUAU\
) } def
/len { sequence length } bind def

/coor [
[37.79324341 110.94161987]
[33.60990906 109.30319977]
[31.08829880 106.42029572]
[16.21662521 104.46240234]
[1.34495282 102.50450897]
[-13.52672005 100.54661560]
[-25.98662376 109.89479828]
[-41.04072571 107.69736481]
[-49.87600327 95.76113892]
[-64.74767303 93.80324554]
[-79.61934662 91.84535217]
[-94.49102020 89.88746643]
[-109.36269379 87.92957306]
[-124.23436737 85.97167969]
[-139.10603333 84.01378632]
[-149.68920898 95.36174774]
[-164.92771912 98.28875732]
[-178.96205139 91.66931915]
[-186.39573669 78.04874420]
[-184.37034607 62.66442108]
[-173.66470337 51.43193436]
[-158.39533997 48.67040634]
[-144.43362427 55.44169617]
[-137.14814758 69.14211273]
[-122.27647400 71.10000610]
[-107.40480042 73.05789948]
[-92.53312683 75.01579285]
[-77.66145325 76.97368622]
[-62.78978348 78.93157196]
[-47.91810989 80.88946533]
[-36.29456329 71.64669800]
[-21.18468285 73.42043304]
[-11.56882763 85.67494202]
[3.30284572 87.63283539]
[18.17451859 89.59072876]
[33.04619217 91.54862213]
[48.01407623 92.52967072]
[63.01407623 92.52967072]
[78.01407623 92.52967072]
[93.01407623 92.52967072]
[100.69895172 89.29863739]
[108.66479492 92.87117004]
[123.65052032 93.52545929]
[135.24826050 83.12689209]
[150.43659973 84.00391388]
[160.27856445 95.12467194]
[175.26428223 95.77896118]
[190.25001526 96.43325806]
[201.84774780 86.03469086]
[217.03608704 86.91171265]
[226.87805176 98.03247070]
[238.35940552 87.17180634]
[254.15505981 87.69420624]
[264.89373779 99.28974152]
[264.20434570 115.07898712]
[252.49594116 125.69446564]
[236.71485901 124.83819580]
[226.22377014 113.01819611]
[215.45001221 123.23884583]
[200.24304199 122.78878021]
[189.59571838 111.41897583]
[174.61000061 110.76468658]
[159.62426758 110.11039734]
[148.85052490 120.33105469]
[133.64353943 119.88098907]
[122.99623108 108.51118469]
[108.01050568 107.85688782]
[93.01407623 107.52967072]
[78.01407623 107.52967072]
[63.01407623 107.52967072]
[48.01407623 107.52967072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 33]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[37 71]
[38 70]
[39 69]
[40 68]
[42 67]
[43 66]
[46 63]
[47 62]
[48 61]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
