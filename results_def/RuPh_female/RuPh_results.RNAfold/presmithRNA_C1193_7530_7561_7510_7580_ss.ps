%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUUCUUAUAGUGUAAAAAACACAUCAGUUUUUCACACUGAAAAUGGACUAGUCCUAAGGGCUUUAUUU\
) } def
/len { sequence length } bind def

/coor [
[156.35888672 166.96548462]
[145.75228882 156.35888672]
[135.14567566 145.75228882]
[124.53907776 135.14567566]
[113.93247986 124.53907776]
[103.32587433 113.93247986]
[89.87144470 110.12855530]
[86.06752014 96.67412567]
[75.46092224 86.06752014]
[57.68073273 81.87998199]
[53.48925400 64.97905731]
[42.43009186 54.84519958]
[31.37093353 44.71134567]
[20.31177330 34.57749557]
[9.25261307 24.44364166]
[-1.80654740 14.30978775]
[-17.20834541 10.69106293]
[-21.36463165 -3.61189342]
[-32.42378998 -13.74574661]
[-43.48295212 -23.87960052]
[-54.54211044 -34.01345444]
[-65.60127258 -44.14730453]
[-76.66043091 -54.28115845]
[-92.43675995 -53.34147644]
[-104.20114136 -63.89490891]
[-104.97396851 -79.68029022]
[-94.29674530 -91.33243561]
[-78.50407410 -91.93833160]
[-66.96546936 -81.13851166]
[-66.52658081 -65.34031677]
[-55.46741867 -55.20646667]
[-44.40825653 -45.07261276]
[-33.34909821 -34.93875885]
[-22.28993797 -24.80490685]
[-11.23077774 -14.67105389]
[3.37999582 -11.77716923]
[8.32730579 3.25062799]
[19.38646507 13.38448143]
[30.44562531 23.51833344]
[41.50478745 33.65218735]
[52.56394577 43.78604126]
[63.62310410 53.91989517]
[75.91448212 53.75836945]
[85.23150635 62.38504410]
[86.06752014 75.46092224]
[96.67412567 86.06752014]
[110.12855530 89.87144470]
[113.93247986 103.32587433]
[124.53907776 113.93247986]
[135.14567566 124.53907776]
[145.75228882 135.14567566]
[156.35888672 145.75228882]
[166.96548462 156.35888672]
[179.25276184 164.96252441]
[192.84738159 171.30180359]
[206.44200134 177.64108276]
[220.03662109 183.98034668]
[236.94703674 185.19441223]
[240.46170044 201.78005981]
[225.49717712 209.74871826]
[213.69734192 197.57496643]
[200.10272217 191.23570251]
[186.50811768 184.89642334]
[172.91349792 178.55714417]
[176.52293396 193.11640930]
[171.19454956 207.13812256]
[158.82699585 215.62597656]
[143.82716370 215.55552673]
[131.53988647 206.95187378]
[126.34344482 192.88073730]
[130.08947754 178.35603333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[8 46]
[9 45]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
