%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAGUGUUUUGUUAGCUUGAAUUUGGAAAACAAGAGAAGGAGGGACUUUCGUAAAUUGAAAAAAUAAUG\
) } def
/len { sequence length } bind def

/coor [
[166.25883484 178.25350952]
[156.12498474 167.19435120]
[145.75228882 156.35888672]
[135.14567566 145.75228882]
[124.53907776 135.14567566]
[113.93247986 124.53907776]
[103.32587433 113.93247986]
[89.87144470 110.12855530]
[86.06752014 96.67412567]
[75.46092224 86.06752014]
[64.85431671 75.46092224]
[54.24771500 64.85431671]
[39.01842499 60.56721878]
[35.48998260 46.09658432]
[24.88337898 35.48998260]
[9.30745888 35.32128525]
[-1.29804838 24.41358757]
[-1.04123378 9.56536770]
[-11.64783573 -1.04123378]
[-22.25443649 -11.64783573]
[-32.86103821 -22.25443649]
[-47.45442581 -17.64014816]
[-62.51854706 -20.34769630]
[-74.59178162 -29.75490952]
[-80.89978027 -43.70007706]
[-79.99301910 -58.97869873]
[-72.07986450 -72.07986450]
[-58.97869873 -79.99301910]
[-43.70007706 -80.89978027]
[-29.75490952 -74.59178162]
[-20.34769630 -62.51854706]
[-17.64014816 -47.45442581]
[-22.25443649 -32.86103821]
[-11.64783573 -22.25443649]
[-1.04123378 -11.64783573]
[9.56536770 -1.04123378]
[24.41358757 -1.29804838]
[35.32128525 9.30745888]
[35.48998260 24.88337898]
[46.09658432 35.48998260]
[60.56721878 39.01842499]
[64.85431671 54.24771500]
[75.46092224 64.85431671]
[86.06752014 75.46092224]
[96.67412567 86.06752014]
[110.12855530 89.87144470]
[113.93247986 103.32587433]
[124.53907776 113.93247986]
[135.14567566 124.53907776]
[145.75228882 135.14567566]
[156.35888672 145.75228882]
[164.91828918 149.77470398]
[167.18414307 157.06048584]
[177.31799316 168.11964417]
[191.07627869 161.82958984]
[206.10514832 160.10093689]
[220.93223572 163.10305786]
[234.10491943 170.54183960]
[244.33270264 181.68849182]
[250.61354065 195.45098877]
[252.33210754 210.48100281]
[249.32005310 225.30607605]
[241.87245178 238.47378540]
[230.71894836 248.69409180]
[216.95225525 254.96569824]
[201.92108154 256.67419434]
[187.09803772 253.65222168]
[173.93531799 246.19580078]
[163.72248840 235.03544617]
[157.46009827 221.26455688]
[155.76167297 206.23223877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[9 45]
[10 44]
[11 43]
[12 42]
[14 40]
[15 39]
[18 36]
[19 35]
[20 34]
[21 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
