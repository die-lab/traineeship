%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUCUUUAUUUUUUAUUCCCAUUGUACGAAAGGAUCCGGGUAUAGAGUUUUACUUUUAAUUGUUUAUU\
) } def
/len { sequence length } bind def

/coor [
[161.55679321 156.68772888]
[149.65649414 147.55630493]
[137.75619507 138.42489624]
[125.85589600 129.29347229]
[113.95559692 120.16204834]
[102.05529785 111.03062439]
[89.95862579 102.16098022]
[77.67134857 93.55733490]
[65.38406372 84.95368958]
[47.14683914 83.91726685]
[40.08422089 68.00093842]
[27.43334961 59.94144821]
[14.78247833 51.88195419]
[2.13160658 43.82246017]
[-10.51926517 35.76296616]
[-23.17013741 27.70347023]
[-35.82100677 19.64397621]
[-48.25278091 28.39151573]
[-63.08687210 31.71087837]
[-78.06119537 29.09588242]
[-90.89226532 20.94529724]
[-99.62344360 8.50202847]
[-102.92328644 -6.33641720]
[-100.28859711 -21.30728340]
[-92.12113953 -34.12762070]
[-79.66639709 -42.84242630]
[-64.82362366 -46.12274933]
[-49.85623550 -43.46836472]
[-37.04664993 -35.28404999]
[-28.34823990 -22.81785393]
[-25.08744431 -7.97077847]
[-27.76151466 6.99310446]
[-15.11064243 15.05259895]
[-2.45977116 23.11209297]
[10.19110107 31.17158699]
[22.84197235 39.23108292]
[35.49284363 47.29057693]
[48.14371490 55.35007095]
[60.22031021 53.05662537]
[70.89379120 59.93435669]
[73.98770905 72.66640472]
[86.27499390 81.27005768]
[98.56227112 89.87370300]
[106.71059418 91.63485718]
[111.18671417 99.13032532]
[123.08701324 108.26174927]
[134.98731995 117.39316559]
[146.88761902 126.52458954]
[158.78791809 135.65600586]
[170.68821716 144.78742981]
[186.46516418 137.69216919]
[203.59570312 139.36633301]
[217.55880737 149.28138733]
[224.71249390 164.74537659]
[223.24360657 181.63327026]
[235.89448547 189.69276428]
[250.28193665 183.88064575]
[265.32974243 187.66795349]
[275.25167847 199.59837341]
[276.23257446 215.08441162]
[267.89523315 228.17137146]
[253.44558716 233.82707214]
[238.43975830 229.87675476]
[228.64782715 217.83940125]
[227.83499146 202.34362793]
[215.18411255 194.28413391]
[204.36412048 201.44129944]
[191.57312012 203.87484741]
[178.78790283 201.17134094]
[167.99876404 193.71417236]
[160.89976501 182.62963867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 43]
[8 42]
[9 41]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
