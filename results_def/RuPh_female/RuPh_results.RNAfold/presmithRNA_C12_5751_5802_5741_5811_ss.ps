%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUUUUAAGAGAUCUUAUUGAGGGAAGAGUUUGCGACCUCGAUGUUGGAUUAGAAAAACUUUUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[102.73498535 119.71483612]
[95.23677063 119.87844849]
[86.63312531 132.16572571]
[78.02947998 144.45300293]
[69.42583466 156.74029541]
[65.29374695 173.18298340]
[48.34976578 173.76417542]
[43.10072708 157.64326477]
[57.13854980 148.13664246]
[65.74219513 135.84936523]
[74.34584045 123.56208038]
[82.94949341 111.27480316]
[85.55421448 96.50268555]
[81.67192841 82.01379395]
[77.78964233 67.52490997]
[73.90735626 53.03602219]
[70.02507019 38.54713440]
[65.51448059 24.24138069]
[60.38418198 10.14599133]
[55.25387955 -3.94939804]
[50.12357712 -18.04478645]
[44.99327469 -32.14017487]
[39.86297226 -46.23556519]
[34.73266983 -60.33095551]
[29.60236740 -74.42634583]
[16.65545273 -78.76975250]
[8.77196693 -89.67890930]
[8.71356010 -102.94179535]
[16.27337837 -113.59931183]
[2.14083576 -120.67369080]
[-2.77069902 -135.69541931]
[4.45270014 -149.75238037]
[19.52551842 -154.50482178]
[33.50532150 -147.13320923]
[38.09813690 -132.01098633]
[30.57913208 -118.10990143]
[45.72384262 -111.13364410]
[51.39124680 -95.09790802]
[43.69775772 -79.55664825]
[48.82806015 -65.46125793]
[53.95836258 -51.36586761]
[59.08866501 -37.27047729]
[64.21896362 -23.17508888]
[69.34926605 -9.07970047]
[74.47956848 5.01568890]
[79.60987091 19.11107826]
[83.76839447 22.00680733]
[85.96063995 27.68461990]
[84.51395416 34.66484833]
[88.39624023 49.15373611]
[92.27852631 63.64262390]
[96.16081238 78.13150787]
[100.04309845 92.62039948]
[103.12281799 88.59767914]
[108.20552063 85.95684052]
[114.71352386 85.42946625]
[121.83743286 87.52468109]
[128.61610413 92.46237183]
[134.03440857 100.13359070]
[137.12992859 110.09258270]
[146.26135254 121.99288177]
[155.39277649 133.89317322]
[170.74243164 139.66554260]
[173.15092468 155.88687134]
[160.14059448 165.87004089]
[145.09536743 159.34523010]
[143.49247742 143.02459717]
[134.36105347 131.12429810]
[125.22962952 119.22399902]
[117.73141479 119.38761139]
[118.05838776 134.38404846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[29 36]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
