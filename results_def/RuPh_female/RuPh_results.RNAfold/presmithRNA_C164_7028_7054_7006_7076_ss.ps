%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAUGUGUUUGUGUACUAUACUCUCAUGGGAUUUGCUCCCCUAUUUUAUUUUCUUUAGCUGCUAACUC\
) } def
/len { sequence length } bind def

/coor [
[93.40125275 194.30172729]
[103.21992493 181.91749573]
[101.26203156 167.04582214]
[99.30413818 152.17414856]
[97.34624481 137.30247498]
[95.38835144 122.43079376]
[73.99898529 106.27764130]
[80.84280396 76.14347076]
[65.89987946 74.83613586]
[50.95696259 73.52880096]
[40.75169373 85.06824493]
[25.88226891 88.34751892]
[12.09614849 82.31370544]
[4.59626341 69.47276306]
[-10.34665680 68.16542816]
[-25.28957748 66.85809326]
[-40.23249817 65.55075836]
[-56.53833008 70.19361877]
[-65.51364899 55.81029510]
[-54.17704773 43.20403671]
[-38.92516327 50.60783768]
[-23.98224068 51.91517258]
[-9.03932095 53.22251129]
[5.90359926 54.52984619]
[15.51935005 43.18633270]
[30.14378929 39.63812256]
[44.21787262 45.44962692]
[52.26429749 58.58588028]
[67.20721436 59.89321899]
[82.15013885 61.20055389]
[93.64080811 51.55873871]
[94.94814301 36.61581802]
[96.25547791 21.67289925]
[97.56281281 6.72997856]
[88.39350891 -6.43449926]
[93.10686493 -21.76955223]
[108.08719635 -27.51143837]
[121.84287262 -19.25547600]
[123.82171631 -3.33493257]
[112.50572968 8.03731441]
[111.19839478 22.98023415]
[109.89105988 37.92315674]
[108.58372498 52.86607742]
[119.41918182 63.23877335]
[134.29086304 61.28087997]
[149.16253662 59.32298660]
[153.88438416 44.80862045]
[164.44238281 33.78630066]
[178.74021912 28.44451904]
[193.93904114 29.84388924]
[207.02113342 37.70656586]
[215.38902283 50.47140884]
[217.38125610 65.60395050]
[212.60229492 80.09960938]
[202.00097656 91.08026123]
[187.68220520 96.36569977]
[172.48899841 94.90648651]
[159.43797302 86.99235535]
[151.12042236 74.19465637]
[136.24874878 76.15254974]
[121.37707520 78.11044312]
[126.42953491 104.11597443]
[110.26002502 120.47290802]
[112.21791840 135.34457397]
[114.17581177 150.21624756]
[116.13370514 165.08792114]
[118.09159851 179.95959473]
[130.78097534 189.38058472]
[133.00939941 205.02697754]
[123.45478058 217.61605835]
[107.78569794 219.67892456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[8 30]
[9 29]
[10 28]
[14 24]
[15 23]
[16 22]
[17 21]
[31 43]
[32 42]
[33 41]
[34 40]
[44 61]
[45 60]
[46 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
