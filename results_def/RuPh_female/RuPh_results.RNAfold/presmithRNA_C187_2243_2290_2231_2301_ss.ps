%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAAUAAUGUCUCGUUUAAUAUCUUCUUAUCCUGGAAGGUUUAGUAGGGCUUAUUAUUAUUUUUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[124.57100677 313.72756958]
[122.60782623 298.69686890]
[125.90687561 283.90185547]
[134.06977844 271.12911987]
[146.11080933 261.92102051]
[141.60021973 247.61524963]
[137.08963013 233.30949402]
[132.57904053 219.00373840]
[128.06846619 204.69798279]
[123.55786896 190.39224243]
[119.04728699 176.08648682]
[105.50123596 165.14506531]
[109.22026825 147.26101685]
[104.08996582 133.16563416]
[98.95966339 119.07023621]
[85.87239838 112.85173798]
[80.91669464 99.23604584]
[86.94494629 86.06006622]
[81.81464386 71.96467590]
[76.68434143 57.86928558]
[71.55403900 43.77389526]
[65.49652863 36.51099014]
[66.52207947 28.95022964]
[62.01149368 14.64447498]
[57.50090790 0.33872092]
[52.99032211 -13.96703339]
[48.47973251 -28.27278709]
[43.96914673 -42.57854080]
[39.45856094 -56.88429642]
[25.32601738 -63.95867157]
[20.41448402 -78.98040009]
[27.63788223 -93.03736115]
[42.71070099 -97.78980255]
[56.69050217 -90.41819000]
[61.28331757 -75.29596710]
[53.76431274 -61.39488220]
[58.27490234 -47.08913040]
[62.78548813 -32.78337479]
[67.29607391 -18.47762108]
[71.80666351 -4.17186594]
[76.31724548 10.13388824]
[80.82783508 24.43964195]
[85.64942932 38.64359283]
[90.77973175 52.73898315]
[95.91003418 66.83437347]
[101.04033661 80.92976379]
[114.12760162 87.14826202]
[119.08330536 100.76395416]
[113.05505371 113.93993378]
[118.18535614 128.03532410]
[123.31565857 142.13070679]
[134.81311035 148.41450500]
[138.69398499 160.50439453]
[133.35304260 171.57589722]
[137.86363220 185.88165283]
[142.37420654 200.18740845]
[146.88479614 214.49316406]
[151.39538574 228.79890442]
[155.90597534 243.10466003]
[160.41656494 257.41043091]
[175.56155396 258.04681396]
[189.57435608 263.82757568]
[200.76283264 274.05468750]
[207.77595520 287.49313354]
[209.76681519 302.52017212]
[206.49504089 317.32125854]
[198.35569763 330.10900879]
[186.33164978 339.33929443]
[171.87487793 343.89749146]
[156.73107910 343.23321533]
[142.72895813 337.42660522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[13 51]
[14 50]
[15 49]
[18 46]
[19 45]
[20 44]
[21 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
