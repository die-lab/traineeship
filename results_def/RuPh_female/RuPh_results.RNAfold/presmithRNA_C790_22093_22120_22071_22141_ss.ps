%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:17:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUAACACUAGUAUUAUUUUUAAGUAUAUUUGUUGUGUAGAUCAAUUAUAUUUUGUUGCUUAAAAUUA\
) } def
/len { sequence length } bind def

/coor [
[2.20263290 257.30679321]
[0.50420028 272.33911133]
[-5.75819159 286.11001587]
[-15.97101784 297.27035522]
[-29.13372993 304.72677612]
[-43.95677567 307.74874878]
[-58.98795319 306.04025269]
[-72.75465393 299.76864624]
[-83.90814972 289.54833984]
[-91.35575104 276.38064575]
[-94.36780548 261.55557251]
[-92.64923096 246.52554321]
[-86.36839294 232.76304626]
[-76.14061737 221.61639404]
[-62.96792603 214.17761230]
[-48.14084244 211.17549133]
[-33.11196899 212.90414429]
[-19.35368729 219.19419861]
[-9.21983528 208.13504028]
[-6.32595110 193.52427673]
[8.70184612 188.57696533]
[18.83569908 177.51780701]
[28.96955299 166.45864868]
[39.10340500 155.39947510]
[49.23725891 144.34031677]
[59.37111282 133.28115845]
[69.50496674 122.22200012]
[79.63881683 111.16284180]
[89.77267456 100.10368347]
[92.58233643 92.25494385]
[100.59792328 88.79547119]
[111.20452881 78.18887329]
[107.57500458 65.85517883]
[109.65026093 53.24148941]
[116.95553589 42.84081650]
[127.98885345 36.68070221]
[140.52940369 35.92805862]
[152.08448792 40.66865158]
[163.57516479 31.02683830]
[175.06582642 21.38502502]
[186.55648804 11.74321079]
[198.04714966 2.10139656]
[209.53782654 -7.54041767]
[212.36283875 -23.33278465]
[226.53919983 -30.84345818]
[241.19203186 -24.31089211]
[245.08091736 -8.74631310]
[235.22264099 3.91046691]
[219.17964172 3.95024920]
[207.68896484 13.59206295]
[196.19830322 23.23387718]
[184.70764160 32.87569046]
[173.21696472 42.51750565]
[161.72630310 52.15932083]
[163.89526367 69.42796326]
[155.39587402 84.79109192]
[139.33618164 92.25788116]
[121.81112671 88.79547119]
[111.20452881 99.40207672]
[100.83183289 110.23753357]
[90.69797516 121.29669189]
[80.56412506 132.35585022]
[70.43027496 143.41500854]
[60.29641724 154.47416687]
[50.16256714 165.53334045]
[40.02871323 176.59249878]
[29.89485931 187.65165710]
[19.76100731 198.71081543]
[16.14228058 214.11260986]
[1.83932495 218.26889038]
[-8.29452801 229.32806396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 71]
[19 70]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[31 59]
[32 58]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
