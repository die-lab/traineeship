%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUAUUUAUUGGAAAAUGGUUACUUUGAACUUAACUUUAGGGUGUUCGAAUCACUCGAAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[115.15523529 266.12014771]
[113.75061035 251.18606567]
[112.34599304 236.25198364]
[110.94136810 221.31788635]
[109.53674316 206.38380432]
[93.86073303 200.01460266]
[83.35192108 186.64274597]
[80.84333038 169.73413086]
[87.08003998 153.72584534]
[100.50080109 142.86180115]
[97.70389557 128.12486267]
[94.90699768 113.38793182]
[85.92726135 102.67084503]
[90.35606384 89.40896606]
[87.55916595 74.67202759]
[84.76226044 59.93509293]
[73.75152588 70.12153625]
[58.75232315 69.96710968]
[47.95365906 59.55611038]
[47.25120926 44.57256699]
[57.02848053 33.19693756]
[71.94744873 31.63989449]
[83.86203003 40.75005722]
[85.26664734 25.81596756]
[86.67127228 10.88187695]
[88.07589722 -4.05221272]
[89.48051453 -18.98630142]
[90.88513947 -33.92039108]
[92.28976440 -48.85448074]
[93.69438171 -63.78857040]
[95.09900665 -78.72266388]
[84.82749176 -90.73397064]
[86.14099121 -106.48358154]
[98.26022339 -116.62753296]
[113.99506378 -115.14759064]
[124.01031494 -102.92179108]
[122.36410522 -87.20346832]
[110.03309631 -77.31803894]
[108.62847137 -62.38394928]
[107.22385406 -47.44985962]
[105.81922913 -32.51576996]
[104.41460419 -17.58168030]
[103.00998688 -2.64759040]
[101.60536194 12.28649902]
[100.20073700 27.22058868]
[98.79611969 42.15467834]
[99.49919891 57.13819122]
[102.29610443 71.87512970]
[105.09300232 86.61206818]
[114.07273865 97.32915497]
[109.64393616 110.59103394]
[112.44083405 125.32797241]
[115.23773956 140.06491089]
[128.13993835 143.27868652]
[138.75508118 151.20652771]
[145.45112610 162.58352661]
[147.21636963 175.61820984]
[143.81224060 188.27447510]
[135.80477905 198.58973694]
[124.47083282 204.97917175]
[125.87545776 219.91326904]
[127.28008270 234.84735107]
[128.68470764 249.78144836]
[130.08932495 264.71554565]
[137.59230042 279.91888428]
[125.06013489 291.33734131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[10 53]
[11 52]
[12 51]
[14 49]
[15 48]
[16 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
