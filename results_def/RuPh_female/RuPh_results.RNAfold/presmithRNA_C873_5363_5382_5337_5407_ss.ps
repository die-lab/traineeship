%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUGGCUUUUUGAGUAUUUAAAUAAUAAAAAGUCUGGCCUGCCCAGUGAGUAUAUUAAAUGGCUGCAAC\
) } def
/len { sequence length } bind def

/coor [
[79.72191620 131.18649292]
[80.23261261 116.19519043]
[90.91623688 105.66827393]
[76.27179718 102.42167664]
[66.89161682 103.62818146]
[61.06597137 98.70083618]
[46.57708359 94.81855011]
[32.08819580 90.93626404]
[17.59930992 87.05397797]
[3.11042213 83.17169952]
[-11.37846565 79.28941345]
[-25.86735344 75.40712738]
[-40.35623932 71.52484131]
[-54.84512711 67.64255524]
[-72.33699036 72.90613556]
[-84.41738129 60.36523819]
[-99.06182098 57.11864471]
[-112.25468445 65.82059479]
[-127.71965027 62.56324387]
[-136.28163147 49.27911758]
[-132.86096191 33.84945297]
[-119.48705292 25.42839813]
[-104.09442139 29.01201248]
[-95.81523132 42.47420502]
[-81.17079163 45.72079849]
[-70.60691071 39.43522644]
[-58.22479248 42.24763489]
[-50.96284103 53.15366745]
[-36.47395325 57.03594971]
[-21.98506737 60.91823578]
[-7.49617958 64.80052185]
[6.99270773 68.68280792]
[21.48159599 72.56509399]
[35.97048187 76.44738007]
[50.45936966 80.32966614]
[64.94825745 84.21195221]
[79.51838684 87.77723694]
[94.16282654 91.02383423]
[109.10575104 92.33116913]
[124.09146881 91.67687988]
[133.54177856 82.60113525]
[146.23910522 82.53537750]
[155.19213867 90.95839691]
[170.19213867 90.95839691]
[185.19213867 90.95839691]
[194.35284424 78.57341766]
[208.87988281 74.01066589]
[223.13941956 78.81997681]
[231.72991943 90.95839691]
[246.72991943 90.95839691]
[261.72991943 90.95839691]
[274.04516602 80.67662811]
[289.73263550 84.03550720]
[296.75830078 98.45839691]
[289.73263550 112.88128662]
[274.04516602 116.24016571]
[261.72991943 105.95839691]
[246.72991943 105.95839691]
[231.72991943 105.95839691]
[223.13941956 118.09681702]
[208.87988281 122.90612030]
[194.35284424 118.34337616]
[185.19213867 105.95839691]
[170.19213867 105.95839691]
[155.19213867 105.95839691]
[140.68374634 115.58734894]
[124.74576569 106.66260529]
[109.76004028 107.31689453]
[118.45375061 119.54061890]
[116.35231018 134.39268494]
[104.60865784 143.72470093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[16 25]
[17 24]
[39 68]
[40 67]
[43 65]
[44 64]
[45 63]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
