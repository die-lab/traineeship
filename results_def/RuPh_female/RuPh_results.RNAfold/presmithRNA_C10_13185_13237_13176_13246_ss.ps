%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAAUUUCUUUGUAUUUGCCCAUGUUACUGCGUUGGUGUUUCCUUUGAAUGUACAUGGUAUUAUAAUGA\
) } def
/len { sequence length } bind def

/coor [
[51.98981857 302.27044678]
[44.75432587 315.89581299]
[31.28983307 323.42648315]
[15.89280987 322.45944214]
[3.47639012 313.30322266]
[-1.99739075 298.87960815]
[1.21813059 283.79104614]
[12.09689331 272.85232544]
[27.16752243 269.55389404]
[32.29782486 255.45849609]
[29.38012505 240.85244751]
[41.37074661 230.53085327]
[46.50104904 216.43545532]
[51.63134766 202.34007263]
[56.76165009 188.24467468]
[61.89195251 174.14929199]
[57.03901672 162.85534668]
[61.44355774 150.94625854]
[73.20416260 145.16995239]
[78.94441223 131.31176758]
[84.68466187 117.45357513]
[90.42491913 103.59538269]
[90.38070679 95.25901794]
[96.72969055 89.26668549]
[103.06896973 75.67206573]
[109.40824127 62.07745361]
[115.74751282 48.48283386]
[106.17132568 36.64822769]
[102.69725800 21.88957405]
[105.96224213 7.14643812]
[115.26638031 -4.66854763]
[128.72218323 -11.24508381]
[143.63723755 -11.32687092]
[149.97651672 -24.92148781]
[144.80775452 -39.61576080]
[151.43034363 -53.31233215]
[165.47094727 -58.14939499]
[171.81021118 -71.74401093]
[167.69641113 -87.25066376]
[177.37040710 -100.04883575]
[193.41114807 -100.32086945]
[203.51354980 -87.85808563]
[199.92791748 -72.22085571]
[185.40483093 -65.40473938]
[179.06555176 -51.81011963]
[184.38526917 -37.94519424]
[178.15000916 -24.06801414]
[163.57112122 -18.58221436]
[157.23185730 -4.98759699]
[166.75640869 6.49056768]
[170.36772156 21.02562523]
[167.29750061 35.74753952]
[158.10229492 47.72536850]
[144.56343079 54.55075836]
[129.34213257 54.82210922]
[123.00285339 68.41672516]
[116.66358185 82.01134491]
[110.32431030 95.60595703]
[104.28311157 109.33563232]
[98.54285431 123.19382477]
[92.80260468 137.05201721]
[87.06235504 150.91021729]
[89.99775696 168.93946838]
[75.98734283 179.27958679]
[70.85704041 193.37498474]
[65.72673798 207.47036743]
[60.59643555 221.56576538]
[55.46613312 235.66114807]
[58.01688004 251.27537537]
[46.39321518 260.58880615]
[41.26291275 274.68417358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 71]
[10 70]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[19 62]
[20 61]
[21 60]
[22 59]
[24 58]
[25 57]
[26 56]
[27 55]
[33 49]
[34 48]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
