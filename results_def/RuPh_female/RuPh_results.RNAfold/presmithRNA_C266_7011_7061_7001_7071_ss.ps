%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAAUAGCAUGUGUUUGUGUACUAUACUCUCAUGGGAUUUGCUCCCCUAUUUUAUUUUCUUUAGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[140.55557251 212.01760864]
[145.91543579 197.88385010]
[155.20448303 185.95887756]
[146.60083008 173.67158508]
[137.99719238 161.38430786]
[129.39353943 149.09703064]
[120.78989410 136.80975342]
[112.18624878 124.52246857]
[103.58260345 112.23518372]
[97.05630493 114.22600555]
[89.58383942 112.54527283]
[83.26657104 106.85814667]
[80.23632812 98.01848602]
[67.24594879 90.51848602]
[54.25556564 83.01848602]
[40.12967300 89.16383362]
[25.26751709 85.85177612]
[15.32304573 74.55702209]
[13.95265770 59.74959183]
[0.96227646 52.24959183]
[-12.02810478 44.74959183]
[-25.01848602 37.24959183]
[-41.75874710 34.56630707]
[-43.81449127 17.73745537]
[-28.21240616 11.10335922]
[-17.51848602 24.25920868]
[-4.52810478 31.75920868]
[8.46227646 39.25920868]
[21.45265770 46.75920868]
[34.96146393 40.54228592]
[49.71524429 43.50706863]
[60.01464844 54.72204590]
[61.75556564 70.02810669]
[74.74594879 77.52810669]
[87.73632812 85.02810669]
[102.22521210 81.14582062]
[109.72521210 68.15543365]
[117.22521210 55.16505432]
[124.72521210 42.17467499]
[121.97855377 26.36849213]
[132.73117065 14.46216393]
[148.73458862 15.58920765]
[157.71235657 28.88505173]
[152.77748108 44.15026093]
[137.71559143 49.67467499]
[130.21559143 62.66505432]
[122.71559143 75.65543365]
[115.21559143 88.64582062]
[115.86988831 103.63153839]
[124.47353363 115.91882324]
[133.07717896 128.20610046]
[141.68083191 140.49337769]
[150.28446960 152.78067017]
[158.88812256 165.06794739]
[167.49176025 177.35522461]
[181.87461853 172.70495605]
[196.98919678 172.50236511]
[211.49151611 176.76547241]
[224.09204102 185.11520386]
[233.67034912 196.80911255]
[239.37474060 210.80737305]
[240.69798279 225.86528015]
[237.52243042 240.64387512]
[230.13041687 253.82908630]
[219.17926025 264.24847412]
[205.64273071 270.97555542]
[190.72447205 273.41217041]
[175.75102234 271.34164429]
[162.05378723 264.94808960]
[150.85073853 254.80001831]
[143.13804626 241.79980469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[13 35]
[14 34]
[15 33]
[19 29]
[20 28]
[21 27]
[22 26]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
