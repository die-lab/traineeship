%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUACAUGGAAGGUAUUUUAGUAGAGCUUUAAAACAUGCUUAUAAGACUAUGGAAGCCGGGAGUGGUUAU\
) } def
/len { sequence length } bind def

/coor [
[133.42686462 204.06936646]
[127.50794220 197.11705017]
[124.05870819 188.62561035]
[123.44828796 179.44601440]
[125.76013184 170.50559998]
[130.78138733 162.71437073]
[122.72188568 150.06350708]
[114.66239166 137.41262817]
[106.60289764 124.76176453]
[98.54340363 112.11088562]
[92.30419922 125.75172424]
[78.39121246 131.35786438]
[64.43762207 125.85356903]
[58.09888077 112.25870514]
[62.85265732 98.03191376]
[76.09085846 90.97853851]
[90.54924774 94.96736145]
[86.03865814 80.66161346]
[81.52807617 66.35585785]
[77.01748657 52.05010223]
[72.50689697 37.74434662]
[62.23907471 33.09473419]
[56.49838638 23.65533447]
[57.06982803 12.84598446]
[63.50273132 4.42000675]
[60.25613785 -10.22443295]
[57.00954437 -24.86887360]
[53.76295090 -39.51331329]
[39.09098816 -44.05523300]
[28.66743469 -55.33553314]
[25.29617691 -70.31986237]
[29.88406372 -84.97751617]
[41.19697952 -95.36566162]
[56.19180679 -98.68993378]
[70.83500671 -94.05612183]
[81.18763733 -82.71070099]
[84.46489716 -67.70552826]
[79.78520966 -53.07692719]
[68.40738678 -42.75990677]
[71.65398407 -28.11546707]
[74.90058136 -13.47102737]
[78.14717102 1.17341268]
[92.30315399 14.06147480]
[86.81265259 33.23376083]
[91.32324219 47.53951645]
[95.83383179 61.84526825]
[100.34441376 76.15102386]
[104.85500336 90.45677948]
[111.19427490 104.05139160]
[119.25376892 116.70226288]
[127.31326294 129.35313416]
[135.37275696 142.00401306]
[143.43225098 154.65487671]
[165.50251770 156.82466125]
[179.44290161 173.75010681]
[177.39027405 195.33058167]
[188.44943237 205.46443176]
[199.50859070 215.59828186]
[210.56774902 225.73213196]
[221.62690735 235.86599731]
[237.74572754 238.88522339]
[242.93443298 254.44187927]
[231.85533142 266.53259277]
[215.90565491 262.71948242]
[211.49305725 246.92515564]
[200.43389893 236.79130554]
[189.37474060 226.65744019]
[178.31558228 216.52359009]
[167.25642395 206.38973999]
[159.01763916 209.99267578]
[150.02972412 210.82928467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[25 42]
[26 41]
[27 40]
[28 39]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
