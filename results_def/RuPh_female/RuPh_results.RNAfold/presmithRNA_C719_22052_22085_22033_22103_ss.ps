%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGGGUUAUCUUGAUGAGGUAAAAUAUGGGAGCUACUCCUUAACACUAGUAUUAUUUUUAAGUAUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.74666595 140.39541626]
[76.47849274 135.80062866]
[68.58205414 129.11802673]
[62.51786041 120.73730469]
[58.63955688 111.14721680]
[43.69663620 112.45455170]
[33.55540085 124.27796936]
[18.38253021 125.39092255]
[7.17321205 115.64994049]
[-7.76970863 116.95727539]
[-22.71262932 118.26461029]
[-37.65554810 119.57194519]
[-52.59846878 120.87928772]
[-67.54138947 122.18662262]
[-82.48431396 123.49395752]
[-97.73619843 130.89776611]
[-109.07279968 118.29149628]
[-100.09748077 103.90818024]
[-83.79164886 108.55103302]
[-68.84872437 107.24369812]
[-53.90580750 105.93636322]
[-38.96288681 104.62902832]
[-24.01996422 103.32169342]
[-9.07704449 102.01435852]
[5.86587572 100.70702362]
[15.21339607 89.16754913]
[30.34901810 87.62885284]
[42.38930130 97.51163483]
[57.33222198 96.20429993]
[69.71017456 69.71017456]
[96.20429993 57.33222198]
[97.51163483 42.38930130]
[98.81896973 27.44638062]
[100.12630463 12.50346088]
[101.43363953 -2.43945956]
[96.79077911 -18.74529266]
[111.17410278 -27.72061157]
[123.78036499 -16.38401031]
[116.37656403 -1.13212347]
[115.06922913 13.81079674]
[113.76189423 28.75371742]
[112.45455170 43.69663620]
[111.14721680 58.63955688]
[118.52282715 61.37550735]
[125.27374268 65.41410065]
[131.17227173 70.61912537]
[136.01950073 76.81504822]
[139.65194702 83.79289246]
[141.94708252 91.31734467]
[142.82752991 99.13462067]
[142.26359558 106.98108673]
[140.27427673 114.59210968]
[153.26464844 122.09210968]
[166.25503540 129.59210205]
[179.24542236 137.09210205]
[192.23579407 144.59210205]
[206.86744690 139.07408142]
[221.60566711 144.30081177]
[229.49153137 157.80442810]
[226.80154419 173.20890808]
[214.80586243 183.24073792]
[199.16847229 183.16319275]
[187.27287292 173.01289368]
[184.73579407 157.58248901]
[171.74542236 150.08248901]
[158.75503540 142.58248901]
[145.76464844 135.08248901]
[132.77427673 127.58248901]
[125.20639038 134.63502502]
[116.16851807 139.66769409]
[106.18772125 142.38700867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
