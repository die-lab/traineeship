%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUAGAAAAUAUAAUUUGAUUAUUGUAUUGUGAAAAAUUUUAUAUGGUAUUUUCGAAGGGAGAUGAUGAG\
) } def
/len { sequence length } bind def

/coor [
[82.39160156 192.76715088]
[68.06219482 188.33229065]
[56.18347168 179.17280579]
[48.25099182 166.44190979]
[45.26345825 151.74243164]
[47.59701157 136.92506409]
[54.95785522 123.85532379]
[66.41924286 114.17871857]
[80.53731537 109.11369324]
[65.66564178 107.15579987]
[50.79397202 105.19790649]
[35.92229843 103.24001312]
[21.05062485 101.28212738]
[6.17895174 99.32423401]
[-8.69272137 97.36634064]
[-23.56439400 95.40844727]
[-35.94862747 105.22711945]
[-51.63864136 103.33002472]
[-61.32583237 90.84267426]
[-59.26295853 75.17359161]
[-46.67388916 65.61896515]
[-31.02749252 67.84738922]
[-21.60650063 80.53677368]
[-6.73482847 82.49466705]
[8.13684464 84.45256042]
[23.00851822 86.41045380]
[37.88019180 88.36834717]
[52.75186157 90.32623291]
[67.62353516 92.28412628]
[82.49520874 94.24201965]
[94.39550781 85.11060333]
[96.35340118 70.23892975]
[98.31129456 55.36725616]
[100.26918793 40.49558258]
[102.22708130 25.62390900]
[95.45491791 10.68838596]
[105.22206116 -2.48487973]
[121.48091125 -0.34436136]
[127.50576019 14.90795898]
[117.09875488 27.58180237]
[115.14086151 42.45347595]
[113.18296814 57.32514954]
[111.22507477 72.19682312]
[109.26718140 87.06849670]
[118.56024933 75.29399109]
[133.54115295 76.05056000]
[141.60067749 88.70140839]
[135.95523071 102.59849548]
[121.35642242 106.04479980]
[135.66217041 110.55538940]
[149.96792603 115.06597900]
[164.27368164 119.57656097]
[178.57943726 124.08715057]
[192.88519287 128.59773254]
[207.19094849 133.10832214]
[223.07554626 129.03257751]
[234.35263062 140.93884277]
[229.42131042 156.57899475]
[213.35450745 159.86376953]
[202.68035889 147.41407776]
[188.37460327 142.90348816]
[174.06884766 138.39289856]
[159.76309204 133.88230896]
[145.45735168 129.37173462]
[131.15159607 124.86114502]
[116.84583282 120.35055542]
[125.63518524 132.50569153]
[129.62669373 146.96487427]
[128.31782532 161.90765381]
[121.87337494 175.45272827]
[111.10470581 185.89474487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
