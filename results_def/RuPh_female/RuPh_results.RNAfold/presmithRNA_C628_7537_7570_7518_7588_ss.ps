%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAGUGUAAAAAACACAUCAGUUUUUCACACUGAAAAUGGACUAGUCCUAAGGGCUUUAUUUAUUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[81.63585663 121.42340851]
[75.85277557 114.59848785]
[72.49664307 106.30632019]
[57.51091766 105.65203094]
[42.52519608 104.99774170]
[27.53947258 104.34345245]
[12.55374813 103.68915558]
[-2.43197489 103.03486633]
[-16.55650902 110.16284943]
[-28.93417168 101.87775421]
[-43.91989517 101.22346497]
[-58.90561676 100.56917572]
[-73.89134216 99.91488647]
[-88.87706757 99.26059723]
[-103.86278534 98.60630035]
[-115.34413910 109.46697235]
[-131.13980103 108.94456482]
[-141.87846375 97.34902954]
[-141.18908691 81.55978394]
[-129.48066711 70.94430542]
[-113.69959259 71.80057526]
[-103.20849609 83.62058258]
[-88.22277069 84.27487183]
[-73.23705292 84.92916107]
[-58.25132751 85.58345032]
[-43.26560211 86.23774719]
[-28.27988052 86.89203644]
[-15.22722530 79.71725464]
[-1.77768397 88.04914856]
[13.20803928 88.70343781]
[28.19376183 89.35772705]
[43.17948532 90.01201630]
[58.16521072 90.66630554]
[73.15093231 91.32060242]
[87.03115845 74.93980408]
[108.42015839 73.06850433]
[124.93400574 86.79016876]
[139.57844543 83.54357147]
[154.22288513 80.29698181]
[168.86732483 77.05038452]
[183.51176453 73.80378723]
[198.15620422 70.55719757]
[207.12986755 55.71825790]
[223.69935608 51.88210297]
[237.72032166 60.90668488]
[252.20921326 57.02439880]
[266.69808960 53.14211273]
[281.18698120 49.25982666]
[295.67587280 45.37754059]
[309.41040039 35.43775558]
[322.76382446 45.88391876]
[316.42248535 61.60727692]
[299.55816650 59.86642838]
[285.06927490 63.74871445]
[270.58038330 67.63100433]
[256.09149170 71.51328278]
[241.60261536 75.39556885]
[236.67604065 87.49773407]
[225.45884705 94.57462311]
[212.02236938 93.78724670]
[201.40280151 85.20163727]
[186.75836182 88.44822693]
[172.11392212 91.69482422]
[157.46948242 94.94142151]
[142.82504272 98.18801117]
[128.18060303 101.43460846]
[126.31537628 110.18357849]
[121.80529022 117.90904236]
[115.10363007 123.83452606]
[106.88396454 127.36449432]
[97.97241211 128.14414978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
