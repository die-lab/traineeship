%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUUCAUAUUGUUUUUCUUCAUAGCACUGGCUCGAGAAACCCUAUAGGAAUUGAUAGAGACGGGGAUGU\
) } def
/len { sequence length } bind def

/coor [
[180.76029968 236.13621521]
[175.62998962 222.04083252]
[170.49969482 207.94543457]
[163.28486633 194.79454041]
[154.15344238 182.89424133]
[145.02201843 170.99392700]
[135.89059448 159.09362793]
[122.00431061 153.70657349]
[119.74171448 138.04800415]
[110.61029053 126.14769745]
[101.47886658 114.24739838]
[88.63604736 108.71986389]
[86.62082672 94.88402557]
[71.20018005 92.68370819]
[62.10914612 80.48503113]
[64.30184937 65.79735565]
[55.17042542 53.89705658]
[46.03900528 41.99675751]
[36.90758133 30.09645844]
[27.77616119 18.19615746]
[18.64473915 6.29585791]
[7.40587950 5.43845367]
[-1.21706951 -1.46825099]
[-4.37710619 -11.82116127]
[-1.21400547 -21.93917274]
[-9.27349949 -34.59004593]
[-17.33299446 -47.24091721]
[-32.12113953 -54.32912827]
[-33.10668564 -70.69863892]
[-19.27578545 -79.50988770]
[-4.85648346 -71.69863129]
[-4.68212223 -55.30041122]
[3.37737203 -42.64953995]
[11.43686581 -29.99866676]
[29.14711571 -22.72948265]
[30.54504013 -2.83556366]
[39.67646027 9.06473637]
[48.80788422 20.96503639]
[57.93930435 32.86533737]
[67.07072449 44.76563644]
[76.20214844 56.66593552]
[90.95685577 58.34939957]
[100.38694000 70.28791809]
[98.52113342 85.75260162]
[111.36395264 91.28013611]
[113.37917328 105.11597443]
[122.51058960 117.01627350]
[131.64201355 128.91658020]
[146.18144226 135.15481567]
[147.79089355 149.96221924]
[156.92231750 161.86251831]
[166.05374146 173.76281738]
[175.18516541 185.66311646]
[179.34532166 171.25155640]
[191.58972168 162.58697510]
[206.56440735 163.45803833]
[217.72161865 173.48384094]
[220.18276978 188.28056335]
[212.87173462 201.37821960]
[198.98529053 207.04978943]
[184.59507751 202.81513977]
[189.72538757 216.91052246]
[194.85568237 231.00590515]
[209.92631531 234.30435181]
[220.80508423 245.24308777]
[224.02059937 260.33163452]
[218.54681396 274.75524902]
[206.13040161 283.91146851]
[190.73338318 284.87854004]
[177.26887512 277.34786987]
[170.03338623 263.72247314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 53]
[5 52]
[6 51]
[7 50]
[9 48]
[10 47]
[11 46]
[13 44]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
