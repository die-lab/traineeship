%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGUGUAAAUAGAACUUUUUUCCCUCAACAUUUUUUAGGAAUAAGAGGAAUGCCUCGGCGUGUUCAAGA\
) } def
/len { sequence length } bind def

/coor [
[97.81555176 256.23797607]
[84.92002106 264.14752197]
[70.21099091 267.68301392]
[55.12950897 266.49810791]
[41.15309525 260.70889282]
[29.65102196 250.88252258]
[21.75014114 237.98168945]
[18.22450447 223.27029419]
[19.41951370 208.18960571]
[25.21809769 194.21708679]
[35.05216980 182.72158813]
[47.95828629 174.82936096]
[62.67203522 171.31358337]
[77.75192261 172.51869202]
[83.49217224 158.66050720]
[89.23242188 144.80230713]
[94.97267151 130.94412231]
[84.93896484 126.71861267]
[77.16259766 119.44220734]
[72.49405670 110.13503265]
[71.36496735 100.02275848]
[73.75241089 90.37599182]
[79.20166779 82.35065460]
[86.90179443 76.84959412]
[95.80271149 74.42183685]
[97.76060486 59.55016708]
[99.71849823 44.67849350]
[101.67639160 29.80681992]
[92.19789886 19.97595406]
[90.24244690 6.65922451]
[96.31475830 -5.13207150]
[107.94149780 -11.09467030]
[110.54621887 -25.86678696]
[113.15093994 -40.63890076]
[115.75566101 -55.41101837]
[118.36038971 -70.18313599]
[115.15634155 -86.83157349]
[130.26718140 -94.51914978]
[141.83741760 -82.12697601]
[133.13250732 -67.57841492]
[130.52778625 -52.80629730]
[127.92305756 -38.03417969]
[125.31833649 -23.26206398]
[122.71361542 -8.48994732]
[132.92585754 4.69111824]
[130.54843140 21.53190422]
[116.54806519 31.76471329]
[114.59017181 46.63638687]
[112.63227844 61.50806046]
[110.67438507 76.37973022]
[127.31656647 91.41098022]
[126.93607330 116.03933716]
[141.24182129 120.54992676]
[155.54757690 125.06051636]
[169.85333252 129.57110596]
[185.73793030 125.49534607]
[197.01501465 137.40162659]
[192.08369446 153.04176331]
[176.01689148 156.32653809]
[165.34274292 143.87686157]
[151.03698730 139.36627197]
[136.73123169 134.85568237]
[122.42548370 130.34509277]
[108.83086395 136.68437195]
[103.09061432 150.54255676]
[97.35036469 164.40075684]
[91.61011505 178.25894165]
[103.12534332 188.06988525]
[111.04351044 200.96011353]
[114.58885956 215.66676331]
[113.41405487 230.74903870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 67]
[15 66]
[16 65]
[17 64]
[25 50]
[26 49]
[27 48]
[28 47]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
