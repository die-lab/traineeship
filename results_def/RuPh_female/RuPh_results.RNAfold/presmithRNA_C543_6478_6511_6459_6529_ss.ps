%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGUUCCUACUUUUUUUUUAAUUUUAAAGUGGGGUUAUCAGCCUGAACGGUUACAGGCUGCUGUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[75.05614471 141.87837219]
[67.32643127 136.17225647]
[60.86609268 129.06082153]
[55.92612457 120.82036591]
[52.69844437 111.77102661]
[51.30845261 102.26438141]
[51.81014633 92.66976929]
[37.50439453 88.15917969]
[23.19863892 83.64859009]
[8.89288521 79.13800812]
[-5.41286898 74.62741852]
[-19.71862411 70.11682892]
[-34.02437592 65.60624695]
[-48.33013153 61.09565735]
[-62.63588715 56.58507156]
[-73.04937744 67.74401093]
[-87.27640533 73.27162170]
[-102.49217987 72.07039642]
[-115.67559814 64.37882996]
[-124.20908356 51.72409439]
[-126.39831543 36.61879730]
[-121.80860901 22.06210327]
[-111.35124969 10.94425678]
[-97.10256958 5.47271252]
[-81.89164734 6.73385143]
[-68.73861694 14.47727203]
[-60.25502396 27.16551399]
[-58.12529755 42.27931595]
[-43.81954575 46.78990173]
[-29.51379013 51.30049133]
[-15.20803642 55.81107712]
[-0.90228218 60.32166290]
[13.40347195 64.83225250]
[27.70922661 69.34283447]
[42.01498032 73.85342407]
[56.32073593 78.36401367]
[70.53648376 61.16837311]
[90.92491913 52.10807037]
[113.21460724 53.08125687]
[132.73579407 63.88405609]
[145.39875793 82.25324249]
[160.04319763 79.00664520]
[174.68763733 75.76005554]
[189.33207703 72.51345825]
[203.97651672 69.26686859]
[218.62095642 66.02027130]
[233.26539612 62.77367783]
[239.32908630 48.49042511]
[252.64750671 40.52805710]
[268.09945679 41.94826508]
[279.74334717 52.20495224]
[283.10183716 67.35420990]
[276.88357544 81.57083893]
[263.47955322 89.38825989]
[248.04391479 87.80051422]
[236.51199341 77.41811371]
[221.86755371 80.66471100]
[207.22311401 83.91130829]
[192.57867432 87.15789795]
[177.93423462 90.40449524]
[163.28977966 93.65108490]
[148.64533997 96.89768219]
[148.30891418 106.49951935]
[146.09564209 115.84883881]
[142.09155273 124.58242798]
[136.45217896 132.36097717]
[129.39662170 138.88229370]
[121.19899750 143.89302063]
[112.17778015 147.19847107]
[102.68344879 148.67025757]
[93.08486938 148.25115967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
