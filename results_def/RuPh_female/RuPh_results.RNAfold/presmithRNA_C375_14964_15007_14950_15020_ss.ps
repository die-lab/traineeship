%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAACAGGUUUUCUUUUGAUUGUAGCUAUACCAGUUUUGGCAGGGGGUUUAACUAUGCUGCUUAGUGAUC\
) } def
/len { sequence length } bind def

/coor [
[151.49079895 254.62596130]
[146.36050415 240.53057861]
[141.23019409 226.43518066]
[136.09989929 212.33979797]
[124.47622681 203.02638245]
[127.02697754 187.41215515]
[121.89667511 173.31675720]
[116.46009827 159.33663940]
[110.71984863 145.47845459]
[104.97959900 131.62025452]
[99.23934937 117.76206207]
[83.88734436 107.51345062]
[85.90453339 89.16545868]
[78.97830200 75.86029816]
[72.05207062 62.55513382]
[65.12583923 49.24997330]
[58.19961166 35.94480896]
[51.27338409 22.63964653]
[44.34715652 9.33448410]
[37.39346313 2.92437577]
[37.42337036 -4.70556259]
[31.08409691 -18.30017853]
[24.74482346 -31.89479637]
[11.90024185 -41.13207626]
[13.53384018 -55.93682480]
[7.19456625 -69.53144073]
[0.85529244 -83.12606049]
[-5.48398161 -96.72067261]
[-20.00706863 -103.53679657]
[-23.59270859 -119.17401886]
[-13.49030590 -131.63681030]
[2.55044103 -131.36477661]
[12.22444344 -118.56659698]
[8.11063576 -103.05995178]
[14.44990921 -89.46533203]
[20.78918266 -75.87071228]
[27.12845802 -62.27610016]
[39.51961136 -54.01119614]
[38.33943939 -38.23406982]
[44.67871475 -24.63945389]
[51.01798630 -11.04483604]
[57.65231705 2.40825486]
[64.57854462 15.71341705]
[71.50477600 29.01857948]
[78.43100739 42.32374191]
[85.35723114 55.62890625]
[92.28346252 68.93406677]
[99.20969391 82.23922729]
[109.21658325 84.79723358]
[116.11265564 92.48654938]
[117.57030487 102.71183777]
[113.09754181 112.02181244]
[118.83779144 125.88000488]
[124.57804108 139.73820496]
[130.31829834 153.59638977]
[136.68684387 160.58816528]
[135.99206543 168.18646240]
[141.12236023 182.28184509]
[153.11299133 192.60345459]
[150.19528198 207.20948792]
[155.32559204 221.30488586]
[160.45588684 235.40026855]
[165.58619690 249.49566650]
[180.65681458 252.79409790]
[191.53558350 263.73284912]
[194.75109863 278.82138062]
[189.27732849 293.24499512]
[176.86090088 302.40121460]
[161.46388245 303.36828613]
[147.99938965 295.83761597]
[140.76388550 282.21221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[6 58]
[7 57]
[8 55]
[9 54]
[10 53]
[11 52]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[21 41]
[22 40]
[23 39]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
