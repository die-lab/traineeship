%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr 28 22:16:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAAAAUAGGGUUGUUUAAUUUCUUUGUAUUUGCCCAUGUUACUGCGUUGGUGUUUCCUUUGAAUGUAC\
) } def
/len { sequence length } bind def

/coor [
[166.65553284 175.32568359]
[157.66630554 173.93606567]
[149.53739929 169.77803040]
[143.10119629 163.25292969]
[139.02435303 155.00569153]
[137.73887634 145.86112976]
[139.39633179 136.74140930]
[127.10904694 128.13777161]
[114.82176971 119.53412628]
[102.53448486 110.93047333]
[90.06244659 102.59692383]
[77.41157532 94.53742981]
[64.76069641 86.47793579]
[52.10982895 78.41844177]
[33.84475327 78.17850494]
[26.09459686 62.58539200]
[13.10421562 55.08539200]
[-2.71573400 54.88600540]
[-9.86922455 41.82167053]
[-22.85960579 34.32167053]
[-35.84998703 26.82167053]
[-51.65616989 29.56833076]
[-63.56249619 18.81570625]
[-62.43545151 2.81229043]
[-49.13961029 -6.16546631]
[-33.87440109 -1.23059666]
[-28.34998703 13.83128929]
[-15.35960579 21.33128929]
[-2.36922455 28.83128929]
[12.52156639 28.49422646]
[20.60421562 42.09501266]
[33.59459686 49.59501266]
[45.55965805 46.77697372]
[56.52298355 53.18259048]
[60.16932297 65.76757050]
[72.82019043 73.82706451]
[85.47106934 81.88655853]
[98.12194061 89.94605255]
[106.33932495 91.35011292]
[111.13813019 98.64319611]
[123.42541504 107.24684143]
[135.71269226 115.85048676]
[147.99996948 124.45413208]
[169.22058105 118.01281738]
[188.57690430 128.31515503]
[194.93901062 149.03840637]
[209.03439331 154.16871643]
[223.12979126 159.29901123]
[237.22517395 164.42932129]
[251.32057190 169.55961609]
[265.41595459 174.68992615]
[279.90484619 178.57220459]
[294.67697144 181.17692566]
[308.59051514 173.18988037]
[323.45639038 179.22183228]
[327.87081909 194.64559937]
[318.44738770 207.62937927]
[302.41494751 208.21311951]
[292.07223511 195.94905090]
[277.30010986 193.34431458]
[274.78775024 195.17842102]
[271.28698730 195.95825195]
[267.26815796 195.25482178]
[263.36532593 192.84851074]
[260.28564453 188.78530884]
[246.19026184 183.65501404]
[232.09487915 178.52470398]
[217.99948120 173.39440918]
[203.90409851 168.26409912]
[189.80870056 163.13380432]
[183.57585144 169.61532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 43]
[8 42]
[9 41]
[10 40]
[11 38]
[12 37]
[13 36]
[14 35]
[16 32]
[17 31]
[19 29]
[20 28]
[21 27]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
