%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAACACUAGUAUUAUUUUUAAGUAUAUUUGUUGUGUAGAUCAAUUAUAUUUUGUUGCUUAAAAUUAGA\
) } def
/len { sequence length } bind def

/coor [
[70.23158264 289.60354614]
[58.92952728 300.00350952]
[43.93818665 303.34344482]
[29.29014969 298.72491455]
[18.92566872 287.39031982]
[15.63273811 272.38858032]
[20.29713821 257.75509644]
[31.66416740 247.42619324]
[46.67615509 244.18031311]
[51.18674088 229.87455750]
[55.69733047 215.56880188]
[60.20791626 201.26304626]
[64.71850586 186.95729065]
[61.16647339 172.49243164]
[72.69545746 161.65762329]
[77.20604706 147.35186768]
[81.71663666 133.04611206]
[69.32913208 122.03688812]
[62.84760284 106.78425598]
[63.52013016 90.22525024]
[71.21720886 75.54846191]
[84.45669556 65.58005524]
[100.68919373 62.23954773]
[103.93579102 47.59510803]
[107.18238068 32.95066833]
[110.42897797 18.30622673]
[113.67556763 3.66178679]
[116.92216492 -10.98265362]
[120.16876221 -25.62709427]
[115.60176849 -40.77480316]
[125.91034698 -51.52573013]
[129.15693665 -66.17017365]
[132.40353394 -80.81461334]
[127.83654785 -95.96232605]
[138.14512634 -106.71324921]
[129.44317627 -119.90611267]
[132.70053101 -135.37107849]
[145.98464966 -143.93305969]
[161.41432190 -140.51239014]
[169.83537292 -127.13848114]
[166.25175476 -111.74584198]
[152.78956604 -103.46665192]
[157.58877563 -89.36640930]
[147.04797363 -77.56801605]
[143.80137634 -62.92357635]
[140.55479431 -48.27913666]
[145.35400391 -34.17889404]
[134.81320190 -22.38049889]
[131.56660461 -7.73605919]
[128.32000732 6.90838099]
[125.07341766 21.55282021]
[121.82682037 36.19726181]
[118.58023071 50.84170151]
[115.33363342 65.48614502]
[126.33710480 72.93186951]
[134.08122253 83.72742462]
[137.60762024 96.53679657]
[136.47987366 109.77474976]
[130.83755493 121.80303192]
[121.37892151 131.13307190]
[109.27454376 136.61024475]
[96.02238464 137.55670166]
[91.51180267 151.86245728]
[87.00121307 166.16819763]
[90.23061371 181.65631104]
[79.02425385 191.46788025]
[74.51367188 205.77363586]
[70.00308228 220.07939148]
[65.49250031 234.38514709]
[60.98191071 248.69088745]
[71.41724396 259.96029663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[15 64]
[16 63]
[17 62]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
