%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUUUUCUGUCUUUAGCUUAUUGUUUAGUGGUGUGGAACUUUGUAUGGGAAUUUUACAAUCCAUUAUUU\
) } def
/len { sequence length } bind def

/coor [
[76.01829529 201.23487854]
[74.38291931 216.14546204]
[68.76200104 230.05249023]
[59.57752609 241.91189575]
[47.51900864 250.83332825]
[33.49173355 256.14703369]
[18.54878807 257.45410156]
[3.81200528 254.65638733]
[-9.61226177 247.96392822]
[-20.71619606 237.87915039]
[-28.66617775 225.15916443]
[-32.86536789 210.75894165]
[-32.99851227 195.75952148]
[-29.05561829 181.28701782]
[-21.33269501 168.42791748]
[-10.40953732 158.14761353]
[2.89190197 151.21858215]
[-11.20348740 146.08827209]
[-25.29887581 140.95797729]
[-40.38797379 146.40762329]
[-53.98059082 137.88586426]
[-55.64963531 121.92987061]
[-44.11475754 110.77970123]
[-28.22452927 112.98882294]
[-20.16857529 126.86258698]
[-6.07318497 131.99288940]
[8.02220440 137.12318420]
[22.96512413 135.81585693]
[35.95550537 128.31585693]
[48.94588852 120.81584930]
[61.93626785 113.31584930]
[74.92665100 105.81584930]
[87.91703033 98.31584930]
[100.56790161 90.25635529]
[112.85517883 81.65270996]
[125.14246368 73.04906464]
[137.42974854 64.44541931]
[149.71702576 55.84177017]
[162.00430298 47.23812485]
[174.29158020 38.63447952]
[181.15809631 24.38099861]
[196.02159119 23.41896248]
[208.30888367 14.81531525]
[220.59616089 6.21166849]
[224.78681946 -9.27438641]
[239.56384277 -15.52092838]
[253.59155273 -7.73614359]
[256.10910034 8.10814571]
[245.18522644 19.85755920]
[229.19979858 18.49894905]
[216.91252136 27.10259628]
[204.62524414 35.70624161]
[198.63760376 49.34432983]
[182.89523315 50.92176056]
[170.60795593 59.52540588]
[158.32066345 68.12905121]
[146.03338623 76.73269653]
[133.74610901 85.33634186]
[121.45883179 93.93999481]
[109.17154694 102.54364014]
[107.00872803 107.69950104]
[101.98712158 111.12976837]
[95.41703033 111.30623627]
[82.42665100 118.80623627]
[69.43626404 126.30623627]
[56.44588852 133.80622864]
[43.45550537 141.30622864]
[30.46512413 148.80622864]
[44.76952744 153.32110596]
[57.31159210 161.54888916]
[67.14972687 172.87193298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 27]
[18 26]
[19 25]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
