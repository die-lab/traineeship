%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Apr 12 19:28:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUUUUGGGAUUAUUUCUCAUGUUGUGAAGGCUGGAAGUUCUAAGUUGGAGUUGUUUGGGAAGGUACCAA\
) } def
/len { sequence length } bind def

/coor [
[80.24844360 123.31951141]
[70.72978210 108.78511047]
[55.74406052 109.43939972]
[40.75833511 110.09368896]
[25.77261353 110.74798584]
[10.78689003 111.40227509]
[-4.19883299 112.05656433]
[-19.18455696 112.71085358]
[-32.63409805 121.04274750]
[-45.68675232 113.86796570]
[-60.67247391 114.52225494]
[-75.65819550 115.17654419]
[-82.67887878 128.83691406]
[-95.59783173 137.14331055]
[-110.93993378 137.86134338]
[-124.57822418 130.79788208]
[-132.84408569 117.85295105]
[-133.51402283 102.50868225]
[-126.40785217 88.89259338]
[-113.43707275 80.66735077]
[-98.09077454 80.04550934]
[-84.49703217 87.19432831]
[-76.31249237 100.19082642]
[-61.32676697 99.53653717]
[-46.34104156 98.88224030]
[-33.96338272 90.59715271]
[-19.83884811 97.72512817]
[-4.85312366 97.07083893]
[10.13259983 96.41654968]
[25.11832237 95.76226044]
[40.10404587 95.10797119]
[55.08977127 94.45367432]
[70.07549286 93.79938507]
[76.45409393 80.51888275]
[88.30513000 71.76609039]
[102.87423706 69.57529449]
[116.77532959 74.45568085]
[127.83448792 64.32183075]
[132.78179932 49.29403305]
[147.39256287 46.40014648]
[158.45173645 36.26629639]
[169.51089478 26.13244247]
[169.94978333 10.33424759]
[181.48838806 -0.46557152]
[197.28106689 0.14032435]
[207.95828247 11.79246807]
[207.18545532 27.57785034]
[195.42106628 38.13128281]
[179.64474487 37.19160080]
[168.58558655 47.32545471]
[157.52642822 57.45930862]
[153.37013245 71.76226807]
[137.96833801 75.38098907]
[126.90917969 85.51483917]
[130.33682251 96.31209564]
[129.59591675 107.61610413]
[124.78827667 117.87358856]
[134.43008423 129.36425781]
[144.07189941 140.85491943]
[153.71371460 152.34558105]
[169.35025024 152.16465759]
[181.41200256 162.11695862]
[184.20376587 177.50331116]
[176.40737915 191.05876160]
[161.70404053 196.38284302]
[147.03620911 190.96166992]
[139.32960510 177.35496521]
[142.22305298 161.98739624]
[132.58123779 150.49673462]
[122.93942261 139.00607300]
[113.29760742 127.51540375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[37 54]
[38 53]
[40 51]
[41 50]
[42 49]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
