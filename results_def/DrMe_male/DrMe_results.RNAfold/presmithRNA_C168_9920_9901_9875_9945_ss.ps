%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr  7 18:16:18 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAAUAAGAUUAUUUCUUUUAAAACUUCAAGAGAAAAGAAAUUUCUUUUUCAUUAAUCCCCAAAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[68.01236725 284.13952637]
[55.51771927 275.66683960]
[45.77318573 264.13659668]
[39.50188065 250.40440369]
[37.16917419 235.48927307]
[38.94816971 220.49801636]
[44.70685196 206.54307556]
[54.01789093 194.66001892]
[66.19034576 185.73063660]
[80.32093811 180.41754150]
[79.01359558 165.47462463]
[77.70626068 150.53169250]
[76.39892578 135.58877563]
[75.09159088 120.64585876]
[68.45726013 107.19276428]
[57.39809799 97.05891418]
[46.33893967 86.92506409]
[35.27977753 76.79120636]
[24.22061920 66.65735626]
[13.16145897 56.52350235]
[2.10229921 46.38964844]
[-8.95686054 36.25579453]
[-24.13500595 39.48124695]
[-38.29652786 33.13846588]
[-45.99603271 19.66637421]
[-44.27290344 4.24526930]
[-33.78972244 -7.19511890]
[-18.57747841 -10.25572777]
[-4.48559761 -3.75969148]
[3.06730866 9.79513168]
[1.17699218 25.19663620]
[12.23615265 35.33049011]
[23.29531288 45.46434402]
[34.35447311 55.59819412]
[45.41363144 65.73204803]
[56.47279358 75.86589813]
[67.53195190 85.99975586]
[78.59111023 96.13360596]
[91.29730988 82.41223907]
[107.97039032 84.43055725]
[119.87068939 75.29914093]
[131.77099609 66.16771698]
[143.67129517 57.03629684]
[145.48541260 41.33647156]
[157.92138672 31.58340454]
[173.60115051 33.56341553]
[183.22219849 46.10180283]
[181.07650757 61.75975800]
[168.43710327 71.24769592]
[152.80271912 68.93659973]
[140.90242004 78.06801605]
[129.00210571 87.19944000]
[117.10181427 96.33086395]
[116.20854950 109.74482727]
[105.55735779 119.55963898]
[90.03450775 119.33852386]
[91.34184265 134.28144836]
[92.64918518 149.22436523]
[93.95652008 164.16728210]
[95.26385498 179.11019897]
[110.10237885 181.88882446]
[123.64048004 188.56883240]
[134.87353516 198.65452576]
[142.96797180 211.39746094]
[147.32315063 225.85205078]
[147.61585999 240.94564819]
[143.82440186 255.55822754]
[136.23011780 268.60543823]
[125.39656067 279.11904907]
[112.12763977 286.31893921]
[97.40800476 289.67080688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
