%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:01:20 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGGUCAGCUAAUUAAGCUAUCGGGCCCAUACCCCGAAAACGUUGGUUUAAAUCCUUCCCGUACUA\
) } def
/len { sequence length } bind def

/coor [
[97.17761230 204.32345581]
[96.50463867 189.33856201]
[95.83166504 174.35366821]
[95.15869141 159.36877441]
[86.85817719 147.00144958]
[93.96854401 132.86804199]
[93.29557037 117.88314819]
[82.67167664 108.03028107]
[82.02160645 93.55535126]
[91.71952820 82.78982544]
[91.04655457 67.80493164]
[78.86544037 60.96948242]
[71.78272247 49.05748367]
[71.59812927 35.30945587]
[78.25183868 23.40248299]
[89.86959839 16.46671486]
[89.86959839 1.46671486]
[89.86959839 -13.53328514]
[89.86959839 -28.53328514]
[89.86959839 -43.53328323]
[89.86959839 -58.53328323]
[89.86959839 -73.53328705]
[89.86959839 -88.53328705]
[87.85610199 -103.39752960]
[83.86554718 -117.85697174]
[79.87499237 -132.31642151]
[75.88443756 -146.77586365]
[71.89389038 -161.23530579]
[57.59810257 -167.57286072]
[50.76706314 -181.63951111]
[54.62617493 -196.79344177]
[67.35328674 -205.87939453]
[82.93904114 -204.60728455]
[94.02432251 -193.57775879]
[95.37500000 -177.99861145]
[86.35333252 -165.22586060]
[90.34387970 -150.76641846]
[94.33443451 -136.30697632]
[98.32498932 -121.84752655]
[102.31554413 -107.38808441]
[112.35106659 -118.53654480]
[127.30325317 -119.73323059]
[138.98419189 -110.32281494]
[140.99731445 -95.45851898]
[132.24021912 -83.28012085]
[117.50836182 -80.45659637]
[104.86959839 -88.53328705]
[104.86959839 -73.53328705]
[104.86959839 -58.53328323]
[104.86959839 -43.53328323]
[104.86959839 -28.53328514]
[104.86959839 -13.53328514]
[104.86959839 1.46671486]
[104.86959839 16.46671486]
[118.36574554 25.54221725]
[123.95987701 40.98829269]
[119.31333923 56.91637421]
[106.03145599 67.13195801]
[106.70442963 82.11685181]
[117.32832336 91.96971893]
[117.97839355 106.44464874]
[108.28047180 117.21017456]
[108.95344543 132.19506836]
[117.30209351 145.63421631]
[110.14359283 158.69580078]
[110.81656647 173.68069458]
[111.48953247 188.66558838]
[112.16250610 203.65049744]
[115.21513367 222.79028320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[6 63]
[7 62]
[10 59]
[11 58]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
