%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 16:01:20 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGACAUAUAAUAUUAACUAUCAAACCCUAUGUCCUGAUCAAUUCUAGUAGUUCCCAAAAUAUGACUUA\
) } def
/len { sequence length } bind def

/coor [
[83.85901642 281.70919800]
[76.52777100 267.04003906]
[85.79058075 253.50738525]
[86.44487000 238.52165222]
[87.09915924 223.53593445]
[79.92437744 210.48327637]
[88.25627136 197.03373718]
[88.91056061 182.04801941]
[89.56484985 167.06228638]
[90.21913910 152.07656860]
[90.87343597 137.09085083]
[77.38539124 130.78318787]
[67.33386993 119.79770660]
[62.24630737 105.80375671]
[62.89580154 90.92787170]
[69.18366241 77.43058777]
[80.15438080 67.36296082]
[94.14084625 62.25486374]
[94.79513550 47.26913834]
[95.44942474 32.28341675]
[96.10371399 17.29769325]
[96.75800323 2.31197023]
[97.41230011 -12.67375278]
[83.27068329 -18.00969124]
[71.48670197 -27.44262695]
[63.20653152 -40.03894043]
[59.23055649 -54.55812454]
[59.93602371 -69.57494354]
[65.24127197 -83.61934662]
[74.61496735 -95.32037354]
[87.12930298 -103.53996277]
[101.55178833 -107.48366547]
[102.20607758 -122.46939087]
[91.34541321 -133.95074463]
[91.86781311 -149.74639893]
[103.46334839 -160.48506165]
[119.25259399 -159.79570007]
[129.86807251 -148.08726501]
[129.01181030 -132.30619812]
[117.19180298 -121.81510162]
[116.53751373 -106.82937622]
[130.56140137 -101.64367676]
[142.31172180 -92.36466980]
[150.62994385 -79.89119720]
[154.69094849 -65.43785858]
[154.08493042 -50.41669464]
[148.85865784 -36.29928970]
[139.51214600 -24.47257233]
[126.95087433 -16.10257149]
[112.39801788 -12.01946259]
[111.74372864 2.96626115]
[111.08943939 17.95198441]
[110.43515015 32.93770599]
[109.78086090 47.92343140]
[109.12656403 62.90915298]
[122.61460876 69.21681213]
[132.66612244 80.20229340]
[137.75369263 94.19624329]
[137.10420227 109.07212830]
[130.81634521 122.56941223]
[119.84561920 132.63703918]
[105.85915375 137.74513245]
[105.20486450 152.73086548]
[104.55057526 167.71658325]
[103.89628601 182.70230103]
[103.24199677 197.68803406]
[110.36997223 211.81256104]
[102.08488464 224.19023132]
[101.43059540 239.17594910]
[100.77629852 254.16166687]
[108.82440948 268.45013428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
