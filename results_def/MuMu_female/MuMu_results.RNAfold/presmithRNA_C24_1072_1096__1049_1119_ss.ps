%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Apr 11 07:41:54 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGGCCUACACCCAGAAGAUUUCAUGACCAAUGAACACUCUGAACUAAUCCUAGCCCUAGCCCUACACA\
) } def
/len { sequence length } bind def

/coor [
[82.47000122 125.35065460]
[93.53002930 115.21950531]
[82.03936768 124.86131287]
[70.54869843 134.50312805]
[59.05803299 144.14494324]
[47.56736755 153.78675842]
[47.74829865 169.42329407]
[37.79599762 181.48504639]
[22.40963936 184.27680969]
[8.85418892 176.48042297]
[3.53011703 161.77706909]
[8.95128632 147.10925293]
[22.55798721 139.40264893]
[37.92555237 142.29609680]
[49.41621780 132.65428162]
[60.90688705 123.01246643]
[72.39755249 113.37065125]
[83.88822174 103.72883606]
[87.13481140 89.08439636]
[80.79553986 75.48977661]
[74.45626831 61.89516068]
[57.45563126 51.46920013]
[59.18547058 32.40348053]
[51.68547058 19.41309738]
[44.18547058 6.42271709]
[36.68547058 -6.56766415]
[29.18547058 -19.55804443]
[14.12358379 -25.08245850]
[9.18871498 -40.34766769]
[18.16647148 -53.64351273]
[34.16988754 -54.77055359]
[44.92251205 -42.86422729]
[42.17584991 -27.05804443]
[49.67584991 -14.06766415]
[57.17584991 -1.07728302]
[64.67584991 11.91309834]
[72.17584991 24.90347862]
[82.61119843 26.76975250]
[90.33519745 34.35317993]
[92.47988129 45.19099045]
[88.05088043 55.55588913]
[94.39015198 69.15050507]
[100.72943115 82.74512482]
[96.08966827 68.48073578]
[97.70220947 53.56766510]
[105.28387451 40.62477875]
[117.50325012 31.92496490]
[132.21450806 28.99599266]
[146.83421326 32.35221481]
[158.79501343 41.40425110]
[165.99647522 54.56247711]
[167.17396545 69.51618958]
[162.12069702 83.63938141]
[151.72406006 94.45188141]
[137.80982971 100.05492401]
[122.82253265 99.46483612]
[136.12768555 106.39106750]
[152.47871399 105.13555908]
[161.51696777 118.81919861]
[153.94468689 133.36541748]
[137.55157471 133.81031799]
[129.20146179 119.69622803]
[115.89630127 112.76999664]
[128.88781738 120.26802063]
[136.67092896 133.09078979]
[137.32646179 148.07646179]
[130.69279480 161.52986145]
[118.40563202 170.13369751]
[103.49475098 171.76638794]
[89.63687134 166.02539062]
[80.24906158 154.32627869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[19 43]
[20 42]
[21 41]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
