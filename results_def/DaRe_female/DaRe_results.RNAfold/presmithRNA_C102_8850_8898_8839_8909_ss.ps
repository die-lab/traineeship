%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAGCGUUGACCUUUUAAGUCAAAACUUGGUGCUUACCGACCACCCUUAGUGAAUGCCUCAGCUUAAUC\
) } def
/len { sequence length } bind def

/coor [
[79.03116608 162.77445984]
[74.76995850 148.39244080]
[75.54078674 133.41226196]
[81.25567627 119.54359436]
[91.26437378 108.36769867]
[76.32145691 109.67503357]
[66.18021393 121.49844360]
[51.00734711 122.61140442]
[39.79802704 112.87042236]
[24.85510826 114.17775726]
[9.91218758 115.48509216]
[-5.03073263 116.79242706]
[-19.97365379 118.09976196]
[-28.79419136 131.01223755]
[-43.86497116 135.18424988]
[-58.07003403 128.64587402]
[-64.70217896 114.48435211]
[-60.62991333 99.38632202]
[-47.77603531 90.48059845]
[-32.20975113 91.97220612]
[-21.28098869 103.15684509]
[-6.33806896 101.84951019]
[8.60485172 100.54217529]
[23.54777145 99.23483276]
[38.49069214 97.92749786]
[47.83821106 86.38802338]
[62.97383499 84.84933472]
[75.01412201 94.73211670]
[89.95703888 93.42478180]
[95.10134888 89.10945129]
[101.72502899 88.24673462]
[112.78418732 78.11288452]
[123.84335327 67.97903442]
[134.90251160 57.84518051]
[139.84982300 42.81738281]
[154.46058655 39.92349625]
[165.51976013 29.78964424]
[176.57891846 19.65579033]
[187.63807678 9.52193832]
[192.58538818 -5.50585938]
[207.19615173 -8.39974403]
[218.25531006 -18.53359604]
[218.69421387 -34.33179092]
[230.23281860 -45.13161087]
[246.02548218 -44.52571487]
[256.70269775 -32.87356949]
[255.92987061 -17.08818817]
[244.16549683 -6.53475571]
[228.38917542 -7.47443676]
[217.33001709 2.65941644]
[213.17372131 16.96237373]
[197.77192688 20.58109856]
[186.71276855 30.71495056]
[175.65361023 40.84880447]
[164.59445190 50.98265839]
[160.43815613 65.28561401]
[145.03636169 68.90434265]
[133.97720337 79.03819275]
[122.91804504 89.17204285]
[111.85888672 99.30590057]
[126.85791016 99.47658539]
[140.94418335 104.63185883]
[152.51004028 114.18334961]
[160.23547363 127.04094696]
[163.23876953 141.73721313]
[161.17716980 156.59486389]
[154.28596497 169.91819763]
[143.35165405 180.18663025]
[129.62214661 186.22822571]
[114.66441345 187.35343933]
[100.18556976 183.43388367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[31 60]
[32 59]
[33 58]
[34 57]
[36 55]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
