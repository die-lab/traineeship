%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCGUCCUGAGCUAAAUAGCUAGCUUAACCAUCAAGAUCAACUUAAAAACAUCAAUAACCUAUAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[172.85456848 146.34089661]
[174.66873169 131.40692139]
[160.36297607 126.89633942]
[146.05722046 122.38575745]
[131.75146484 117.87516785]
[118.96955109 131.11001587]
[101.35066986 136.41226196]
[83.38739014 132.42990112]
[69.66008759 120.17837524]
[63.66902542 102.78165436]
[48.79735184 100.82376099]
[33.92567825 98.86586761]
[19.05400658 96.90797424]
[4.18233347 94.95008087]
[-10.68933964 92.99218750]
[-25.56101227 91.03429413]
[-37.94524384 100.85296631]
[-53.63526154 98.95587158]
[-63.32244873 86.46852112]
[-61.25957489 70.79943848]
[-48.67050552 61.24481964]
[-33.02410889 63.47323990]
[-23.60311890 76.16262054]
[-8.73144627 78.12051392]
[6.14022636 80.07840729]
[21.01189995 82.03630066]
[35.88357162 83.99419403]
[50.75524521 85.95208740]
[65.62691498 87.90998077]
[71.22828674 77.64231873]
[79.79421234 69.67832947]
[90.44208527 64.83860779]
[102.07478333 63.62181091]
[113.49369812 66.15332031]
[123.52225494 72.17230225]
[131.12715149 81.05857086]
[135.52479553 91.89651489]
[136.26205444 103.56941223]
[150.56781006 108.08000183]
[164.87356567 112.59058380]
[179.17932129 117.10117340]
[186.25901794 103.82742310]
[195.65739441 92.08071899]
[207.05436707 82.26115417]
[220.06173706 74.70317841]
[234.23648071 69.66421509]
[249.09582520 67.31588745]
[264.13363647 67.73818207]
[278.83779907 70.91670990]
[292.70739746 76.74321747]
[305.27014160 85.01925659]
[316.09805298 95.46294403]
[324.82241821 107.71856689]
[331.14602661 121.36871338]
[334.85351562 135.94847107]
[335.81863403 150.96122742]
[334.00851440 165.89569092]
[329.48477173 180.24317932]
[322.40148926 193.51501465]
[312.99993896 205.25918579]
[301.60034180 215.07568359]
[288.59091187 222.63015747]
[274.41482544 227.66529846]
[259.55484009 230.00961304]
[244.51712036 229.58326721]
[229.81384277 226.40077209]
[215.94580078 220.57052612]
[203.38531494 212.29110718]
[192.56019592 201.84449768]
[183.83915710 189.58651733]
[177.51921082 175.93467712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
