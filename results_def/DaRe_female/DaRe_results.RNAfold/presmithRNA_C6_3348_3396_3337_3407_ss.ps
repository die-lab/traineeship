%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGAAACAUCUCUAAGCCUCAGAACACCUGACCAAAGACGAUCCGGCCUAUAAGCCGAUCAACGAACC\
) } def
/len { sequence length } bind def

/coor [
[76.04652405 166.86604309]
[63.87220383 161.15242004]
[52.99308395 153.24645996]
[41.93392181 163.38032532]
[30.87476158 173.51417542]
[19.81560135 183.64802551]
[8.75644207 193.78187561]
[4.34385014 209.57621765]
[-11.60582829 213.38932800]
[-22.68493271 201.29859924]
[-17.49622917 185.74195862]
[-1.37741113 182.72271729]
[9.68174934 172.58886719]
[20.74090958 162.45501709]
[31.80006981 152.32116699]
[42.85923004 142.18730164]
[34.63985443 127.80086517]
[29.97722244 111.90156555]
[29.12506104 95.35461426]
[32.12974167 79.06044769]
[38.82776260 63.90576553]
[48.85462570 50.71524429]
[39.21281052 39.22457886]
[29.57099724 27.73391151]
[19.92918205 16.24324417]
[4.13681602 13.41822815]
[-3.37385750 -0.75813758]
[3.15870786 -15.41095829]
[18.72328758 -19.29984283]
[31.38006592 -9.44157410]
[31.41984940 6.60142994]
[41.06166458 18.09209633]
[50.70347595 29.58276367]
[60.34529114 41.07342911]
[74.08768463 33.86840057]
[89.06674957 29.81951332]
[104.56760406 29.12000656]
[119.85047150 31.80326080]
[134.18597412 37.74121857]
[146.88993835 46.65048981]
[157.35607910 58.10587692]
[165.08486938 71.56066895]
[169.70748901 86.37273407]
[184.65040588 85.06539917]
[199.59333801 83.75806427]
[214.53625488 82.45072937]
[223.11947632 78.47940063]
[230.15718079 81.42687988]
[245.14289856 80.77259064]
[260.12863159 80.11829376]
[270.61972046 68.29829407]
[286.40078735 67.44202423]
[298.10922241 78.05750275]
[298.79858398 93.84674835]
[288.05993652 105.44228363]
[272.26428223 105.96468353]
[260.78292847 95.10401917]
[245.79719543 95.75830841]
[230.81147766 96.41259766]
[215.84358215 97.39364624]
[200.90066528 98.70098114]
[185.95774841 100.00832367]
[171.01483154 101.31565857]
[169.49388123 114.67777252]
[165.48155212 127.51368713]
[159.12167358 139.36322021]
[150.64227295 149.80157471]
[140.34732056 158.45451355]
[128.60589600 165.01184082]
[115.83893585 169.23846436]
[102.50415039 170.98284912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[22 34]
[23 33]
[24 32]
[25 31]
[43 63]
[44 62]
[45 61]
[46 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
