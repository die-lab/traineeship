%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Apr 24 13:07:46 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUAAGCUCCGCAUGCACAAAGGCAUGGUCCCGACCUUUUGAUCAGCUUUUACCUAAUUUACACAUGC\
) } def
/len { sequence length } bind def

/coor [
[66.07409668 213.41879272]
[63.45910263 228.39311218]
[55.30851746 241.22418213]
[42.86524963 249.95536804]
[28.02680206 253.25521851]
[13.05593586 250.62052917]
[0.23559734 242.45306396]
[-8.47920513 229.99832153]
[-11.75952816 215.15554810]
[-9.10514545 200.18815613]
[-0.92083132 187.37857056]
[11.54536629 178.68016052]
[26.39244080 175.41937256]
[41.35632324 178.09344482]
[49.41581726 165.44256592]
[57.47531128 152.79170227]
[65.53480530 140.14082336]
[73.59429932 127.48995209]
[62.77884293 108.21851349]
[64.47401428 86.18470001]
[78.11003113 68.79442596]
[99.10362244 61.89284897]
[101.70834351 47.12073135]
[104.31306458 32.34861755]
[106.91778564 17.57649994]
[109.52250671 2.80438423]
[112.12723541 -11.96773243]
[110.51272583 -21.28635216]
[115.18126678 -27.32138252]
[118.42785645 -41.96582413]
[121.67445374 -56.61026382]
[124.92104340 -71.25469971]
[128.16763306 -85.89913940]
[116.78982544 -96.21616364]
[112.11013794 -110.84476471]
[115.38739014 -125.84993744]
[125.74002075 -137.19535828]
[140.38322449 -141.82917786]
[155.37805176 -138.50489807]
[166.69096375 -128.11676025]
[171.27885437 -113.45909882]
[167.90759277 -98.47476959]
[157.48403931 -87.19447327]
[142.81208801 -82.65254974]
[139.56549072 -68.00811005]
[136.31889343 -53.36367035]
[133.07229614 -38.71922684]
[129.82569885 -24.07478905]
[126.89934540 -9.36300945]
[124.29462433 5.40910721]
[121.68990326 20.18122292]
[119.08518219 34.95333862]
[116.48046112 49.72545624]
[113.87573242 64.49757385]
[121.96066284 68.84413910]
[128.77206421 74.99746704]
[133.91494751 82.60072327]
[137.09106445 91.21298218]
[138.11622620 100.33480835]
[136.93098450 109.43722534]
[133.60406494 117.99235535]
[128.32841492 125.50409698]
[121.40997314 131.53681946]
[113.24993896 135.74069214]
[104.32152557 137.87193298]
[95.14250183 137.80691528]
[86.24517059 135.54945374]
[78.18567657 148.20031738]
[70.12618256 160.85119629]
[62.06668854 173.50205994]
[54.00719452 186.15293884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
