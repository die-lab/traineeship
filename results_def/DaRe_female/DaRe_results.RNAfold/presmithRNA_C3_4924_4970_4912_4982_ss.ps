%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUUUCUAGGAUGAGGUCAGCUAAUUAAGCUACCGGGCCCAUACCCCGAACAUGAUGGUUAAAGUCCC\
) } def
/len { sequence length } bind def

/coor [
[155.94813538 229.67102051]
[150.20788574 215.81282043]
[144.46763611 201.95463562]
[138.72738647 188.09643555]
[132.68618774 174.36677551]
[116.07627106 164.84811401]
[117.28697968 144.94192505]
[109.78697968 131.95155334]
[102.28697968 118.96116638]
[88.31871033 115.10972595]
[81.07395172 102.56143188]
[84.72263336 88.53883362]
[77.22263336 75.54844666]
[69.44104004 62.72476959]
[61.38154221 50.07389832]
[53.32204819 37.42302704]
[45.83614349 31.64336586]
[45.20093918 24.03985596]
[37.70093918 11.04947376]
[30.20094109 -1.94090688]
[22.70094109 -14.93128777]
[14.09729481 -27.21856880]
[4.45548010 -38.70923615]
[-5.18633366 -50.19990158]
[-14.82814789 -61.69056702]
[-30.62051392 -64.51558685]
[-38.13118744 -78.69194794]
[-31.59862328 -93.34477234]
[-16.03404427 -97.23365784]
[-3.37726355 -87.37538910]
[-3.33748150 -71.33238220]
[6.30433273 -59.84171677]
[15.94614697 -48.35104752]
[25.58796120 -36.86038208]
[28.69149399 -36.65046310]
[31.87449837 -34.99759293]
[34.50093079 -31.87549019]
[35.94393539 -27.52345276]
[35.69132233 -22.43128777]
[43.19132233 -9.44090652]
[50.69132233 3.54947424]
[58.19132233 16.53985596]
[65.97292328 29.36353302]
[74.03241730 42.01440430]
[82.09191132 54.66527557]
[88.54299927 58.73961639]
[90.21302032 68.04844666]
[97.71302032 81.03883362]
[111.68128967 84.89027405]
[118.92604828 97.43856812]
[115.27736664 111.46116638]
[122.77736664 124.45155334]
[130.27735901 137.44192505]
[141.30816650 139.75897217]
[148.95582581 147.73210144]
[150.73750305 158.40890503]
[146.28080750 168.02749634]
[152.94827271 174.73481750]
[152.58558655 182.35618591]
[158.32583618 196.21438599]
[164.06608582 210.07257080]
[169.80633545 223.93077087]
[185.04409790 225.85592651]
[197.26809692 235.15481567]
[203.19013977 249.32609558]
[201.21722412 264.55773926]
[191.88006592 276.75253296]
[177.69029236 282.63012695]
[162.46490479 280.60949707]
[150.29943848 271.23413086]
[144.46635437 257.02603149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 57]
[7 53]
[8 52]
[9 51]
[12 48]
[13 47]
[14 45]
[15 44]
[16 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 34]
[23 33]
[24 32]
[25 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
