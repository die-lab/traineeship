%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUAUAAAUGACUUCCAAUCAUUUGGUCUUGGUGAAAAAUCCAGGGAAAGGUAAUGAAUUUAUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[80.37995148 309.05715942]
[65.15245819 307.05239868]
[52.97720337 297.68978882]
[47.12927246 283.48776245]
[49.18173218 268.26663208]
[58.58247757 256.12078857]
[72.80275726 250.31739807]
[74.76065063 235.44572449]
[76.71854401 220.57405090]
[78.67643738 205.70237732]
[80.63433075 190.83070374]
[82.59221649 175.95903015]
[84.55010986 161.08735657]
[78.54024506 147.45904541]
[88.01264191 134.78686523]
[89.97053528 119.91519165]
[91.92842865 105.04351807]
[89.58830261 99.96566772]
[90.45179749 93.94589996]
[94.76038361 88.98269653]
[98.00697327 74.33825684]
[93.43997955 59.19054794]
[103.74856567 48.43962097]
[106.99515533 33.79518127]
[110.24175262 19.15074158]
[113.48834991 4.50630140]
[105.26168823 -8.72093678]
[108.76280975 -23.52623177]
[121.42366028 -31.28758049]
[124.67024994 -45.93201828]
[127.91684723 -60.57646179]
[131.16343689 -75.22090149]
[134.41003418 -89.86534119]
[137.65663147 -104.50978088]
[127.27423096 -116.04170990]
[125.68648529 -131.47734070]
[133.50390625 -144.88136292]
[147.72053528 -151.09963989]
[162.86979675 -147.74111938]
[173.12648010 -136.09724426]
[174.54669189 -120.64529419]
[166.58432007 -107.32687378]
[152.30107117 -101.26318359]
[149.05447388 -86.61874390]
[145.80787659 -71.97430420]
[142.56129456 -57.32986450]
[139.31469727 -42.68542480]
[136.06809998 -28.04098511]
[144.26263428 -15.65611076]
[141.17874146 -0.75831681]
[128.13278198 7.75289536]
[124.88619232 22.39733505]
[121.63959503 37.04177475]
[118.39300537 51.68621445]
[123.19221497 65.78646088]
[112.65141296 77.58485413]
[109.40482330 92.22929382]
[106.80009460 107.00141144]
[104.84220123 121.87308502]
[102.88431549 136.74475098]
[108.75413513 151.43678284]
[99.42178345 163.04525757]
[97.46389008 177.91693115]
[95.50599670 192.78860474]
[93.54810333 207.66027832]
[91.59021759 222.53195190]
[89.63232422 237.40362549]
[87.67443085 252.27529907]
[99.90813446 261.56140137]
[105.84498596 275.72650146]
[103.88798523 290.96020508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[15 60]
[16 59]
[17 58]
[20 57]
[21 56]
[23 54]
[24 53]
[25 52]
[26 51]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
