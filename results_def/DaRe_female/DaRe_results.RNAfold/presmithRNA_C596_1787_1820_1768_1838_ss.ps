%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Apr  6 18:03:45 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUAACAUGAAACAAUACUUGAAGGAGGAUUUAGCAGUAAAAGAGAAGCAGAGUGUCUCUUUGAACCCGG\
) } def
/len { sequence length } bind def

/coor [
[89.75391388 129.24066162]
[96.09503174 115.64820862]
[85.96118164 126.70736694]
[75.82732391 137.76652527]
[79.05278015 152.94467163]
[72.70999146 167.10620117]
[59.23790359 174.80570984]
[43.81679916 173.08258057]
[32.37641144 162.59939575]
[29.31580162 147.38714600]
[35.81183624 133.29527283]
[49.36666107 125.74236298]
[64.76816559 127.63267517]
[74.90201569 116.57351685]
[85.03587341 105.51435852]
[84.98565674 99.20740509]
[87.33624268 93.74869537]
[78.20481873 81.84839630]
[69.07340240 69.94809723]
[59.94197845 58.04779816]
[50.30016327 46.55712891]
[40.16630936 35.49797058]
[30.03245735 24.43881035]
[19.89860535 13.37965012]
[4.10041094 12.94075775]
[-6.69940853 1.40215123]
[-6.09351254 -14.39051914]
[5.55863142 -25.06774139]
[21.34401321 -24.29491043]
[31.89744568 -12.53053188]
[30.95776558 3.24579716]
[41.09161758 14.30495739]
[51.22547150 25.36411667]
[61.35932541 36.42327881]
[66.30944824 37.50718307]
[70.50762177 41.91386414]
[71.84227753 48.91637421]
[80.97370148 60.81667709]
[90.10511780 72.71697235]
[99.23654175 84.61727905]
[113.21665955 90.05384827]
[127.98877716 87.44912720]
[142.76089478 84.84439850]
[157.53300476 82.23967743]
[172.30513000 79.63495636]
[187.07723999 77.03023529]
[201.84936523 74.42551422]
[214.09631348 64.40938568]
[227.97378540 69.81906891]
[242.74591064 67.21434784]
[257.29446411 58.50942612]
[269.68664551 70.07966614]
[261.99905396 85.19050598]
[245.35063171 81.98646545]
[230.57850647 84.59118652]
[219.38816833 94.42100525]
[204.45408630 89.19762421]
[189.68196106 91.80235291]
[174.90985107 94.40707397]
[160.13772583 97.01179504]
[145.36561584 99.61651611]
[130.59350586 102.22123718]
[115.82138062 104.82596588]
[130.69335938 106.78159332]
[142.79106140 115.64981842]
[149.13146973 129.24391174]
[148.15115356 144.21183777]
[140.09184265 156.86282349]
[126.94078827 164.07739258]
[111.94078827 164.07656860]
[98.79052734 156.86056519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[17 40]
[18 39]
[19 38]
[20 37]
[21 34]
[22 33]
[23 32]
[24 31]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
