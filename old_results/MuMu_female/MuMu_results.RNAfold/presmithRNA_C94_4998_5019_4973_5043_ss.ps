%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Mar  1 10:23:59 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCCUUCAAAGCCCUAAGAAAACACACAAGUUUAACUUCUGAUAAGGACUGUAAGACUUCAUCCUACA\
) } def
/len { sequence length } bind def

/coor [
[112.42404938 134.46667480]
[109.99650574 131.56715393]
[108.48661041 127.66809082]
[108.26174927 123.08701324]
[99.13032532 111.18671417]
[89.74147034 99.48844910]
[80.09966278 87.99777985]
[70.45784760 76.50711823]
[60.81603241 65.01644897]
[45.44020081 65.95985413]
[32.60713196 57.76437759]
[27.12542152 43.74956894]
[30.90211868 29.36643410]
[21.26030350 17.87576866]
[16.38883400 16.37152481]
[12.79279423 13.52706051]
[10.75727081 9.99119854]
[10.29273224 6.43483782]
[11.15694332 3.44667363]
[3.65694308 -9.54370785]
[-3.84305692 -22.53408813]
[-19.93358421 -31.18078995]
[-19.60796165 -48.59067154]
[-27.66745567 -61.24154282]
[-35.72694778 -73.89241791]
[-43.78644180 -86.54328918]
[-59.26841354 -89.71884155]
[-67.90050507 -102.95751953]
[-64.56143951 -118.40504456]
[-51.23223877 -126.89668274]
[-35.82087326 -123.39449310]
[-27.47063637 -109.97625732]
[-31.13557243 -94.60278320]
[-23.07607651 -81.95191193]
[-15.01658344 -69.30103302]
[-6.95708895 -56.65016556]
[4.95727348 -53.62494278]
[11.72407722 -42.88079453]
[9.14732361 -30.03408813]
[16.64732361 -17.04370689]
[24.14732361 -4.05332661]
[32.75096893 8.23395443]
[42.39278412 19.72462082]
[57.21322250 18.50290680]
[70.06322479 26.33498383]
[75.90575409 40.39621735]
[72.30670166 55.37463379]
[81.94850922 66.86530304]
[91.59032440 78.35596466]
[101.23213959 89.84663391]
[108.64699554 93.65672302]
[111.03062439 102.05529785]
[120.16204834 113.95559692]
[130.53474426 124.79105377]
[142.02540588 134.43286133]
[153.51608276 144.07467651]
[169.06106567 147.01814270]
[173.83728027 161.12619019]
[185.32794189 170.76800537]
[201.37094116 170.80778503]
[211.22921753 183.46456909]
[207.34033203 199.02914429]
[192.68751526 205.56172180]
[178.51115417 198.05104065]
[175.68612671 182.25868225]
[164.19546509 172.61686707]
[149.47236633 170.36303711]
[143.87426758 155.56535339]
[132.38359070 145.92353821]
[120.89292908 136.28172302]
[118.29339600 136.75807190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 50]
[7 49]
[8 48]
[9 47]
[13 43]
[14 42]
[19 41]
[20 40]
[21 39]
[23 36]
[24 35]
[25 34]
[26 33]
[54 70]
[55 69]
[56 68]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
