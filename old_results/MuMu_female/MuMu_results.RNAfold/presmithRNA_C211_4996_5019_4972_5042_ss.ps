%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Mar  1 10:23:59 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGAGCCUUCAAAGCCCUAAGAAAACACACAAGUUUAACUUCUGAUAAGGACUGUAAGACUUCAUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[105.20888519 291.51324463]
[105.33837128 276.25067139]
[112.08491516 262.55957031]
[124.10898590 253.15826416]
[120.86239624 238.51382446]
[117.61579895 223.86938477]
[107.30722046 213.11845398]
[111.87420654 197.97073364]
[108.62761688 183.32629395]
[105.38101959 168.68185425]
[93.50526428 163.23208618]
[86.92440796 151.71688843]
[88.29712677 138.32752991]
[97.33777618 128.09257507]
[94.73305511 113.32046509]
[85.89366913 102.48732758]
[90.49482727 89.28426361]
[87.89010620 74.51214600]
[85.28537750 59.74002838]
[70.32255554 44.71573257]
[76.98181915 25.38102150]
[72.47122955 11.07526779]
[67.96063995 -3.23048663]
[63.45005798 -17.53624153]
[57.70980453 -31.39443398]
[50.78357697 -44.69959641]
[43.85734558 -58.00475693]
[28.71105766 -62.51757050]
[21.26564407 -76.45820618]
[25.93833733 -91.55593872]
[39.95691299 -98.85354614]
[55.00439835 -94.02149200]
[62.15338516 -79.92654419]
[57.16250992 -64.93098450]
[64.08873749 -51.62582397]
[71.01496887 -38.32066345]
[73.99949646 -37.44399261]
[76.74930573 -35.14137268]
[78.63773346 -31.52481270]
[79.10458374 -26.96361351]
[77.75581360 -22.04682732]
[82.26639557 -7.74107361]
[86.77698517 6.56468058]
[91.28757477 20.87043571]
[100.23391724 23.84006310]
[106.76859283 30.82767296]
[109.20362854 40.22511292]
[106.81650543 49.77996063]
[100.05749512 57.13530350]
[102.66222382 71.90742493]
[105.26694489 86.67953491]
[114.10633087 97.51267242]
[109.50517273 110.71573639]
[112.10989380 125.48785400]
[126.54328918 135.10023499]
[129.65303040 151.82128906]
[120.02545929 165.43527222]
[123.27205658 180.07971191]
[126.51864624 194.72415161]
[137.05944824 206.52253723]
[132.26023865 220.62278748]
[135.50683594 235.26722717]
[138.75343323 249.91166687]
[153.62409973 253.35054016]
[165.52465820 262.90771484]
[172.09225464 276.68554688]
[172.02287292 291.94851685]
[165.33030701 305.66610718]
[153.34333801 315.11468506]
[138.44201660 318.41821289]
[123.58500671 314.92080688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[8 59]
[9 58]
[10 57]
[14 54]
[15 53]
[17 51]
[18 50]
[19 49]
[21 44]
[22 43]
[23 42]
[24 41]
[25 36]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
