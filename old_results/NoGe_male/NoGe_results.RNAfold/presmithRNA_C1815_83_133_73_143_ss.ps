%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUGGGCACGGGGUUGAGGAUGCUUAUCCGUGCGGAGUUGGGGCAGCCGGGGGCUCUUUUGGGGGAUGA\
) } def
/len { sequence length } bind def

/coor [
[70.78627777 192.50544739]
[62.28902817 180.14434814]
[57.46570587 165.94097900]
[56.67842484 150.96165466]
[59.98628235 136.33093262]
[67.14094543 123.14720154]
[77.60529327 112.40022278]
[90.59182739 104.89758301]
[76.28607178 100.38699341]
[61.98031998 95.87641144]
[47.67456436 91.36582184]
[33.36881256 86.85523224]
[19.06305695 82.34465027]
[4.75730324 77.83406067]
[-2.27938509 78.97489166]
[-7.85617018 76.53707123]
[-10.56774998 72.25619507]
[-24.42594337 66.51594543]
[-38.28413773 60.77569580]
[-52.14233017 55.03544235]
[-68.32170105 57.71125412]
[-78.51817322 44.86742401]
[-72.24249268 29.71658707]
[-55.95053864 27.84462357]
[-46.40207672 41.17724991]
[-32.54388428 46.91750336]
[-18.68569183 52.65775299]
[-4.82749891 58.39800644]
[9.26788998 63.52830887]
[23.57364464 68.03889465]
[37.87939835 72.54948425]
[52.18515396 77.06006622]
[66.49090576 81.57065582]
[80.79666138 86.08124542]
[95.10241699 90.59182739]
[109.97409058 88.63393402]
[122.62496185 80.57444000]
[135.27583313 72.51494598]
[147.92669678 64.45545197]
[160.57757568 56.39596176]
[173.22845459 48.33646393]
[176.58570862 31.32325363]
[190.84390259 22.05134773]
[207.10588074 25.73622704]
[219.39317322 17.13257980]
[228.89978027 3.09475493]
[245.02070618 8.34379578]
[244.43951416 25.28777885]
[227.99681091 29.41986084]
[215.70953369 38.02350616]
[215.21925354 51.08081055]
[207.09898376 61.56740952]
[194.20352173 65.42306519]
[181.28794861 60.98733902]
[168.63706970 69.04682922]
[155.98619080 77.10632324]
[143.33532715 85.16581726]
[130.68444824 93.22531128]
[118.03358459 101.28480530]
[132.52130127 105.17142487]
[145.41032410 112.84431458]
[155.73300171 123.72743988]
[162.71437073 137.00375366]
[165.83029175 151.67655945]
[164.84687805 166.64428711]
[159.83792114 180.78324890]
[151.17948914 193.03198242]
[139.52159119 202.47091675]
[125.73944855 208.39143372]
[110.86774445 210.34904480]
[96.02294922 208.19680786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[17 28]
[18 27]
[19 26]
[20 25]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
