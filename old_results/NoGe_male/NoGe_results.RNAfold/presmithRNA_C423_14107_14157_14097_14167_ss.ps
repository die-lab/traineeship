%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUAGAGAGGUGAAAGAGGAGUAAGUAGGGGCUUCUAACCCUUGCUUGAGUAGUUAGAGUCUAUUCUUGC\
) } def
/len { sequence length } bind def

/coor [
[107.56745148 139.52799988]
[95.98673248 149.06146240]
[81.03783417 150.29859924]
[68.04745483 142.79859924]
[61.64440536 129.23390198]
[64.11026764 114.43797302]
[74.56638336 103.68299866]
[89.28696442 100.80124664]
[77.79629517 91.15943146]
[66.30563354 81.51762390]
[54.81496429 71.87580872]
[45.93754959 68.61470032]
[43.04532623 61.55411148]
[31.12522507 64.42443848]
[19.45869255 61.07100677]
[11.05271435 52.48330688]
[8.01189804 40.98340225]
[11.01239491 29.59892082]
[0.87854189 18.53976059]
[-9.25531101 7.48060083]
[-19.38916397 -3.57855892]
[-29.52301788 -14.63771915]
[-39.65687180 -25.69687843]
[-55.05837631 -23.80656242]
[-68.61319733 -31.35946846]
[-75.10923767 -45.45135117]
[-72.04862213 -60.66359329]
[-60.60823822 -71.14677429]
[-45.18713379 -72.86990356]
[-31.71504211 -65.17040253]
[-25.37225723 -51.00887680]
[-28.59770966 -35.83073044]
[-18.46385765 -24.77157211]
[-8.33000469 -13.71241188]
[1.80384886 -2.65325212]
[11.93770218 8.40590763]
[22.07155418 19.46506882]
[40.13442230 18.95576668]
[53.27910995 31.80372238]
[53.17918015 50.49495316]
[64.45677948 60.38513947]
[75.94744110 70.02695465]
[87.43811035 79.66876984]
[98.92877960 89.31058502]
[111.91915894 96.81058502]
[126.01454926 101.94088745]
[140.20242310 95.51110840]
[154.42407227 100.91475677]
[160.46644592 114.48034668]
[174.56182861 119.61064911]
[188.65722656 124.74095154]
[202.75260925 129.87126160]
[216.84799194 135.00155640]
[230.94338989 140.13186646]
[244.39456177 132.15690613]
[259.81649780 134.74496460]
[269.92739868 146.67405701]
[269.95324707 162.31163025]
[259.88183594 174.27407837]
[244.46853638 176.91311646]
[230.99107361 168.98266602]
[225.81307983 154.22724915]
[211.71769714 149.09693909]
[197.62231445 143.96664429]
[183.52691650 138.83634949]
[169.43153381 133.70603943]
[155.33613586 128.57574463]
[141.98760986 135.08361816]
[127.61980438 130.08155823]
[120.88424683 116.03627777]
[106.78885651 110.90597534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 44]
[9 43]
[10 42]
[11 41]
[13 40]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[45 71]
[46 70]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
