%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGUGCCAGCUGCUGCGGUUAUACAGGCUUCUCUGGUCAAGCUUUUUCGGCUUAAAUUCGGUUAAGUU\
) } def
/len { sequence length } bind def

/coor [
[169.27299500 144.48315430]
[155.96781921 137.55693054]
[142.66265869 130.63069153]
[129.35749817 123.70446777]
[116.05233765 116.77823639]
[102.74717712 109.85200500]
[94.43868256 109.16947937]
[89.02250671 102.32239532]
[76.03211975 94.82239532]
[63.04174042 87.32239532]
[50.05136108 79.82239532]
[37.06097794 72.32239532]
[19.26488495 78.03826141]
[3.05888867 69.36540222]
[-1.88699162 51.98538971]
[-15.48160839 45.64611816]
[-29.07622528 39.30684280]
[-41.64946747 42.99345398]
[-52.94249725 37.18881607]
[-56.99460983 25.58345604]
[-71.99016571 30.57433128]
[-86.08511353 23.42534447]
[-90.91716766 8.37786007]
[-83.61956024 -5.64071560]
[-68.52182770 -10.31340981]
[-54.58119202 -2.86799669]
[-50.06838226 12.27829266]
[-32.75313187 10.43653679]
[-22.73695183 25.71222496]
[-9.14233398 32.05149841]
[4.45228243 38.39077377]
[14.40758896 32.10577011]
[26.28963280 31.54775810]
[37.00759506 36.98231125]
[43.71400833 47.10048676]
[44.56097794 59.33201218]
[57.55136108 66.83201599]
[70.54174042 74.33201599]
[83.53211975 81.83201599]
[96.52250671 89.33201599]
[109.67340088 96.54684448]
[122.97856903 103.47307587]
[136.28373718 110.39929962]
[149.58889771 117.32553101]
[162.89405823 124.25176239]
[176.19921875 131.17799377]
[184.17214966 126.89028931]
[193.11003113 126.31545258]
[201.38645935 129.47775269]
[207.52867126 135.72865295]
[210.47964478 143.87805176]
[209.77941895 152.42024231]
[221.67971802 161.55166626]
[233.58001709 170.68309021]
[245.48031616 179.81451416]
[257.38061523 188.94593811]
[269.28091431 198.07734680]
[281.18121338 207.20877075]
[296.81561279 204.89767456]
[309.45501709 214.38560486]
[311.60070801 230.04356384]
[301.97964478 242.58195496]
[286.29989624 244.56196594]
[273.86392212 234.80889893]
[272.04980469 219.10906982]
[260.14950562 209.97766113]
[248.24920654 200.84623718]
[236.34890747 191.71481323]
[224.44859314 182.58338928]
[212.54829407 173.45196533]
[200.64799500 164.32054138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[15 31]
[16 30]
[17 29]
[20 27]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
