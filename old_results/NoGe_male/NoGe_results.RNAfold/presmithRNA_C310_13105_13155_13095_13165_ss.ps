%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAACUAAUUAAGUGUUGAACUUUUAAUUCAAUAAUGGCGUGGGCCCCAAGGCGGUCUCGUACUUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[16.10099220 183.30332947]
[7.67852402 183.27809143]
[-0.64064354 181.98251343]
[-8.66607952 179.44718933]
[-16.21421814 175.73104858]
[-23.11256027 170.92008972]
[-29.20360565 165.12524414]
[-34.34846497 158.47993469]
[-38.43000412 151.13697815]
[-41.35554123 143.26499939]
[-43.05892181 135.04466248]
[-43.50202942 126.66447449]
[-42.67564011 118.31644440]
[-40.59959793 110.19171143]
[-37.32235718 102.47616577]
[-49.60963821 93.87252045]
[-61.89691544 85.26886749]
[-74.18419647 76.66522217]
[-86.47148132 68.06157684]
[-98.75875854 59.45793152]
[-111.04604340 50.85428619]
[-126.10294342 55.07608414]
[-140.32954407 48.58471298]
[-147.00846863 34.44519424]
[-142.98612976 19.33377838]
[-130.16177368 10.38561440]
[-114.59064484 11.82575130]
[-103.62496185 22.97419930]
[-102.44239044 38.56700516]
[-90.15511322 47.17065048]
[-77.86782837 55.77429581]
[-65.58055115 64.37794495]
[-53.29327011 72.98159027]
[-41.00598907 81.58523560]
[-28.71870995 90.18888092]
[-6.34429789 75.39216614]
[20.41870880 72.82636261]
[45.30987167 83.14935303]
[62.47952652 103.99729919]
[76.78527832 99.48670959]
[91.09103394 94.97612762]
[97.44863892 89.58375549]
[106.12007904 90.59555817]
[120.60897064 86.71327209]
[135.09785461 82.83098602]
[149.58674622 78.94869995]
[164.07563782 75.06641388]
[178.47637939 70.86898041]
[189.15052795 58.41929245]
[205.21733093 61.70406723]
[210.14865112 77.34421539]
[198.87156677 89.25048828]
[182.98696899 85.17473602]
[177.38179016 90.35149384]
[167.95791626 89.55530548]
[153.46902466 93.43759155]
[138.98014832 97.31987000]
[124.49125671 101.20215607]
[110.00236511 105.08444214]
[95.60162354 109.28188324]
[81.29586792 113.79246521]
[66.99011230 118.30305481]
[67.77270508 126.72293854]
[67.27579498 135.16143799]
[65.51169586 143.42529297]
[62.52171326 151.32540894]
[58.37520599 158.68112183]
[53.16796494 165.32438660]
[47.02000809 171.10359192]
[40.07279968 175.88702393]
[32.48600769 179.56588745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[39 62]
[40 61]
[41 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
