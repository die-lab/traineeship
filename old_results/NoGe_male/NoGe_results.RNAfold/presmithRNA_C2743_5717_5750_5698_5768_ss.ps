%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUGUGCUGGCUUUAAGCGCCAGCCAUAGGCUGUGUUGCCUUUUUAGUAUAUGUUUUCCUUUUUUGGGG\
) } def
/len { sequence length } bind def

/coor [
[95.67587280 114.35624695]
[91.77439117 113.29976654]
[88.14821625 111.16490936]
[85.09848785 108.02941132]
[70.22681427 109.98730469]
[55.35514069 111.94519043]
[46.95330811 116.28713989]
[39.79373932 113.64944458]
[24.85081863 114.95677948]
[9.90789890 116.26411438]
[-5.03502131 117.57145691]
[-19.97794151 118.87879181]
[-34.92086411 120.18612671]
[-43.74140167 133.09860229]
[-58.81218338 137.27059937]
[-73.01724243 130.73223877]
[-79.64939117 116.57071686]
[-75.57711792 101.47267914]
[-62.72324371 92.56696320]
[-47.15696335 94.05856323]
[-36.22819901 105.24320221]
[-21.28527832 103.93586731]
[-6.34235764 102.62853241]
[8.60056305 101.32119751]
[23.54348373 100.01386261]
[38.48640442 98.70652771]
[53.39724731 97.07352448]
[68.26892090 95.11563110]
[83.14059448 93.15773773]
[93.27444458 82.09857178]
[93.92874146 67.11285400]
[94.58303070 52.12712860]
[95.23731995 37.14140701]
[84.37665558 25.66005135]
[84.89905548 9.86439896]
[96.49459076 -0.87427223]
[112.28383636 -0.18489881]
[122.89931488 11.52352619]
[122.04304504 27.30460167]
[110.22304535 37.79569626]
[109.56875610 52.78141785]
[108.91445923 67.76714325]
[108.26016998 82.75286865]
[110.83419800 67.97537231]
[118.71260071 55.21093750]
[130.76828003 46.28565598]
[145.27653503 42.47639465]
[160.16180420 44.32810974]
[173.29457092 51.57588959]
[182.79606628 63.18286133]
[187.30697632 77.48851013]
[186.18196106 92.44626617]
[179.58198547 105.91624451]
[168.45123291 115.97141266]
[154.38209534 121.17327118]
[139.38731384 120.77764130]
[125.61206818 114.84111023]
[115.02605438 104.21149445]
[124.15747070 116.11180115]
[133.28889465 128.01210022]
[142.42031860 139.91239929]
[158.12014771 141.72651672]
[167.87321472 154.16249084]
[165.89318848 169.84225464]
[153.35481262 179.46330261]
[137.69685364 177.31762695]
[128.20890808 164.67822266]
[130.52001953 149.04382324]
[121.38859558 137.14352417]
[112.25717163 125.24321747]
[103.12575531 113.34291840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[6 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[30 43]
[31 42]
[32 41]
[33 40]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
