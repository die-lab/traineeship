%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGUGUGAAGAAGCAUUGUUGGUAAAGAGGGACGAGAAGACCCUAUUAAGCUUUACCUUUGUUUAGUGG\
) } def
/len { sequence length } bind def

/coor [
[46.19949722 207.12956238]
[33.13323593 207.04981995]
[24.00181580 218.95011902]
[14.87039375 230.85041809]
[17.18149567 246.48481750]
[7.69355631 259.12423706]
[-7.96440077 261.26989746]
[-20.50278664 251.64886475]
[-22.48279762 235.96908569]
[-12.72973156 223.53312683]
[2.97009349 221.71899414]
[12.10151482 209.81869507]
[21.23293686 197.91839600]
[18.26090240 181.51116943]
[28.14591599 167.67097473]
[45.28937912 165.05902100]
[53.89302444 152.77172852]
[62.49667358 140.48445129]
[71.10031891 128.19717407]
[79.70396423 115.90988922]
[74.42053986 96.72207642]
[84.37150574 79.48649597]
[103.63035583 74.46817017]
[109.96962738 60.87355423]
[116.30889893 47.27893829]
[122.64817047 33.68432236]
[128.98744202 20.08970451]
[135.32672119 6.49508810]
[141.66600037 -7.09952879]
[146.17658997 -21.40528297]
[148.78131104 -36.17739868]
[151.38603210 -50.94951630]
[153.99075317 -65.72163391]
[148.76737976 -80.65571594]
[158.59719849 -91.84606171]
[150.61013794 -105.75960541]
[156.64210510 -120.62550354]
[172.06587219 -125.03992462]
[185.04963684 -115.61649323]
[185.63339233 -99.58406067]
[173.36930847 -89.24134064]
[178.77899170 -75.36386108]
[168.76286316 -63.11690903]
[166.15814209 -48.34479141]
[163.55342102 -33.57267761]
[160.94869995 -18.80056000]
[174.76432800 -24.64249420]
[188.80952454 -19.37629509]
[195.37854004 -5.89119339]
[190.86738586 8.41438484]
[177.75105286 15.69186974]
[163.22564697 11.94856453]
[155.26062012 -0.76025462]
[148.92134094 12.83436203]
[142.58206177 26.42897987]
[136.24279785 40.02359390]
[129.90351868 53.61821365]
[123.56423950 67.21282959]
[117.22496796 80.80744934]
[123.22182465 88.78391266]
[125.74140167 98.43990326]
[124.40641785 108.32949829]
[119.41676331 116.97182465]
[111.51961517 123.07275391]
[101.89749908 125.71873474]
[91.99124908 124.51353455]
[83.38759613 136.80081177]
[74.78395081 149.08810425]
[66.18030548 161.37538147]
[57.57666016 173.66265869]
[61.44479370 186.75942993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 46]
[31 45]
[32 44]
[33 43]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
