%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGUUUGUGCCAGCUGCUGCGGUUAUACAGGCUUCUCUGGUCAAGCUUUUUCGGCUUAAAUUCGGUUAAG\
) } def
/len { sequence length } bind def

/coor [
[77.49283600 114.97754669]
[73.72356415 106.35989380]
[58.73784256 105.70559692]
[43.75211716 105.05130768]
[28.76639366 104.39701843]
[13.78067112 103.74272919]
[-1.20505214 103.08843994]
[-16.19077492 102.43414307]
[-31.17649841 101.77985382]
[-46.17292786 102.10707855]
[-61.11584854 103.41441345]
[-76.05876923 104.72174835]
[-84.64199829 108.69308472]
[-91.67970276 105.74559784]
[-106.66542053 106.39989471]
[-120.19806671 115.66269684]
[-134.86724854 108.33145142]
[-135.58256531 91.94791412]
[-121.60816956 83.36605835]
[-107.31970978 91.41416931]
[-92.33399200 90.75988007]
[-77.36610413 89.77883148]
[-62.42318726 88.47149658]
[-47.48026657 87.16416168]
[-44.83530807 84.39398956]
[-40.58448410 82.93959808]
[-35.45202637 83.60533905]
[-30.52220726 86.79412842]
[-15.53648472 87.44842529]
[-0.55076128 88.10271454]
[14.43496227 88.75700378]
[29.42068481 89.41129303]
[44.40641022 90.06558990]
[59.39213181 90.71987915]
[74.37785339 91.37416840]
[88.02236176 75.76293182]
[108.71159363 74.40689087]
[124.27704620 88.10359955]
[139.04916382 85.49887848]
[153.82127380 82.89415741]
[168.59339905 80.28943634]
[178.55191040 64.47171783]
[196.54122925 60.69849777]
[211.50164795 70.83320618]
[225.99053955 66.95092010]
[240.47941589 63.06863785]
[254.96830750 59.18635178]
[269.45718384 55.30406570]
[278.69168091 42.18522644]
[294.71395874 41.36943436]
[305.23315430 53.48249817]
[302.17980957 69.23231506]
[287.89617920 76.53696442]
[273.33947754 69.79295349]
[258.85058594 73.67523956]
[244.36170959 77.55752563]
[229.87281799 81.43981171]
[215.38392639 85.32209778]
[211.79765320 96.53583527]
[203.05415344 104.60092926]
[191.35046387 107.32719421]
[179.70921326 103.88702393]
[171.19812012 95.06155396]
[156.42599487 97.66627502]
[141.65388489 100.27099609]
[126.88176727 102.87571716]
[124.26956940 111.91164398]
[118.71967316 119.50572205]
[110.90385437 124.73873901]
[101.76818085 126.97726440]
[92.41847992 125.95033264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 24]
[11 23]
[12 22]
[14 21]
[15 20]
[38 66]
[39 65]
[40 64]
[41 63]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
