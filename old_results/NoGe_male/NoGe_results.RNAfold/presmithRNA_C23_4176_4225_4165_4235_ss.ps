%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCUGAAGGUUGUUUUGUGGUGUGUACAAAUCGCCCGUCGCUCUUUCCGUGCGAGGAAAGAUAAGUCG\
) } def
/len { sequence length } bind def

/coor [
[122.59409332 135.81742859]
[118.62058258 150.28157043]
[108.57509613 161.42105103]
[94.59719849 166.86332703]
[79.66400146 165.44924927]
[66.95609283 157.47999573]
[59.18009186 144.65292358]
[57.99219131 129.70002747]
[63.64540100 115.80610657]
[74.93566132 105.93036652]
[89.45734406 102.17625427]
[76.80647278 94.11676025]
[64.15560150 86.05726624]
[54.92847824 83.98279572]
[51.13940811 77.36012268]
[35.39703369 75.78269958]
[29.40939713 62.14460754]
[17.12211609 53.54096222]
[4.83483505 44.93731308]
[-7.45244551 36.33366776]
[-19.73972702 27.73002052]
[-32.02700806 19.12637520]
[-48.01242828 20.48498344]
[-58.93629456 8.73557091]
[-56.41875076 -7.10871840]
[-42.39104080 -14.89350319]
[-27.61402130 -8.64696121]
[-23.42336082 6.83909369]
[-11.13607979 15.44274044]
[1.15120101 24.04638672]
[13.43848133 32.65003204]
[25.72576141 41.25368118]
[38.01304245 49.85732651]
[52.87654877 50.81936264]
[59.74305344 65.07284546]
[72.21509552 73.40639496]
[84.86596680 81.46588898]
[97.51683807 89.52538300]
[111.72079468 94.34697723]
[126.66371155 95.65431213]
[141.08572388 89.14922333]
[153.09020996 97.96633148]
[166.11070251 86.51261902]
[183.06686401 87.83655548]
[193.72514343 100.65963745]
[208.71087646 101.31392670]
[223.69659424 101.96821594]
[238.68231201 102.62250519]
[253.66804504 103.27680206]
[268.65377808 103.93109131]
[283.63949585 104.58538055]
[295.12084961 93.72471619]
[310.91650391 94.24711609]
[321.65515137 105.84265137]
[320.96578979 121.63189697]
[309.25735474 132.24737549]
[293.47628784 131.39111328]
[282.98519897 119.57110596]
[267.99948120 118.91680908]
[253.01374817 118.26251984]
[238.02803040 117.60823059]
[223.04229736 116.95394135]
[208.05657959 116.29965210]
[193.07086182 115.64535522]
[184.73310852 125.70594788]
[171.90702820 129.08221436]
[159.32919312 124.29085541]
[151.78288269 112.90925598]
[138.42968750 119.50785828]
[125.35637665 110.59723663]
[110.41345978 109.28989410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 38]
[12 37]
[13 36]
[15 35]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[39 71]
[40 70]
[42 68]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
