%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGGCGGAAGGAUGUUUUGGUUUUUCGGGCUGAGGGUGUUUGUUGCGAGGCUAGGGGAGGGGGUGUUU\
) } def
/len { sequence length } bind def

/coor [
[73.16181946 144.00630188]
[63.03665924 135.92428589]
[55.24654770 125.57285309]
[50.28359985 113.60594940]
[48.46132660 100.77952576]
[33.58965683 98.82163239]
[18.89762497 104.69145203]
[7.28915691 95.35910034]
[-7.40287352 101.22892761]
[-19.01134109 91.89657593]
[-33.88301468 89.93868256]
[-48.75468826 87.98078918]
[-63.62636185 86.02289581]
[-78.49803162 84.06500244]
[-93.36970520 82.10710907]
[-108.24137878 80.14922333]
[-120.62561035 89.96788788]
[-136.31562805 88.07079315]
[-146.00282288 75.58344269]
[-143.93994141 59.91436386]
[-131.35087585 50.35974121]
[-115.70447540 52.58816147]
[-106.28348541 65.27754974]
[-91.41181183 67.23544312]
[-76.54013824 69.19332886]
[-61.66846848 71.15122223]
[-46.79679489 73.10911560]
[-31.92512131 75.06700897]
[-17.05344963 77.02490234]
[-3.42513990 71.01503754]
[9.24704933 80.48742676]
[22.87535858 74.47756958]
[35.54754639 83.94995880]
[50.41921997 85.90785217]
[57.79001617 70.41690826]
[69.83640289 58.20287323]
[85.22400665 50.61870575]
[102.24834442 48.50449371]
[119.02362823 52.09442902]
[133.69168091 60.99085617]
[144.62770081 74.20832062]
[150.62031555 90.28272247]
[165.60604858 89.62843323]
[180.59176636 88.97414398]
[194.04130554 80.64225006]
[207.09396362 87.81703186]
[222.07968140 87.16274261]
[235.52923584 78.83084869]
[248.58187866 86.00563049]
[257.03372192 72.99232483]
[271.53244019 67.46363831]
[286.50302124 71.54547119]
[296.18896484 83.66827393]
[296.86581421 99.17058563]
[288.27331543 112.09143829]
[273.71545410 117.46251678]
[258.79003906 113.21851349]
[249.23617554 100.99135590]
[236.85850525 109.27644348]
[222.73397827 102.14846039]
[207.74826050 102.80275726]
[195.37059021 111.08784485]
[181.24606323 103.95986938]
[166.26033020 104.61415863]
[151.27461243 105.26844788]
[148.34138489 117.88723755]
[142.35432434 129.37606812]
[133.69168091 139.00914001]
[122.90065765 146.17794800]
[110.66295624 150.42959595]
[97.75165558 151.49551392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[8 31]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[42 65]
[43 64]
[44 63]
[46 61]
[47 60]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
