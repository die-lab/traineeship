%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUAUUUCUCUCUUGUUGUUAGCGGUGUUGUUUUUGU\
) } def
/len { sequence length } bind def

/coor [
[105.04312897 234.03413391]
[110.23038483 219.63444519]
[121.52317047 209.30334473]
[117.64088440 194.81445312]
[113.75859833 180.32556152]
[102.99088287 170.03453064]
[106.89279175 154.70202637]
[103.01050568 140.21313477]
[99.12821960 125.72425079]
[95.24593353 111.23536682]
[90.73535156 96.92961121]
[85.60504913 82.83422089]
[80.47474670 68.73883057]
[75.34444427 54.64344025]
[70.21414185 40.54804993]
[65.08383942 26.45266151]
[50.31261826 22.08032608]
[41.05649948 9.98993301]
[40.69872284 -5.05453396]
[49.16697693 -17.27855301]
[44.03667450 -31.37394333]
[29.69208145 -42.68337250]
[33.03595352 -59.77221298]
[27.29570198 -73.63040924]
[21.55545044 -87.48860168]
[15.81519890 -101.34679413]
[10.07494736 -115.20498657]
[4.33469534 -129.06317139]
[-1.40555596 -142.92137146]
[-14.73818207 -152.46983337]
[-12.86621952 -168.76179504]
[2.28461671 -175.03747559]
[15.12844563 -164.84098816]
[12.45263672 -148.66162109]
[18.19288826 -134.80343628]
[23.93313980 -120.94523621]
[29.67339134 -107.08704376]
[35.41364288 -93.22885132]
[41.15389633 -79.37065887]
[46.89414597 -65.51246643]
[58.10217667 -60.46429825]
[62.90047836 -48.70833206]
[58.13206482 -36.50424576]
[63.26236725 -22.40885544]
[77.60687256 -18.48800278]
[87.00319672 -6.73329735]
[87.68415070 8.47820091]
[79.17922974 21.32236099]
[84.30953217 35.41775131]
[89.43983459 49.51313782]
[94.57012939 63.60852814]
[99.70043182 77.70391846]
[104.83073425 91.79930878]
[109.25113678 95.22286987]
[111.26483154 100.96118927]
[109.73482513 107.35308075]
[113.61711121 121.84196472]
[117.49939728 136.33085632]
[121.38168335 150.81973267]
[132.42707825 162.14712524]
[128.24748230 176.44328308]
[132.12977600 190.93217468]
[136.01205444 205.42105103]
[150.95744324 208.72166443]
[162.64958191 218.59852600]
[168.40170288 232.78202820]
[166.89201355 248.01289368]
[158.46742249 260.79119873]
[145.06384277 268.18057251]
[129.76132202 268.48297119]
[116.07627106 261.62893677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[7 59]
[8 58]
[9 57]
[10 56]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[20 44]
[21 43]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
