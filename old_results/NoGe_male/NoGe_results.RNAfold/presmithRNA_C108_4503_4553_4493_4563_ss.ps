%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:48 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUUCAAAAUUUAUCUUAUUGGUCUCGAAACUCUGUGAUCUACUCCUUUUACGUUUAGGACUUUUCUUG\
) } def
/len { sequence length } bind def

/coor [
[75.03906250 107.50000000]
[60.03906250 107.50000000]
[45.03906250 107.50000000]
[30.03906250 107.50000000]
[15.03906250 107.50000000]
[0.03906220 107.50000000]
[-14.96093750 107.50000000]
[-21.41903114 120.09880829]
[-32.66378021 128.59031677]
[-46.41800690 131.32775879]
[-59.92782593 127.82231903]
[-70.51404572 118.82925415]
[-76.10344696 106.18603516]
[-91.08917236 105.53174591]
[-106.07489777 104.87745667]
[-117.55625153 115.73812103]
[-133.35189819 115.21572113]
[-144.09057617 103.62018585]
[-143.40119934 87.83094025]
[-131.69277954 77.21546173]
[-115.91169739 78.07173157]
[-105.42060089 89.89173126]
[-90.43488312 90.54602051]
[-75.44915771 91.20031738]
[-67.22263336 77.46211243]
[-53.15315247 69.62348938]
[-36.95635986 69.86066437]
[-22.96300316 78.20291901]
[-14.96093750 92.50000000]
[0.03906220 92.50000000]
[15.03906250 92.50000000]
[30.03906250 92.50000000]
[45.03906250 92.50000000]
[60.03906250 92.50000000]
[75.03906250 92.50000000]
[84.21928406 79.25711060]
[99.43143463 73.94284821]
[114.86090088 78.58850861]
[124.61003876 91.41835785]
[139.59576416 90.76406860]
[145.49815369 77.89555359]
[156.36180115 68.92163849]
[169.98353577 65.58684540]
[183.63340759 68.49965668]
[194.60182190 77.02240753]
[200.73739624 89.40978241]
[215.73739624 89.40978241]
[230.73739624 89.40978241]
[245.73739624 89.40978241]
[253.99136353 76.37615204]
[267.99118042 69.89472961]
[283.26953125 72.03370667]
[294.95117188 82.11055756]
[299.30853271 96.90978241]
[294.95117188 111.70899963]
[283.26953125 121.78585052]
[267.99118042 123.92482758]
[253.99136353 117.44340515]
[245.73739624 104.40978241]
[230.73739624 104.40978241]
[215.73739624 104.40978241]
[200.73739624 104.40978241]
[193.11795044 118.49374390]
[179.40377808 126.93860626]
[163.21205139 127.40814972]
[148.86813354 119.68421936]
[140.25004578 105.74978638]
[125.26432800 106.40408325]
[118.73754883 118.11636353]
[107.25187683 125.03414917]
[93.84700012 125.32664490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[13 24]
[14 23]
[15 22]
[39 68]
[40 67]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
