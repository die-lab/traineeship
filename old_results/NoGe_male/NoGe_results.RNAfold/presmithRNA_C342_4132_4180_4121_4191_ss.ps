%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGGCCCUAAAUCGGAUUUGAUAGUAAUUUUACAUUAGUAUGGUUUUCUGAAGGUUGUUUUGUGGUGUG\
) } def
/len { sequence length } bind def

/coor [
[84.05670166 282.23275757]
[70.30102539 273.97677612]
[68.32217407 258.05624390]
[79.63816071 246.68399048]
[73.03955841 233.33081055]
[81.95018005 220.25749207]
[83.25752258 205.31457520]
[84.56485748 190.37165833]
[77.96625519 177.01846313]
[86.87687683 163.94515991]
[88.18421173 149.00224304]
[89.49154663 134.05931091]
[90.79888153 119.11639404]
[81.44877625 110.29316711]
[78.91060638 97.69033813]
[84.11636353 85.93560028]
[95.15453339 79.34525299]
[97.11242676 64.47357941]
[99.07032013 49.60190582]
[101.02821350 34.73023224]
[102.98610687 19.85856056]
[95.68927002 8.97583389]
[97.82937622 -3.54001069]
[107.67910767 -10.89437962]
[110.28382874 -25.66649628]
[112.88855743 -40.43861389]
[106.12049103 -57.40516281]
[117.56078339 -70.53260040]
[119.51867676 -85.40426636]
[121.47657013 -100.27593994]
[123.43446350 -115.14761353]
[117.56464386 -129.83964539]
[126.89698792 -141.44812012]
[128.85488892 -156.31979370]
[130.81277466 -171.19146729]
[124.04061127 -186.12698364]
[133.80775452 -199.30024719]
[150.06660461 -197.15972900]
[156.09146118 -181.90740967]
[145.68444824 -169.23356628]
[143.72656250 -154.36189270]
[141.76866150 -139.49021912]
[147.77853394 -125.86191559]
[138.30613708 -113.18972015]
[136.34825134 -98.31804657]
[134.39035034 -83.44638062]
[132.43246460 -68.57470703]
[139.61482239 -58.59884644]
[137.89228821 -46.01873016]
[127.66067505 -37.83388901]
[125.05594635 -23.06177330]
[122.45122528 -8.28965664]
[129.41453552 7.67036486]
[117.85777283 21.81645393]
[115.89988708 36.68812561]
[113.94199371 51.55979919]
[111.98410034 66.43147278]
[110.02620697 81.30314636]
[120.34891510 93.99844360]
[118.56758881 110.26361084]
[105.74180603 120.42372894]
[104.43447113 135.36665344]
[103.12712860 150.30957031]
[101.81979370 165.25248718]
[108.32489014 179.67449951]
[99.50777435 191.67900085]
[98.20043945 206.62191772]
[96.89310455 221.56483459]
[103.39819336 235.98684692]
[94.58108521 247.99133301]
[103.75038910 261.15582275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[6 68]
[7 67]
[8 66]
[10 64]
[11 63]
[12 62]
[13 61]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[24 52]
[25 51]
[26 50]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
