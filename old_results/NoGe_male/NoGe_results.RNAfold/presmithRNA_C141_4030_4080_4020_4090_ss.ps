%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCUGGUUAAUUAUUUGUUUUUACAUCAGGUCAAGGUGCAGCGUAUGGGGUGGUGGAGAUGGGUUACG\
) } def
/len { sequence length } bind def

/coor [
[79.44162750 94.76068115]
[67.15434265 86.15703583]
[54.86706543 77.55339050]
[42.57978439 68.94974518]
[30.29250336 60.34609604]
[18.00522423 51.74245071]
[5.71794271 43.13880157]
[-6.56933784 34.53515625]
[-19.00258255 43.17458725]
[-33.61404419 47.03168869]
[-48.63528061 45.65959930]
[-62.25508881 39.24314117]
[-72.83786774 28.57420158]
[-79.12004089 14.95404243]
[-80.36093140 0.03461521]
[-76.42999268 -14.38179970]
[-88.71726990 -22.98544693]
[-101.00455475 -31.58909225]
[-113.29183197 -40.19273758]
[-125.57910919 -48.79638672]
[-139.81614685 -42.85414505]
[-155.00172424 -45.57483673]
[-166.29014587 -56.09029770]
[-170.07934570 -71.04508209]
[-165.16020203 -85.66716766]
[-153.10237122 -95.29071045]
[-137.75349426 -96.84486389]
[-124.01132202 -89.83370972]
[-116.26094055 -76.49447632]
[-116.97546387 -61.08366776]
[-104.68818665 -52.48001862]
[-92.40090179 -43.87637329]
[-80.11362457 -35.27272797]
[-67.82634735 -26.66908073]
[-55.62380600 -35.29365921]
[-41.17972183 -39.23035049]
[-26.23232651 -37.98540497]
[-12.58727932 -31.68984032]
[-1.89953256 -21.08596611]
[4.52737522 -7.43990088]
[5.90029716 7.60958672]
[2.03430867 22.24787521]
[14.32158947 30.85152245]
[26.60886955 39.45516968]
[38.89615250 48.05881500]
[51.18342972 56.66246033]
[63.47071075 65.26610565]
[75.75799561 73.86975098]
[88.04527283 82.47340393]
[100.36146545 78.78758240]
[112.54492950 82.89087677]
[120.12194824 93.27657318]
[120.31027222 106.13107300]
[132.21057129 115.26249695]
[144.11087036 124.39392090]
[156.01116943 133.52534485]
[167.91146851 142.65675354]
[182.75074768 138.12071228]
[197.41117859 143.20510864]
[206.25555420 155.95487976]
[205.88302612 171.46748352]
[196.43682861 183.77799988]
[181.54922485 188.15280151]
[166.94479370 182.90966797]
[158.23925781 170.06471252]
[158.78004456 154.55706787]
[146.87974548 145.42564392]
[134.97944641 136.29421997]
[123.07914734 127.16279602]
[111.17884827 118.03137207]
[95.02304840 120.62345886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
