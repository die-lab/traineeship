%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGGUUAGCUUGUGUAUUUCCGUUGUCAGCAUAUGUGCAGAAGCUCUUUAUGUGCUGGUUAAUUAUUUG\
) } def
/len { sequence length } bind def

/coor [
[92.37677002 390.61206055]
[87.00569153 376.05419922]
[91.24968719 361.12878418]
[103.47685242 351.57492065]
[102.82256317 336.58920288]
[102.16827393 321.60348511]
[101.51397705 306.61773682]
[100.85968781 291.63201904]
[100.20539856 276.64630127]
[99.55110931 261.66058350]
[98.89682007 246.67485046]
[98.24252319 231.68913269]
[89.95743561 219.31147766]
[97.08541870 205.18693542]
[96.43112183 190.20121765]
[95.77683258 175.21548462]
[95.12254333 160.22976685]
[94.46825409 145.24404907]
[93.81396484 130.25831604]
[79.56272888 123.15493774]
[70.74430084 109.89631653]
[69.70285797 94.00698090]
[76.71524811 79.71075439]
[89.91738129 70.80798340]
[88.61004639 55.86506271]
[87.30271149 40.92214203]
[83.33137512 32.33891296]
[86.27886200 25.30121231]
[85.62456512 10.31548882]
[77.29267883 -3.13405228]
[84.46746063 -16.18670654]
[83.81316376 -31.17243004]
[83.15887451 -46.15815353]
[73.89607239 -59.69079971]
[81.22731781 -74.35997772]
[97.61085510 -75.07530212]
[106.19271088 -61.10090256]
[98.14459991 -46.81244278]
[98.79888916 -31.82672119]
[99.45317841 -16.84099770]
[107.73827362 -4.46333599]
[100.61029053 9.66119766]
[101.26457977 24.64692116]
[102.24562836 39.61480713]
[103.55296326 54.55772400]
[104.86029816 69.50064850]
[117.61994171 74.63524628]
[126.88504028 84.80039978]
[130.81806946 97.98007965]
[128.63897705 111.56036377]
[120.77996063 122.84789276]
[108.79968262 129.60403442]
[109.45397949 144.58975220]
[110.10826874 159.57548523]
[110.76255798 174.56120300]
[111.41684723 189.54692078]
[112.07113647 204.53265381]
[120.40303040 217.98219299]
[113.22824860 231.03485107]
[113.88253784 246.02056885]
[114.53683472 261.00628662]
[115.19112396 275.99200439]
[115.84541321 290.97772217]
[116.49970245 305.96347046]
[117.15399170 320.94918823]
[117.80828857 335.93490601]
[118.46257782 350.92062378]
[131.47589111 359.37246704]
[137.00456238 373.87118530]
[132.92272949 388.84176636]
[120.79992676 398.52770996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[24 46]
[25 45]
[26 44]
[28 43]
[29 42]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
