%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGUGGAGGAAAAGGUGGAGACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUG\
) } def
/len { sequence length } bind def

/coor [
[112.38632202 202.04602051]
[111.07898712 187.10310364]
[109.77165222 172.16018677]
[108.46431732 157.21726990]
[105.53795624 142.50549316]
[101.02737427 128.19973755]
[96.51678467 113.89397430]
[86.33901215 104.30729675]
[89.17745972 90.61660767]
[84.66687012 76.31085205]
[80.15628815 62.00510025]
[75.64569855 47.69934464]
[71.13510895 33.39359283]
[66.62452698 19.08783722]
[62.11393738 4.78208351]
[57.60335159 -9.52367020]
[53.09276199 -23.82942390]
[48.58217621 -38.13517761]
[36.82390594 -41.60945892]
[28.39710617 -50.34687805]
[25.41116524 -61.98703384]
[28.52769279 -73.46665192]
[36.81843948 -81.82565308]
[33.57184601 -96.47009277]
[30.32525063 -111.11453247]
[19.78445244 -122.91292572]
[24.58366203 -137.01316833]
[21.33706665 -151.65760803]
[18.09047318 -166.30204773]
[3.80722141 -172.36573792]
[-4.15514708 -185.68415833]
[-2.73493862 -201.13610840]
[7.52174759 -212.77998352]
[22.67100525 -216.13850403]
[36.88763809 -209.92022705]
[44.70505905 -196.51620483]
[43.11730957 -181.08058167]
[32.73491287 -169.54864502]
[35.98150635 -154.90420532]
[39.22810364 -140.25976562]
[49.53668213 -129.50883484]
[44.96969223 -114.36112976]
[48.21628571 -99.71669006]
[51.46287918 -85.07225037]
[67.36043549 -76.48188019]
[72.32009125 -58.78288269]
[62.88793182 -42.64576721]
[67.39852142 -28.34001160]
[71.90910339 -14.03425789]
[76.41969299 0.27149674]
[80.93028259 14.57725143]
[85.44086456 28.88300514]
[89.95145416 43.18875885]
[94.46204376 57.49451447]
[98.97262573 71.80027008]
[103.48321533 86.10602570]
[113.66098785 95.69270325]
[110.82254028 109.38339233]
[115.33312988 123.68914795]
[119.84371185 137.99490356]
[123.46733093 140.80668640]
[125.79522705 144.27993774]
[126.77798462 147.93156433]
[126.52675629 151.31188965]
[125.28847504 154.05374146]
[123.40723419 155.90992737]
[124.71456909 170.85284424]
[126.02190399 185.79577637]
[127.32924652 200.73869324]
[134.73304749 215.99057007]
[122.12678528 227.32717896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 60]
[6 59]
[7 58]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
