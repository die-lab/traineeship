%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGGGACAAGCUCAGCUGGUUGCUAAAAAUGUUAUUUUUUUGAUGGGGGUGAAGUAGGCACAAAAGCU\
) } def
/len { sequence length } bind def

/coor [
[79.07798767 159.00912476]
[80.27584839 144.05764771]
[68.37554932 153.18907166]
[56.47524643 162.32049561]
[44.57494736 171.45191956]
[32.67464828 180.58334351]
[20.77434731 189.71475220]
[18.96022224 205.41458130]
[6.52425671 215.16764832]
[-9.15551090 213.18763733]
[-18.77655220 200.64924622]
[-16.63087463 184.99130249]
[-3.99147034 175.50335693]
[11.64292622 177.81445312]
[23.54322624 168.68302917]
[35.44352722 159.55162048]
[47.34382629 150.42019653]
[59.24412537 141.28877258]
[71.14442444 132.15734863]
[80.78623962 120.66668701]
[87.71247101 107.36151886]
[87.29450226 93.38594055]
[98.98236847 85.71224976]
[105.90859985 72.40708923]
[112.83482361 59.10192490]
[119.76105499 45.79676056]
[126.68728638 32.49160004]
[111.86781311 34.81179810]
[98.84033966 27.37641525]
[93.30120850 13.43661499]
[97.67243958 -0.91233462]
[110.04267883 -9.39626598]
[125.00296783 -8.30552769]
[136.01182556 1.88294971]
[138.25549316 16.71455765]
[148.86209106 6.10795593]
[159.46868896 -4.49864578]
[170.07530212 -15.10524750]
[180.68190002 -25.71184921]
[191.28849792 -36.31845093]
[201.89509583 -46.92505264]
[212.50170898 -57.53165436]
[213.93957520 -73.51013947]
[227.40739441 -82.22779083]
[242.57380676 -76.99715424]
[247.80444336 -61.83074570]
[239.08679199 -48.36292267]
[223.10830688 -46.92505264]
[212.50170898 -36.31845093]
[201.89509583 -25.71184921]
[191.28849792 -15.10524750]
[180.68190002 -4.49864578]
[170.07530212 6.10795593]
[159.46868896 16.71455765]
[148.86209106 27.32115936]
[139.99244690 39.41782761]
[133.06622314 52.72299194]
[126.13999176 66.02815247]
[119.21376038 79.33331299]
[112.28752899 92.63848114]
[112.70549774 106.61405945]
[101.01763153 114.28775024]
[94.09140015 127.59291077]
[108.60836029 123.81695557]
[123.14125824 127.53111267]
[134.06642151 137.80929565]
[138.65972900 152.08869934]
[135.77587891 166.80886841]
[126.13394165 178.29943848]
[112.13806152 183.69529724]
[97.27801514 181.65106201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[20 63]
[21 62]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
