%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUAGCUUGUUGUUGGUUUUAUAAUAGGUGAUUUCUGCCCGGUGUUUUUAGAAUAAACGGCCGCGGUA\
) } def
/len { sequence length } bind def

/coor [
[108.70641327 126.56514740]
[96.35107422 127.71631622]
[84.71468353 123.40657806]
[76.08992767 114.48507690]
[72.17614746 102.70960236]
[57.40402985 100.10488129]
[42.46994400 105.32826233]
[31.27959633 95.49843597]
[16.50747871 92.89371490]
[1.73536313 90.28899384]
[-13.03675270 87.68427277]
[-27.80887032 85.07954407]
[-42.58098602 82.47482300]
[-57.35310364 79.87010193]
[-72.12522125 77.26538086]
[-86.89733124 74.66065979]
[-98.75931549 84.85022736]
[-114.39636230 84.97946930]
[-126.42514801 74.98735046]
[-129.16603088 59.59184647]
[-121.32486725 46.06224442]
[-106.60400391 40.78680801]
[-91.95418549 46.25643539]
[-84.29261017 59.88854218]
[-69.52049255 62.49326324]
[-54.74837875 65.09798431]
[-39.97626495 67.70270538]
[-25.20414734 70.30743408]
[-10.43203068 72.91215515]
[4.34008598 75.51687622]
[19.11220169 78.12159729]
[33.88431931 80.72631836]
[47.76180267 75.31663513]
[60.00875092 85.33276367]
[74.78086853 87.93748474]
[86.67412567 75.42501068]
[103.64892578 72.28368378]
[119.23227692 79.71137238]
[127.48181915 94.87570190]
[142.42474365 96.18303680]
[157.36766052 97.49037170]
[172.31057739 98.79770660]
[187.27845764 99.77875519]
[202.26419067 100.43304443]
[217.24990845 101.08733368]
[232.23564148 101.74162292]
[247.23207092 102.06884766]
[262.23205566 102.06884766]
[277.23205566 102.06884766]
[292.23205566 102.06884766]
[302.14443970 89.97426605]
[317.52148438 87.13164520]
[331.10263062 94.88318634]
[336.47528076 109.56884766]
[331.10263062 124.25450897]
[317.52148438 132.00605774]
[302.14443970 129.16343689]
[292.23205566 117.06884766]
[277.23205566 117.06884766]
[262.23205566 117.06884766]
[247.23207092 117.06884766]
[240.32963562 120.32050323]
[231.58134460 116.72734833]
[216.59562683 116.07305908]
[201.60989380 115.41876984]
[186.62417603 114.76448059]
[179.58647156 117.71195984]
[171.00325012 113.74063110]
[156.06031799 112.43328857]
[141.11740112 111.12595367]
[126.17448425 109.81861877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[39 71]
[40 70]
[41 69]
[42 68]
[43 66]
[44 65]
[45 64]
[46 63]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
