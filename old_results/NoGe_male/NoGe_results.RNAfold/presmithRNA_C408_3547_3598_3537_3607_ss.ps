%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUUUAUAAUGCUGGUUUUAGGAUGUAGCAUCAGUGUGAGAUCUUAGGGUUUAAAAUAGCGGGAGCUU\
) } def
/len { sequence length } bind def

/coor [
[128.00028992 243.62966919]
[124.31982422 236.37414551]
[123.57704926 228.20225525]
[125.92876434 220.26791382]
[131.09112549 213.71070862]
[125.96082306 199.61532593]
[120.83052063 185.51992798]
[115.70021820 171.42454529]
[110.56991577 157.32914734]
[105.15358734 151.95512390]
[105.53795624 142.50549316]
[101.02737427 128.19973755]
[96.51678467 113.89397430]
[86.33901215 104.30729675]
[89.17745972 90.61660767]
[84.66687012 76.31085205]
[79.53656769 62.21546555]
[73.79631805 48.35727310]
[68.05606842 34.49908066]
[62.31581497 20.64088631]
[56.57556534 6.78269386]
[50.83531189 -7.07549906]
[45.09506226 -20.93369293]
[32.66563034 -30.72245216]
[34.94344711 -45.44185638]
[22.51401711 -55.23061371]
[24.79183578 -69.95001984]
[19.05158424 -83.80821228]
[4.35624743 -89.62393188]
[-1.84582722 -104.16043091]
[4.12493992 -118.79346466]
[18.72619820 -124.84149933]
[33.29528046 -118.71636200]
[39.18861008 -104.05197144]
[32.90977478 -89.54846191]
[38.65002823 -75.69026947]
[50.66887665 -66.89273834]
[48.80163956 -51.18210602]
[60.82049179 -42.38457870]
[58.95325470 -26.67394447]
[64.69350433 -12.81575108]
[70.43375397 1.04244232]
[76.17401123 14.90063572]
[81.91426086 28.75882912]
[87.65451050 42.61701965]
[93.39476013 56.47521591]
[97.67563629 59.18679428]
[100.11346436 64.76358032]
[98.97262573 71.80027008]
[103.48321533 86.10602570]
[113.66098785 95.69270325]
[110.82254028 109.38339233]
[115.33312988 123.68914795]
[119.84371185 137.99490356]
[124.66530609 152.19885254]
[129.79560852 166.29423523]
[134.92590332 180.38963318]
[140.05621338 194.48501587]
[145.18650818 208.58041382]
[164.58326721 221.06837463]
[162.15023804 243.32099915]
[170.20973206 255.97187805]
[178.26922607 268.62274170]
[193.05737305 275.71096802]
[194.04292297 292.08047485]
[180.21202087 300.89172363]
[165.79270935 293.08047485]
[165.61834717 276.68225098]
[157.55885315 264.03137207]
[149.49935913 251.38049316]
[141.57844543 251.65826416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[11 54]
[12 53]
[13 52]
[15 50]
[16 49]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[25 38]
[27 36]
[28 35]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
