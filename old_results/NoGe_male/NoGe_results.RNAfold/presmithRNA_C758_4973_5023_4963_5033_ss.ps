%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCAAAAACAUAGCUUGUUGUUGGUUUUAUAAUAGGUGAUUUCUGCCCGGUGUUUUUAGAAUAAACGGC\
) } def
/len { sequence length } bind def

/coor [
[92.14782715 107.98847198]
[89.24693298 105.65760803]
[87.09958649 102.27660370]
[86.07888794 98.10935211]
[74.58821869 88.46753693]
[63.09755325 78.82572937]
[47.55256653 75.88226318]
[42.77635193 61.77421188]
[31.28568649 52.13240051]
[19.79501915 42.49058533]
[8.01146412 45.87812424]
[-3.79023838 43.03677368]
[-12.56280708 34.82390976]
[-16.10234833 23.46759033]
[-13.60129070 11.96306419]
[-24.20789146 1.35646248]
[-34.81449509 -9.25013924]
[-45.42109680 -19.85674095]
[-56.02769852 -30.46334267]
[-66.63430023 -41.06994629]
[-77.24089813 -51.67654800]
[-87.84750366 -62.28314972]
[-98.45410156 -72.88974762]
[-114.01537323 -71.34669495]
[-126.89862061 -80.20986938]
[-131.02076721 -95.29435730]
[-124.43547821 -109.47772980]
[-110.25211334 -116.06301880]
[-95.16762543 -111.94086456]
[-86.30444336 -99.05761719]
[-87.84750366 -83.49635315]
[-77.24089813 -72.88974762]
[-66.63430023 -62.28314972]
[-56.02769852 -51.67654800]
[-45.42109680 -41.06994629]
[-34.81449509 -30.46334267]
[-24.20789146 -19.85674095]
[-13.60129070 -9.25013924]
[-2.99468875 1.35646248]
[15.02877331 0.05975481]
[28.72136879 12.32211971]
[29.43683434 30.99991798]
[40.92750168 40.64173126]
[52.41816711 50.28354645]
[67.14126587 52.53736496]
[72.73936462 67.33506012]
[84.23003387 76.97687531]
[95.72070312 86.61869049]
[108.19274902 94.95223999]
[121.49790955 101.87847137]
[134.80307007 108.80470276]
[153.01954651 107.45182037]
[162.09924316 122.31011963]
[175.69386292 128.64939880]
[189.28848267 134.98866272]
[202.88310242 141.32794189]
[216.47770691 147.66722107]
[233.38813782 148.88127136]
[236.90278625 165.46691895]
[221.93827820 173.43557739]
[210.13844299 161.26184082]
[196.54382324 154.92256165]
[182.94920349 148.58328247]
[169.35458374 142.24401855]
[155.75997925 135.90473938]
[144.08604431 139.75486755]
[132.60615540 134.32914734]
[127.87683868 122.10986328]
[114.57167816 115.18363190]
[101.26651764 108.25740051]
[98.54109192 109.18801880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 48]
[5 47]
[6 46]
[8 44]
[9 43]
[10 42]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[49 70]
[50 69]
[51 68]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
