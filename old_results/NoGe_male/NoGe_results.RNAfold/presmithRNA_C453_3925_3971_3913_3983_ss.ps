%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCUUCUUUUAUUGGUUAGCUUGU\
) } def
/len { sequence length } bind def

/coor [
[144.57344055 238.16574097]
[143.70294189 223.12118530]
[146.32601929 208.28149414]
[152.30120850 194.44699097]
[161.30627441 182.36370850]
[151.66447449 170.87304688]
[142.02265930 159.38238525]
[132.38084412 147.89170837]
[122.73902130 136.40104675]
[112.84883881 125.12345123]
[102.71498108 114.06429291]
[89.43927765 109.67711639]
[86.22585297 96.06956482]
[76.09200287 85.01040649]
[65.95815277 73.95124054]
[55.82429504 62.89208221]
[45.45159912 52.05662155]
[34.84499741 41.45001984]
[30.33246613 40.62913132]
[26.66383362 38.62322235]
[24.10598183 35.83798599]
[22.76797104 32.72359467]
[22.60028648 29.71976089]
[23.41187668 27.20464706]
[15.35238266 14.55377483]
[7.29288816 1.90290356]
[-8.18908215 -1.27264857]
[-16.82117081 -14.51132679]
[-13.48211098 -29.95885849]
[-0.15290911 -38.45049667]
[15.25845623 -34.94830322]
[23.60869598 -21.53006744]
[19.94375992 -6.15659046]
[28.00325394 6.49428129]
[36.06274796 19.14515305]
[45.45159912 30.84342003]
[56.05820084 41.45001984]
[63.23822784 44.03151321]
[66.88345337 52.75822830]
[77.01731110 63.81739044]
[87.15116119 74.87654877]
[97.28501892 85.93570709]
[110.56072235 90.32288361]
[113.77414703 103.93043518]
[123.90799713 114.98959351]
[132.28379822 119.38153839]
[134.22969055 126.75923157]
[143.87150574 138.24989319]
[153.51332092 149.74057007]
[163.15513611 161.23123169]
[172.79695129 172.72189331]
[186.26036072 165.95187378]
[200.92228699 162.46980286]
[215.99200439 162.46345520]
[230.65684509 165.93319702]
[244.12596130 172.69189453]
[255.67294312 182.37506104]
[264.67510986 194.46049500]
[270.64697266 208.29644775]
[273.26647949 223.13674927]
[272.39236450 238.18110657]
[268.07177734 252.61819458]
[260.53768921 265.66940308]
[250.19642639 276.63095093]
[237.60568237 284.91165161]
[223.44447327 290.06494141]
[208.47645569 291.81292725]
[193.50886536 290.06134033]
[179.34889221 284.90463257]
[166.76014709 276.62091064]
[156.42152405 265.65689087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 45]
[11 44]
[13 42]
[14 41]
[15 40]
[16 39]
[17 37]
[18 36]
[24 35]
[25 34]
[26 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
