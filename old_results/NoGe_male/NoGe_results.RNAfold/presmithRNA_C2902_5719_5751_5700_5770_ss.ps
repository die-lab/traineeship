%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUGCUGGCUUUAAGCGCCAGCCAUAGGCUGUGUUGCCUUUUUAGUAUAUGUUUUCCUUUUUUGGGGUU\
) } def
/len { sequence length } bind def

/coor [
[90.26703644 113.05332947]
[86.71916962 110.49504089]
[72.41341400 115.00563049]
[58.10765839 119.51622009]
[50.58744049 125.25115967]
[43.07860947 123.89678955]
[28.58972168 127.77907562]
[14.10083485 131.66136169]
[-0.38805255 135.54364014]
[-14.87693977 139.42593384]
[-29.36582756 143.30821228]
[-35.81013489 157.55619812]
[-49.92749405 164.28182983]
[-65.05212402 160.30947876]
[-74.04263306 147.51475525]
[-72.65398407 131.93894958]
[-61.54184723 120.93647766]
[-45.95303726 119.70236969]
[-33.24811172 128.81932068]
[-18.75922585 124.93704224]
[-4.27033806 121.05475616]
[10.21854877 117.17247009]
[24.70743561 113.29018402]
[39.19632339 109.40789795]
[53.59707260 105.21046448]
[67.90282440 100.69987488]
[82.20858002 96.18929291]
[90.26807404 83.53842163]
[88.31018066 68.66674805]
[86.35228729 53.79507065]
[84.39439392 38.92340088]
[71.70500946 29.50240898]
[69.47659302 13.85601234]
[79.03121185 1.26694214]
[94.70029449 -0.79593152]
[107.18764496 8.89125824]
[109.08473969 24.58127403]
[99.26606750 36.96550751]
[101.22396088 51.83718109]
[103.18185425 66.70885468]
[105.13974762 81.58052826]
[105.10858917 66.58055878]
[110.65077972 52.64197159]
[120.97344208 41.75884247]
[134.59982300 35.48812103]
[149.58049011 34.72690201]
[163.77230835 39.58409119]
[175.14497375 49.36481094]
[182.07150269 62.66981506]
[183.56097412 77.59568024]
[179.40029907 92.00709534]
[170.18472290 103.84233856]
[157.23262024 111.40824890]
[142.39694214 113.62244415]
[127.80009460 110.16815186]
[115.52909088 101.53826904]
[126.58824921 111.67211914]
[137.64741516 121.80597687]
[148.70657349 131.93983459]
[164.48289490 131.00015259]
[176.24728394 141.55357361]
[177.02011108 157.33895874]
[166.34288025 168.99110413]
[150.55021667 169.59700012]
[139.01161194 158.79718018]
[138.57272339 142.99899292]
[127.51355743 132.86512756]
[116.45439911 122.73128510]
[105.39524078 112.59742737]
[102.04928589 114.20164490]
[98.23449707 114.88902283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[28 41]
[29 40]
[30 39]
[31 38]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
