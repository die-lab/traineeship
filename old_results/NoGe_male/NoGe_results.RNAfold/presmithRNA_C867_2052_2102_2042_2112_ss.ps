%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACGUUCGGGUUUUGGUUACUGCUGCUGAUGUCUUACACUCCUGGACUGUUCCUUGCUUAGGGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[82.93027496 124.24359894]
[74.92453003 115.82239532]
[70.76965332 104.97132111]
[55.82673264 103.66398621]
[40.88381195 102.35665131]
[25.94089127 101.04931641]
[10.99797058 99.74198151]
[1.85552478 102.16251373]
[-4.56343126 98.03772736]
[-19.43510437 96.07983398]
[-34.30677795 94.12194061]
[-42.71402740 106.81365204]
[-55.74493408 114.56494141]
[-70.78751373 115.88442230]
[-84.85347748 110.56373596]
[-95.17186737 99.70831299]
[-99.73490906 85.50816345]
[-114.67043304 92.28032684]
[-127.84369659 82.51318359]
[-125.70317841 66.25433350]
[-110.45085907 60.22948837]
[-97.77701569 70.63649750]
[-89.69418335 58.10121155]
[-76.91779327 50.28627014]
[-61.95402527 48.78742218]
[-47.76551437 53.95524597]
[-37.18480682 64.81506348]
[-32.34888458 79.25026703]
[-17.47721100 81.20816040]
[-2.60553861 83.16605377]
[12.30530643 84.79905701]
[27.24822617 86.10639954]
[42.19114685 87.41373444]
[57.13406754 88.72106934]
[72.07698822 90.02840424]
[83.18515778 75.57894135]
[100.64681244 70.35697174]
[117.86407471 76.33563232]
[128.33139038 91.25588226]
[143.31710815 90.60158539]
[158.30284119 89.94729614]
[173.28855896 89.29300690]
[188.27427673 88.63871765]
[203.26000977 87.98442841]
[218.24572754 87.33013153]
[233.23146057 86.67584229]
[248.21717834 86.02155304]
[261.66671753 77.68965912]
[274.71936035 84.86444092]
[283.17120361 71.85113525]
[297.66992188 66.32244873]
[312.64050293 70.40428925]
[322.32644653 82.52709198]
[323.00329590 98.02939606]
[314.41079712 110.95024872]
[299.85293579 116.32132721]
[284.92752075 112.07733154]
[275.37365723 99.85016632]
[262.99600220 108.13525391]
[248.87145996 101.00727844]
[233.88574219 101.66156769]
[218.90002441 102.31585693]
[203.91429138 102.97014618]
[188.92857361 103.62444305]
[173.94285583 104.27873230]
[158.95712280 104.93302155]
[143.97140503 105.58731079]
[128.98568726 106.24160004]
[124.36144257 116.90110779]
[115.99598694 124.96508789]
[105.17400360 129.19515991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[9 30]
[10 29]
[11 28]
[17 22]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
