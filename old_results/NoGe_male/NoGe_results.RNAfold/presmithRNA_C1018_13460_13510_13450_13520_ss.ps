%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:48 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGGAGCCGGCUUGAGGCAUCUGAUUGUUGCUCAGAGGGGGCGCGCGCGUGCGCGCUUACCCAGGGGCU\
) } def
/len { sequence length } bind def

/coor [
[101.51278687 132.84895325]
[85.02523041 129.27624512]
[72.47895813 117.99817657]
[58.38356781 123.12847900]
[44.28818130 128.25877380]
[30.19279099 133.38908386]
[19.87118340 145.37969971]
[5.26514673 142.46200562]
[-8.83024216 147.59230042]
[-22.92563248 152.72261047]
[-28.10362244 167.47802734]
[-41.58108521 175.40847778]
[-56.99437332 172.76943970]
[-67.06580353 160.80697632]
[-67.03995514 145.16941833]
[-56.92903519 133.24032593]
[-41.50710678 130.65225220]
[-28.05593300 138.62721252]
[-13.96054459 133.49691772]
[0.13484475 128.36660767]
[9.44825554 116.74294281]
[25.06248856 119.29369354]
[39.15787888 114.16339111]
[53.25326538 109.03308868]
[67.34865570 103.90278625]
[68.36578369 91.02122498]
[74.26752472 79.52606964]
[84.14259338 71.19228363]
[96.46619415 67.30666351]
[109.33544922 68.46920013]
[120.76322174 74.50038147]
[128.98495483 84.46893311]
[143.47384644 80.58664703]
[157.96273804 76.70436096]
[172.45162964 72.82207489]
[177.90689087 60.30297852]
[189.46163940 53.40028763]
[202.67913818 54.49803925]
[212.63722229 62.95795441]
[227.28166199 59.71136093]
[241.92610168 56.46476746]
[256.41497803 52.58248138]
[270.72073364 48.07189178]
[285.02648926 43.56130600]
[299.33224487 39.05072021]
[313.63800049 34.54013443]
[327.94375610 30.02954483]
[342.24951172 25.51895905]
[352.92364502 13.06927013]
[368.99047852 16.35404587]
[373.92178345 31.99419212]
[362.64468384 43.90046310]
[346.76010132 39.82471466]
[332.45434570 44.33530045]
[318.14859009 48.84588623]
[303.84283447 53.35647202]
[289.53707886 57.86706161]
[275.23132324 62.37764740]
[260.92556763 66.88823700]
[257.85122681 70.91648865]
[252.08317566 72.85898590]
[245.17269897 71.10920715]
[230.52825928 74.35579681]
[215.88381958 77.60239410]
[207.61416626 92.08145905]
[191.14549255 96.32968903]
[176.33390808 87.31095886]
[161.84501648 91.19324493]
[147.35614014 95.07553101]
[132.86724854 98.95781708]
[129.05877686 115.39251709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[32 70]
[33 69]
[34 68]
[35 67]
[39 64]
[40 63]
[41 62]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
