%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGUGGCACGUGAGUUGAGUUCAGACCGGCGUGAGCCAGGUUGGUUUCUAUCUUUUUUAUUUUGUUGGA\
) } def
/len { sequence length } bind def

/coor [
[141.58009338 360.99151611]
[138.33351135 346.34707642]
[135.08691406 331.70263672]
[131.84031677 317.05819702]
[128.59371948 302.41375732]
[125.34712982 287.76931763]
[122.10053253 273.12487793]
[118.85393524 258.48043823]
[105.43221283 255.17143250]
[94.73748779 246.30767822]
[88.93935394 233.61180115]
[89.24681091 219.59118652]
[95.65668488 207.04273987]
[106.94264984 198.49499512]
[104.33792877 183.72288513]
[92.71119690 177.76028442]
[86.63888550 165.96897888]
[88.59432983 152.65225220]
[98.07282257 142.82139587]
[96.11492920 127.94971466]
[94.15704346 113.07804108]
[85.79859924 101.86965179]
[90.97129059 88.87985229]
[89.01339722 74.00817871]
[87.05550385 59.13650513]
[82.71355438 50.73466873]
[85.35124969 43.57510376]
[84.04391479 28.63218117]
[82.73657990 13.68926144]
[81.10357666 -1.22158396]
[79.14568329 -16.09325600]
[77.18778992 -30.96492958]
[66.78078461 -43.63877106]
[72.80563354 -58.89109421]
[89.06448364 -61.03161240]
[98.83162689 -47.85834503]
[92.05946350 -32.92282104]
[94.01735687 -18.05114937]
[95.97525024 -3.17947674]
[100.10003662 3.23947930]
[97.67949677 12.38192463]
[98.98683167 27.32484627]
[100.29417419 42.26776505]
[101.92717743 57.17861176]
[103.88507080 72.05028534]
[105.84295654 86.92195892]
[114.20140076 98.13034821]
[109.02870941 111.12014771]
[110.98660278 125.99182129]
[112.94449615 140.86349487]
[126.94486237 151.09629822]
[129.32229614 167.93708801]
[119.11004639 181.11816406]
[121.71476746 195.89027405]
[137.18418884 201.28810120]
[147.82963562 213.62025452]
[150.87574768 229.52980042]
[145.59934998 244.74668884]
[133.49838257 255.23385620]
[136.74497986 269.87829590]
[139.99156189 284.52273560]
[143.23815918 299.16717529]
[146.48475647 313.81161499]
[149.73135376 328.45605469]
[152.97795105 343.10049438]
[156.22453308 357.74493408]
[169.68672180 366.02410889]
[173.27033997 381.41674805]
[164.84928894 394.79067993]
[149.41961670 398.21133423]
[136.13549805 389.64935303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[14 54]
[15 53]
[19 50]
[20 49]
[21 48]
[23 46]
[24 45]
[25 44]
[27 43]
[28 42]
[29 41]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
