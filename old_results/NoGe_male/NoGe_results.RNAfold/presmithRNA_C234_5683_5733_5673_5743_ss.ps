%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUUUUGGCUAAUGUGGCAGAUUUAAUGUGCUGGCUUUAAGCGCCAGCCAUAGGCUGUGUUGCCUUUU\
) } def
/len { sequence length } bind def

/coor [
[94.05417633 172.34257507]
[79.40980530 169.09568787]
[68.13274384 159.20487976]
[63.00369644 145.10903931]
[65.28737640 130.28388977]
[74.42067719 118.38504028]
[88.15031433 112.34667969]
[73.50587463 115.59326935]
[58.86143112 118.83986664]
[44.21699142 122.08645630]
[32.41859436 132.62725830]
[18.31835365 127.82804871]
[10.03916454 141.29023743]
[-5.35347223 144.87385559]
[-18.72737885 136.45280457]
[-22.14805222 121.02313232]
[-13.58606911 107.73900604]
[1.87889779 104.48165894]
[15.07175827 113.18360901]
[25.82268524 102.87503052]
[40.97039795 107.44201660]
[55.61483765 104.19542694]
[70.25927734 100.94882965]
[84.90371704 97.70223999]
[86.15562439 93.00444031]
[88.85346985 88.86882782]
[92.76713562 85.73487091]
[97.53488922 83.95294952]
[102.69663239 83.74559784]
[109.62286377 70.44043732]
[116.54909515 57.13527298]
[117.81147766 47.76245880]
[124.07870483 43.41060257]
[131.57870483 30.42022133]
[139.07870483 17.42984009]
[146.57870483 4.43945837]
[154.07870483 -8.55092239]
[161.57870483 -21.54130363]
[156.06068420 -36.17295837]
[161.28741455 -50.91118240]
[174.79103088 -58.79703140]
[190.19551086 -56.10705185]
[200.22734070 -44.11137009]
[200.14979553 -28.47397995]
[189.99949646 -16.57837677]
[174.56909180 -14.04130363]
[167.06909180 -1.05092263]
[159.56909180 11.93945885]
[152.06909180 24.92984009]
[144.56909180 37.92021942]
[137.06909180 50.91060257]
[129.85426331 64.06150055]
[122.92802429 77.36666870]
[116.00180054 90.67182922]
[119.24839020 105.31626892]
[131.14869690 114.44769287]
[143.04899597 123.57910919]
[154.94929504 132.71052551]
[170.58369446 130.39942932]
[183.22309875 139.88737488]
[185.36877441 155.54533386]
[175.74772644 168.08370972]
[160.06796265 170.06372070]
[147.63200378 160.31065369]
[145.81787109 144.61083984]
[133.91757202 135.47941589]
[122.01727295 126.34799194]
[110.11697388 117.21656799]
[120.00887299 128.49266052]
[123.25718689 143.13671875]
[119.06095123 157.53781128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[12 19]
[29 54]
[30 53]
[31 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
