%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACACCUCAGUUUUUCGUGCUGGUGAUACAACUGUUUUUGUUGGGAGAGGUUACUUUAUUAGUAUAAUG\
) } def
/len { sequence length } bind def

/coor [
[-21.65479088 281.41085815]
[-31.78864479 292.47000122]
[-41.92249680 303.52917480]
[-52.05635071 314.58834839]
[-62.19020462 325.64749146]
[-61.25052261 341.42382812]
[-71.80395508 353.18820190]
[-87.58934021 353.96102905]
[-99.24147797 343.28381348]
[-99.84737396 327.49114990]
[-89.04755402 315.95254517]
[-73.24936676 315.51364136]
[-63.11551285 304.45446777]
[-52.98165894 293.39532471]
[-42.84780502 282.33615112]
[-32.71395111 271.27700806]
[-35.29690933 252.25653076]
[-23.26192284 236.92984009]
[-3.59059215 234.86685181]
[5.01305437 222.57955933]
[13.61670113 210.29228210]
[22.22034836 198.00500488]
[30.82399368 185.71772766]
[39.42763901 173.43045044]
[48.03128815 161.14315796]
[56.63493347 148.85588074]
[65.23857880 136.56860352]
[73.84222412 124.28131866]
[65.92960358 110.63108063]
[64.67530060 94.90322113]
[70.32443237 80.17142487]
[81.77301788 69.31468201]
[96.78366089 64.45471954]
[112.42286682 66.54131317]
[120.48236084 53.89043808]
[121.37162018 38.09424210]
[134.73554993 31.51741791]
[142.79504395 18.86654663]
[150.85453796 6.21567488]
[158.91403198 -6.43519688]
[159.08839417 -22.83341789]
[173.50769043 -30.64467621]
[187.33859253 -21.83342171]
[186.35304260 -5.46391487]
[171.56489563 1.62429738]
[163.50540161 14.27516937]
[155.44590759 26.92604065]
[147.38641357 39.57691193]
[147.07363892 54.46823502]
[133.13323975 61.94993210]
[125.07373810 74.60080719]
[132.91046143 86.19011688]
[135.69036865 99.90137482]
[132.98628235 113.62778473]
[125.21373749 125.26023102]
[113.56698608 133.01133728]
[99.83561707 135.69012451]
[86.12950897 132.88496399]
[77.52586365 145.17224121]
[68.92221069 157.45953369]
[60.31856918 169.74681091]
[51.71492004 182.03408813]
[43.11127472 194.32136536]
[34.50762939 206.60865784]
[25.90398216 218.89593506]
[17.30033493 231.18321228]
[8.69668865 243.47048950]
[13.31069374 253.69239807]
[13.08876324 264.82269287]
[8.14476013 274.70498657]
[-0.49945262 281.45504761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[34 51]
[35 50]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
