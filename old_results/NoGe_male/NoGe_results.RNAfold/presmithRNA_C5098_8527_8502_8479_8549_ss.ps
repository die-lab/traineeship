%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGUUCGACUCACUCGGUAGCUUUAGCGGACGGAACGUAGUUCUUCCUCCAAUUUACAAGAUUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[86.68973541 131.14762878]
[79.51721954 126.97765350]
[68.02655029 136.61946106]
[56.53588486 146.26127625]
[45.04521942 155.90309143]
[33.55455017 165.54490662]
[33.73548126 181.18144226]
[23.78318214 193.24319458]
[8.39682388 196.03495789]
[-5.15862560 188.23857117]
[-10.48269749 173.53521729]
[-5.06152821 158.86740112]
[8.54517269 151.16079712]
[23.91273689 154.05424500]
[35.40340424 144.41242981]
[46.89406967 134.77061462]
[58.38473511 125.12879944]
[69.87540436 115.48698425]
[65.86170197 107.45865631]
[64.02108002 98.39229584]
[64.61906433 88.88406372]
[67.75590515 79.59668732]
[73.35043335 71.21328735]
[62.29127121 61.07942963]
[46.17245483 58.06019974]
[40.98375320 42.50354767]
[52.06285477 30.41282654]
[68.01253510 34.22593307]
[72.42512512 50.02027130]
[83.48428345 60.15412521]
[98.12872314 56.90753174]
[103.86898041 43.04933548]
[109.60923004 29.19114494]
[110.04991150 19.74397087]
[115.91400909 14.86244965]
[122.25328064 1.26783288]
[128.59255981 -12.32678413]
[134.93182373 -25.92140007]
[141.27110291 -39.51601791]
[142.48516846 -56.42644119]
[159.07080078 -59.94109344]
[167.03947449 -44.97657776]
[154.86572266 -33.17674255]
[148.52644348 -19.58212662]
[142.18716431 -5.98751020]
[135.84790039 7.60710669]
[129.50862122 21.20172310]
[123.46742249 34.93139648]
[117.72717285 48.78958893]
[111.98691559 62.64778137]
[132.42060852 83.12284088]
[132.35621643 110.02062225]
[145.34660339 117.52062225]
[158.33699036 125.02062225]
[171.32736206 132.52061462]
[184.31774902 140.02061462]
[197.30812073 147.52061462]
[210.29850769 155.02061462]
[227.03877258 157.70390320]
[229.09451294 174.53276062]
[213.49243164 181.16685486]
[202.79850769 168.01100159]
[189.80812073 160.51100159]
[176.81774902 153.01100159]
[163.82736206 145.51100159]
[150.83699036 138.01100159]
[137.84660339 130.51100159]
[124.85622406 123.01100159]
[118.51678467 128.36312866]
[111.06643677 132.01362610]
[102.95217133 133.74348450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[23 30]
[24 29]
[31 50]
[32 49]
[33 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
