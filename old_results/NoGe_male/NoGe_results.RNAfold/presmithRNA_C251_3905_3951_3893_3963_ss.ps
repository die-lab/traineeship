%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAAGCGAUGUUCCGCGGUAUAGUUUACCUCU\
) } def
/len { sequence length } bind def

/coor [
[105.96463776 216.92037964]
[104.58714294 201.98376465]
[111.96479797 188.92350769]
[125.46875000 182.39334106]
[140.28718567 184.72012329]
[132.78718567 171.72973633]
[125.28718567 158.73934937]
[117.78718567 145.74897766]
[104.72285461 138.59548950]
[104.52346802 122.77553558]
[97.02346802 109.78515625]
[90.38287354 104.74536896]
[89.49385071 96.06047821]
[82.56761932 82.75531769]
[75.64139557 69.45015717]
[59.94334412 60.10982513]
[61.02806854 42.73072052]
[53.52806854 29.74033928]
[45.74646759 16.91666031]
[37.68697357 4.26578856]
[22.31954575 3.19417119]
[10.66599178 -6.60624027]
[7.06047726 -21.21665573]
[12.68223858 -34.98378372]
[4.62274456 -47.63465500]
[-3.43674970 -60.28552628]
[-11.49624348 -72.93640137]
[-26.28438950 -80.02461243]
[-27.26993561 -96.39411926]
[-13.43903446 -105.20537567]
[0.98026675 -97.39411163]
[1.15462792 -80.99589539]
[9.21412182 -68.34502411]
[17.27361679 -55.69414902]
[25.33311081 -43.04327774]
[40.18622589 -42.32008362]
[51.90400314 -32.87775040]
[55.86118698 -18.17420959]
[50.33784485 -3.79370546]
[58.39733887 8.85716629]
[64.84843445 12.93150711]
[66.51844788 22.24033928]
[74.01844788 35.23072052]
[85.78951263 38.77275848]
[92.08122253 49.80184555]
[88.94655609 62.52392960]
[95.87278748 75.82909393]
[102.79901123 89.13425446]
[110.01384735 102.28515625]
[117.51384735 115.27553558]
[131.11462402 123.35818481]
[130.77757263 138.24897766]
[138.27757263 151.23934937]
[145.77757263 164.22973633]
[153.27757263 177.22012329]
[162.91938782 188.71078491]
[174.41004944 198.35260010]
[185.90071106 207.99441528]
[197.39138794 217.63623047]
[213.43438721 217.67601013]
[223.29264832 230.33279419]
[219.40376282 245.89736938]
[204.75094604 252.42993164]
[190.57458496 244.91926575]
[187.74957275 229.12689209]
[176.25889587 219.48507690]
[164.76823425 209.84326172]
[153.27757263 200.20144653]
[152.99580383 215.19880676]
[144.21989441 227.36364746]
[130.07695007 232.36134338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[10 50]
[11 49]
[13 48]
[14 47]
[15 46]
[17 43]
[18 42]
[19 40]
[20 39]
[24 35]
[25 34]
[26 33]
[27 32]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
