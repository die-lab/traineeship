%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCUUCACGCCGGAUGUACGGAUUACGUUGAUGGUGUAAAAUAAGGAAAGCCUUGUUUCCUGAAGUCA\
) } def
/len { sequence length } bind def

/coor [
[72.15264893 230.53642273]
[58.39697266 222.28045654]
[56.41812515 206.35990906]
[67.73411560 194.98765564]
[69.04145050 180.04473877]
[70.34878540 165.10182190]
[71.65612030 150.15890503]
[72.96345520 135.21598816]
[74.27079010 120.27306366]
[67.93151855 106.67844391]
[55.64423752 98.07479858]
[43.35695648 89.47115326]
[31.06967735 80.86750031]
[18.78239632 72.26385498]
[6.49511623 63.66020966]
[-5.02094030 69.37631226]
[-17.80336380 69.52293396]
[-29.31457329 64.13469696]
[-37.29701996 54.33869553]
[-40.21586990 42.11936188]
[-37.55381775 29.91662407]
[-49.04448318 20.27480888]
[-60.53514862 10.63299561]
[-76.57815552 10.59321308]
[-86.43642426 -2.06356692]
[-82.54753876 -17.62814522]
[-67.89471436 -24.16071129]
[-53.71835327 -16.65003777]
[-50.89333725 -0.85767144]
[-39.40266800 8.78414249]
[-27.91200256 18.42595673]
[-11.28234482 13.29127789]
[5.32328463 18.99375916]
[15.46537304 33.51288605]
[15.09876251 51.37292862]
[27.38604355 59.97657776]
[39.67332458 68.58022308]
[51.96060562 77.18386841]
[64.24788666 85.78751373]
[76.53516388 94.39116669]
[95.81412506 78.90028381]
[115.30938721 88.92389679]
[129.95382690 85.67729950]
[144.59826660 82.43070221]
[159.24270630 79.18411255]
[173.88714600 75.93751526]
[188.53158569 72.69092560]
[203.17602539 69.44432831]
[217.82046509 66.19773102]
[229.53904724 54.72573471]
[245.25843811 59.39832687]
[248.80786133 75.40874481]
[236.53598022 86.28684998]
[221.06706238 80.84217834]
[206.42262268 84.08876801]
[191.77818298 87.33536530]
[177.13374329 90.58195496]
[162.48930359 93.82855225]
[147.84486389 97.07514954]
[133.20042419 100.32173920]
[118.55598450 103.56833649]
[116.07064819 112.24390411]
[109.52381897 119.28772736]
[99.94470215 122.81832123]
[89.21371460 121.58039856]
[87.90637970 136.52331543]
[86.59904480 151.46623230]
[85.29170227 166.40916443]
[83.98436737 181.35208130]
[82.67703247 196.29499817]
[91.84633636 209.45947266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[21 31]
[22 30]
[23 29]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
