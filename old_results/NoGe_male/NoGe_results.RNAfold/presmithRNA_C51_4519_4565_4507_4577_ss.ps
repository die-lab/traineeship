%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUAUUGGUCUCGAAACUCUGUGAUCUACUCCUUUUACGUUUAGGACUUUUCUUGUGCUGUUGCAUUAG\
) } def
/len { sequence length } bind def

/coor [
[100.51958466 134.08186340]
[90.55642700 132.75152588]
[81.41448212 128.57310486]
[73.88874054 121.90994263]
[68.63365173 113.34149170]
[66.10618591 103.61286163]
[66.52613831 93.57005310]
[69.85699463 84.08639526]
[75.80910492 75.98658752]
[67.74961090 63.33571625]
[59.69011307 50.68484497]
[51.63061905 38.03397369]
[43.57112503 25.38310242]
[30.98614693 21.73676300]
[24.58053207 10.77343750]
[27.39856911 -1.19162261]
[19.89856911 -14.18200397]
[12.39856815 -27.17238426]
[4.89856815 -40.16276550]
[-0.20625992 -43.06314850]
[-3.16668582 -47.30828857]
[-3.83943677 -51.75037766]
[-2.60357404 -55.37560654]
[-8.34382534 -69.23379517]
[-14.08407688 -83.09198761]
[-19.82432938 -96.95018768]
[-35.06208801 -98.87534332]
[-47.28608704 -108.17424011]
[-53.20812988 -122.34551239]
[-51.23521805 -137.57716370]
[-41.89805222 -149.77195740]
[-27.70828629 -155.64955139]
[-12.48289394 -153.62890625]
[-0.31743068 -144.25355530]
[5.51565599 -130.04544067]
[3.44729495 -114.82645416]
[-5.96613550 -102.69043732]
[-0.22588401 -88.83224487]
[5.51436758 -74.97405243]
[11.25461864 -61.11585617]
[17.88894844 -47.66276550]
[25.38894844 -34.67238617]
[32.88895035 -21.68200302]
[40.38895035 -8.69162273]
[55.98205948 -0.94146651]
[56.22199631 17.32360840]
[64.28149414 29.97447968]
[72.34098816 42.62535095]
[80.40048218 55.27622223]
[88.45997620 67.92709351]
[108.88265991 67.09191895]
[126.11125946 78.09005737]
[133.95059204 96.96672058]
[129.58174133 116.93410492]
[140.64089966 127.06796265]
[156.04269409 130.68669128]
[160.19898987 144.98963928]
[171.25814819 155.12348938]
[182.31730652 165.25735474]
[193.37646484 175.39120483]
[209.49528503 178.41043091]
[214.68399048 193.96708679]
[203.60488892 206.05780029]
[187.65519714 202.24470520]
[183.24261475 186.45036316]
[172.18345642 176.31651306]
[161.12429810 166.18266296]
[150.06512451 156.04879761]
[135.45436096 153.15492249]
[130.50704956 138.12712097]
[119.44789124 127.99327087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[16 44]
[17 43]
[18 42]
[19 41]
[23 40]
[24 39]
[25 38]
[26 37]
[54 71]
[55 70]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
