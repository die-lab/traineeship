%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGGACGAGAAGACCCUAUUAAGCUUUACCUUUGUUUAGUGGGCCUGGUCUUUUAUGUAUUUAGGCUU\
) } def
/len { sequence length } bind def

/coor [
[138.37022400 213.14898682]
[139.11921692 202.04170227]
[144.60655212 192.26083374]
[137.10655212 179.27044678]
[129.60655212 166.28005981]
[122.10655975 153.28968811]
[114.60655975 140.29930115]
[107.10655975 127.30892181]
[99.60655975 114.31854248]
[87.59510040 107.16197205]
[87.40306091 93.18145752]
[79.90306091 80.19107819]
[70.87497711 79.52343750]
[63.02798080 75.20592499]
[57.74681854 68.09194946]
[55.92513275 59.51977921]
[57.81497192 51.06109619]
[62.99525833 44.23291016]
[57.86495590 30.13752174]
[52.73465347 16.04213142]
[47.60435104 1.94674253]
[42.47404861 -12.14864635]
[37.34375000 -26.24403572]
[32.21344757 -40.33942413]
[27.08314323 -54.43481445]
[21.95284081 -68.53020477]
[16.82254028 -82.62559509]
[1.75190985 -85.92402649]
[-9.12685204 -96.86277008]
[-12.34237385 -111.95130920]
[-6.86859322 -126.37493896]
[5.54782629 -135.53114319]
[20.94485092 -136.49821472]
[34.40934372 -128.96754456]
[41.64483643 -115.34215546]
[40.34251022 -99.96985626]
[30.91792870 -87.75589752]
[36.04822922 -73.66050720]
[41.17853165 -59.56511688]
[46.30883408 -45.46972656]
[51.43913651 -31.37433815]
[56.56943893 -17.27894974]
[61.69974136 -3.18355966]
[66.83004761 10.91182995]
[71.96034241 25.00721931]
[77.09064484 39.10260773]
[95.25708008 50.60063171]
[92.89344025 72.69107819]
[100.39344025 85.68145752]
[112.40489960 92.83802795]
[112.59693909 106.81854248]
[120.09693909 119.80892181]
[127.59693909 132.79930115]
[135.09693909 145.78968811]
[142.59693909 158.78005981]
[150.09693909 171.77044678]
[157.59693909 184.76083374]
[177.01361084 188.53044128]
[187.66699219 204.84771729]
[183.43612671 223.57069397]
[192.56755066 235.47099304]
[208.26736450 237.28512573]
[218.02043152 249.72108459]
[216.04042053 265.40084839]
[203.50204468 275.02191162]
[187.84408569 272.87622070]
[178.35614014 260.23681641]
[180.66725159 244.60241699]
[171.53582764 232.70211792]
[160.83552551 234.18444824]
[150.45713806 230.90234375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[11 49]
[12 48]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
