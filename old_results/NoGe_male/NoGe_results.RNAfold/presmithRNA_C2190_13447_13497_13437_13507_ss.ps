%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUGGGUUCUGGGUAGGAGCCGGCUUGAGGCAUCUGAUUGUUGCUCAGAGGGGGCGCGCGCGUGCGCGC\
) } def
/len { sequence length } bind def

/coor [
[88.96415710 122.66906738]
[79.74589539 116.49706268]
[73.80343628 106.66957092]
[72.53431702 94.86231232]
[58.04542923 98.74459839]
[46.71804810 109.79000854]
[32.42188644 105.61040497]
[17.93299866 109.49269104]
[3.44411230 113.37497711]
[-11.04477501 117.25726318]
[-25.53366280 121.13954926]
[-40.02254868 125.02183533]
[-49.25702667 138.14067078]
[-65.27932739 138.95646667]
[-75.79850769 126.84340668]
[-72.74516296 111.09358978]
[-58.46154785 103.78894043]
[-43.90483475 110.53295135]
[-29.41594887 106.65066528]
[-14.92706108 102.76837921]
[-0.43817350 98.88609314]
[14.05071354 95.00380707]
[28.53960037 91.12152100]
[38.83064270 80.35380554]
[54.16314316 84.25571442]
[68.65203094 80.37342834]
[79.02472687 69.53796387]
[82.27132416 54.89352798]
[85.51791382 40.24908829]
[88.76451111 25.60464668]
[92.01110840 10.96020699]
[90.80460358 1.58003330]
[95.73194885 -4.24561548]
[99.61423492 -18.73450279]
[95.71231842 -34.06700516]
[106.48004150 -44.35804749]
[99.73603058 -58.91475677]
[107.04067993 -73.19837189]
[122.79049683 -76.25171661]
[134.90356445 -65.73253632]
[134.08776855 -49.71023560]
[120.96892548 -40.47576141]
[125.14852142 -26.17959976]
[114.10311890 -14.85221672]
[110.22083282 -0.36332965]
[106.65554810 14.20680141]
[103.40895081 28.85124207]
[100.16235352 43.49568176]
[96.91576385 58.14012146]
[93.66916656 72.78456116]
[104.19970703 73.14247894]
[113.55879974 77.31790924]
[120.45917511 84.50018311]
[124.04193115 93.48376465]
[123.98040009 102.86699677]
[120.49938965 111.26975250]
[130.63323975 122.32891083]
[140.76708984 133.38807678]
[150.90095520 144.44723511]
[161.03480530 155.50639343]
[171.16865540 166.56555176]
[186.96299744 170.97814941]
[190.77609253 186.92782593]
[178.68537903 198.00692749]
[163.12872314 192.81822205]
[160.10949707 176.69940186]
[149.97564697 165.64024353]
[139.84178162 154.58108521]
[129.70793152 143.52192688]
[119.57408142 132.46276855]
[109.44023132 121.40360260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 45]
[34 44]
[36 42]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
