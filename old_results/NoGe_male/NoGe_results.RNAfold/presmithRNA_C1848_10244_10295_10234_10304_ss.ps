%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUGGUUUAAGAAAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[75.34017944 138.22192383]
[67.56845093 125.39226532]
[71.79875946 111.00113678]
[85.27651215 104.41797638]
[70.63207245 101.17138672]
[55.98763275 97.92478943]
[41.34319305 94.67819214]
[26.69875336 91.43160248]
[12.05431366 88.18500519]
[-2.59012651 84.93841553]
[-11.04211712 94.62641144]
[-22.79542732 99.65348816]
[-35.49238968 99.08055115]
[-46.61597443 93.08498383]
[-53.98877716 82.91278076]
[-56.19914627 70.62020111]
[-70.50489807 66.10961151]
[-84.81065369 61.59902573]
[-99.11640930 57.08843994]
[-115.00099945 61.16419220]
[-126.27809143 49.25791931]
[-121.34677124 33.61777115]
[-105.27996063 30.33299637]
[-94.60581970 42.78268433]
[-80.30006409 47.29327011]
[-65.99431610 51.80385971]
[-51.68855667 56.31444550]
[-38.28971481 45.20672607]
[-20.76586914 44.12043381]
[-5.83957195 53.65314865]
[0.65646780 70.29397583]
[15.30090809 73.54056549]
[29.94534874 76.78716278]
[44.58978653 80.03375244]
[59.23423004 83.28034973]
[73.87866974 86.52694702]
[88.52310944 89.77353668]
[103.39478302 87.81564331]
[116.69994354 80.88941956]
[123.11005402 73.93572235]
[130.73999023 73.96562958]
[144.33460999 67.62635803]
[157.92922974 61.28708267]
[171.52383423 54.94781113]
[185.11845398 48.60853577]
[198.71307373 42.26926041]
[205.52919006 27.74617577]
[221.16641235 24.16053581]
[233.62919617 34.26293564]
[233.35716248 50.30368423]
[220.55899048 59.97768784]
[205.05235291 55.86388016]
[191.45773315 62.20315170]
[177.86311340 68.54242706]
[164.26849365 74.88169861]
[150.67387390 81.22097778]
[137.07926941 87.56024933]
[123.62617493 94.19458008]
[110.32100677 101.12081146]
[113.88732910 104.47495270]
[116.35830688 109.26395416]
[124.41780090 121.91482544]
[132.47729492 134.56570435]
[147.26544189 141.65391541]
[148.25099182 158.02342224]
[134.42008972 166.83467102]
[120.00078583 159.02340698]
[119.82642365 142.62519836]
[111.76692963 129.97431946]
[103.70743561 117.32344818]
[102.13072968 132.24035645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[16 27]
[17 26]
[18 25]
[19 24]
[38 59]
[39 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
