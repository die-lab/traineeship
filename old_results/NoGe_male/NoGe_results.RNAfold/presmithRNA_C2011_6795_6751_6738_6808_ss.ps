%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCCUGAUUUUCAGGCAAUGGGGAGUCCCCCACUCUAUAGCGUCCAAGGCUAUUGUUUUGGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[74.52353668 123.58663177]
[67.91854095 113.27252197]
[53.14642715 115.87725067]
[38.37431335 118.48197174]
[23.60219574 121.08669281]
[8.83007908 123.69141388]
[-5.94203711 126.29614258]
[-20.43092346 130.17842102]
[-34.52631378 135.30873108]
[-48.62170410 140.43902588]
[-62.71709061 145.56933594]
[-76.81248474 150.69963074]
[-89.62842560 161.79862976]
[-103.84148407 152.55604553]
[-98.89466858 136.33984375]
[-81.94278717 136.60424805]
[-67.84739685 131.47393799]
[-53.75200653 126.34364319]
[-39.65661621 121.21334076]
[-25.56122589 116.08303833]
[-24.30249596 113.23846436]
[-21.66065407 110.81273651]
[-17.82854462 109.41251373]
[-13.24543095 109.54502106]
[-8.54675961 111.52402496]
[6.22535658 108.91930389]
[20.99747276 106.31457520]
[35.76958847 103.70985413]
[50.54170609 101.10513306]
[65.31381989 98.50041199]
[70.55226135 81.60950470]
[83.43112183 69.49013519]
[100.60888672 65.28675842]
[117.62867737 70.08997345]
[130.07458496 82.65354919]
[144.38034058 78.14296722]
[158.68609619 73.63237762]
[166.33230591 58.06779861]
[182.50440979 52.80212021]
[197.25856018 60.57035065]
[207.58016968 48.57972717]
[222.18620300 51.49742889]
[236.28158569 46.36712646]
[250.37698364 41.23682404]
[264.47238159 36.10652161]
[278.56774902 30.97622108]
[283.74575806 16.22080040]
[297.22320557 8.29035282]
[312.63650513 10.92939186]
[322.70794678 22.89184380]
[322.68209839 38.52940750]
[312.57116699 50.45849991]
[297.14923096 53.04656982]
[283.69805908 45.07160950]
[269.60266113 50.20191193]
[255.50727844 55.33221436]
[241.41189575 60.46251678]
[227.31649780 65.59281921]
[218.00309753 77.21648407]
[202.38885498 74.66574097]
[198.53581238 87.15122986]
[187.97808838 95.17883301]
[174.52410889 95.56551361]
[163.19667053 87.93813324]
[148.89093018 92.44872284]
[134.58517456 96.95930481]
[133.48899841 109.15787506]
[128.22520447 120.21677399]
[119.44883728 128.75973511]
[108.25211334 133.72361755]
[96.02843475 134.49067688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[35 66]
[36 65]
[37 64]
[40 60]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
