%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAAGUACUGUGAAGGAAUGUUUUAAAGGUUUGGAAGAAAUAAGCGGUUUCUACUUUUUGUAUCAUGGUU\
) } def
/len { sequence length } bind def

/coor [
[73.82834625 319.03738403]
[61.07143021 327.71289062]
[45.64871216 328.09146118]
[32.48152542 320.05224609]
[25.77147102 306.16058350]
[27.65970421 290.84921265]
[37.54369354 279.00393677]
[52.26949692 274.40457153]
[56.15178299 259.91567993]
[60.03406906 245.42678833]
[63.91635513 230.93789673]
[67.79863739 216.44902039]
[71.68092346 201.96012878]
[75.56320953 187.47123718]
[68.95774841 169.50288391]
[82.68065643 155.03208923]
[85.28537750 140.25997925]
[87.89010620 125.48785400]
[90.49482727 110.71573639]
[85.89366913 97.51267242]
[94.73305511 86.67953491]
[97.33777618 71.90742493]
[86.73169708 60.73526001]
[84.76085663 45.63661194]
[91.97325134 32.42883301]
[105.41898346 26.07664680]
[108.02370453 11.30453110]
[99.22791290 -1.55127585]
[102.07990265 -16.49519730]
[114.39015961 -24.80141640]
[116.99488068 -39.57353210]
[119.59960175 -54.34564972]
[122.20432281 -69.11776733]
[124.80905151 -83.88987732]
[114.61947632 -95.75186157]
[114.49023438 -111.38890839]
[124.48235321 -123.41769409]
[139.87785339 -126.15858459]
[153.40745544 -118.31741333]
[158.68289185 -103.59654999]
[153.21327209 -88.94673920]
[139.58116150 -81.28515625]
[136.97644043 -66.51303864]
[134.37171936 -51.74092484]
[131.76699829 -36.96881104]
[129.16227722 -22.19669342]
[137.88923645 -10.18104649]
[135.45811462 4.83708525]
[122.79582214 13.90925407]
[120.19110107 28.68136978]
[130.65338135 39.24918365]
[132.91348267 54.12721634]
[125.89746094 67.64123535]
[112.10989380 74.51214600]
[109.50517273 89.28426361]
[114.10633087 102.48732758]
[105.26694489 113.32046509]
[102.66222382 128.09257507]
[100.05749512 142.86470032]
[97.45277405 157.63681030]
[104.41349030 166.50222778]
[105.14691925 177.52583313]
[99.64884186 186.84997559]
[90.05210114 191.35353088]
[86.16981506 205.84240723]
[82.28752899 220.33129883]
[78.40524292 234.82019043]
[74.52295685 249.30906677]
[70.64067078 263.79797363]
[66.75838470 278.28683472]
[77.21161652 289.63293457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[16 60]
[17 59]
[18 58]
[19 57]
[21 55]
[22 54]
[26 50]
[27 49]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
