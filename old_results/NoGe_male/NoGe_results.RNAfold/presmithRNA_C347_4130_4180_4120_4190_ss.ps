%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGCCCUAAAUCGGAUUUGAUAGUAAUUUUACAUUAGUAUGGUUUUCUGAAGGUUGUUUUGUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[83.65850067 275.73532104]
[68.23474121 280.14974976]
[55.25096130 270.72631836]
[54.66721344 254.69389343]
[66.93129730 244.35116577]
[61.52161026 230.47367859]
[71.53773499 218.22673035]
[74.14245605 203.45462036]
[76.74718475 188.68251038]
[71.33749390 174.80502319]
[81.35362244 162.55807495]
[83.95834351 147.78594971]
[86.56307220 133.01383972]
[89.16779327 118.24172211]
[80.62226105 108.63715363]
[79.19215393 95.86106110]
[85.40260315 84.60476685]
[96.97315216 79.00154114]
[100.21974182 64.35710144]
[103.46633911 49.71265793]
[106.71293640 35.06821823]
[109.95952606 20.42377853]
[103.63895416 8.94650364]
[106.86174011 -3.33519197]
[117.31497192 -9.80311489]
[121.19725800 -24.29200172]
[125.07954407 -38.78088760]
[119.81596375 -56.27275085]
[132.35685730 -68.35314941]
[135.60345459 -82.99758911]
[138.85005188 -97.64202881]
[142.09663391 -112.28646851]
[137.52964783 -127.43418121]
[147.83822632 -138.18510437]
[151.08482361 -152.82954407]
[154.33142090 -167.47398376]
[148.88674927 -182.94290161]
[159.76484680 -195.21478271]
[175.77526855 -191.66535950]
[180.44786072 -175.94596863]
[168.97586060 -164.22738647]
[165.72926331 -149.58294678]
[162.48266602 -134.93850708]
[167.28187561 -120.83826447]
[156.74107361 -109.03987122]
[153.49449158 -94.39543152]
[150.24789429 -79.75099182]
[147.00129700 -65.10655212]
[153.28686523 -54.54267120]
[150.47445679 -42.16055679]
[139.56843567 -34.89860535]
[135.68614197 -20.40971565]
[131.80386353 -5.92082882]
[137.34967041 10.58535290]
[124.60396576 23.67037392]
[121.35737610 38.31481171]
[118.11077881 52.95925522]
[114.86418152 67.60369110]
[111.61759186 82.24813080]
[120.79455566 95.79479980]
[117.60240173 111.84282684]
[103.93991089 120.84644318]
[101.33518982 135.61856079]
[98.73046112 150.39067078]
[96.12574005 165.16279602]
[101.34912109 180.09687805]
[91.51929474 191.28723145]
[88.91457367 206.05934143]
[86.30985260 220.83146667]
[91.53323364 235.76554871]
[81.70340729 246.95588684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[7 69]
[8 68]
[9 67]
[11 65]
[12 64]
[13 63]
[14 62]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[25 53]
[26 52]
[27 51]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
