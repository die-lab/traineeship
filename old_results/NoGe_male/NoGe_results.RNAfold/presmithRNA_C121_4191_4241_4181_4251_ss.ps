%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUGGUGUGUACAAAUCGCCCGUCGCUCUUUCCGUGCGAGGAAAGAUAAGUCGUAACAUAGUAAGGGUA\
) } def
/len { sequence length } bind def

/coor [
[33.52593613 177.08065796]
[22.91933441 187.68727112]
[12.31273270 198.29386902]
[1.70613110 208.90046692]
[-8.90047073 219.50706482]
[-19.50707245 230.11367798]
[-20.94494247 246.09216309]
[-34.41276550 254.80981445]
[-49.57917786 249.57917786]
[-54.80980682 234.41276550]
[-46.09216309 220.94494629]
[-30.11367416 219.50706482]
[-19.50707245 208.90046692]
[-8.90047073 198.29386902]
[1.70613110 187.68727112]
[12.31273270 177.08065796]
[22.91933441 166.47406006]
[22.66251945 151.62583923]
[33.26802826 140.71813965]
[48.84394836 140.54945374]
[59.45055008 129.94285583]
[70.05715179 119.33625031]
[80.66374969 108.72964478]
[79.17261505 95.96053314]
[85.32920837 84.67469025]
[96.87285614 79.01624298]
[109.56477356 81.06293488]
[120.62393188 70.92908478]
[128.12393188 57.93870544]
[131.37052917 43.29426575]
[134.61712646 28.64982414]
[137.86370850 14.00538349]
[141.11030579 -0.63905615]
[144.35690308 -15.28349590]
[147.60350037 -29.92793655]
[138.90155029 -43.12079620]
[142.15888977 -58.58576584]
[155.44302368 -67.14775085]
[170.87268066 -63.72707367]
[179.29374695 -50.35316849]
[175.71012878 -34.96052933]
[162.24794006 -26.68134308]
[159.00134277 -12.03690243]
[155.75474548 2.60753798]
[152.50814819 17.25197792]
[149.26156616 31.89641762]
[146.01496887 46.54085922]
[142.76837158 61.18529892]
[155.53709412 53.31384659]
[170.30976868 50.71229553]
[184.99932861 53.74818802]
[197.53047180 61.99261856]
[206.13279724 74.28082275]
[209.59098816 88.87674713]
[207.41647339 103.71829224]
[199.91645813 116.70867157]
[188.15055847 126.01261902]
[173.78102112 130.31568909]
[158.83796692 129.00994873]
[145.43251038 122.27986145]
[135.45857239 111.07626343]
[130.32525635 96.98197174]
[130.75778198 81.98824310]
[119.69862366 92.12210083]
[119.44589996 108.48256683]
[107.62628174 119.79740143]
[91.27035522 119.33625031]
[80.66374969 129.94285583]
[70.05715179 140.54945374]
[59.45055008 151.15605164]
[59.28185272 166.73197937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[20 70]
[21 69]
[22 68]
[23 67]
[27 64]
[28 63]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
