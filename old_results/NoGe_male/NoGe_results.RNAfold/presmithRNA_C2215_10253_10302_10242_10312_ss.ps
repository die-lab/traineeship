%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAGAAAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGGCUUGAUGG\
) } def
/len { sequence length } bind def

/coor [
[83.73328400 278.32934570]
[68.62202454 277.95333862]
[54.29348755 273.13830566]
[42.02174377 264.31246948]
[32.89799500 252.26054382]
[27.73351669 238.05422974]
[26.98753166 222.95671082]
[30.72637177 208.31047058]
[38.61758041 195.41783142]
[49.95948029 185.42518616]
[63.74355698 179.22109985]
[78.74413300 177.35722351]
[81.34885406 162.58511353]
[83.95358276 147.81298828]
[86.55830383 133.04087830]
[81.14861298 119.16339111]
[91.16474152 106.91644287]
[93.44659424 92.09101868]
[95.40448761 77.21935272]
[97.36238098 62.34767532]
[99.32027435 47.47600174]
[101.27816772 32.60433197]
[95.40834045 17.91230011]
[104.74069214 6.30383205]
[106.69858551 -8.56784058]
[108.65647888 -23.43951416]
[95.52428436 -16.19068146]
[80.73941803 -18.72200012]
[70.76663971 -29.92663193]
[69.96662140 -44.90528107]
[78.68917084 -57.10844040]
[93.12030029 -61.20020294]
[106.94990540 -55.39141846]
[114.13097382 -42.22164154]
[120.47024536 -55.81625748]
[126.80951691 -69.41087341]
[133.14878845 -83.00549316]
[139.48806763 -96.60011292]
[135.37425232 -112.10675812]
[145.04826355 -124.90493011]
[161.08900452 -125.17696381]
[171.19140625 -112.71417999]
[167.60577393 -97.07695770]
[153.08268738 -90.26083374]
[146.74340820 -76.66622162]
[140.40412903 -63.07160187]
[134.06486511 -49.47698593]
[127.72558594 -35.88237000]
[123.52815247 -21.48162079]
[121.57025909 -6.60994768]
[119.61236572 8.26172543]
[125.62223053 21.89003372]
[116.14984131 34.56222153]
[114.19194794 49.43389511]
[112.23405457 64.30557251]
[110.27616119 79.17723846]
[108.31826782 94.04891205]
[110.51857758 102.08978271]
[105.93685913 109.52116394]
[111.16024017 124.45525360]
[101.33042145 135.64559937]
[98.72569275 150.41770935]
[96.12097168 165.18983459]
[93.51625061 179.96194458]
[106.97470093 186.84391785]
[117.80557251 197.38829041]
[125.04578400 210.65745544]
[128.05155945 225.47152710]
[126.55560303 240.51324463]
[120.69095612 254.44512939]
[110.97908783 266.02835083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 64]
[13 63]
[14 62]
[15 61]
[17 59]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[24 51]
[25 50]
[26 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
