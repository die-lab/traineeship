%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGUUAAGUUUUUCUUUUAGGUGGCUAAAUUAGUGUUGGUGGGUGAAAUCUGUAAAAUUCUUUUUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[94.66991425 296.51483154]
[96.16151428 280.94854736]
[107.34615326 270.01980591]
[106.03881836 255.07687378]
[94.49934387 245.72935486]
[92.96065521 230.59373474]
[102.84343719 218.55345154]
[101.53609467 203.61051941]
[100.22875977 188.66760254]
[88.68928528 179.32008362]
[87.15059662 164.18446350]
[97.03337860 152.14418030]
[95.72603607 137.20126343]
[94.41870117 122.25833893]
[84.21971893 116.66034698]
[78.07700348 106.77986908]
[77.56951904 95.15664673]
[82.82772064 84.77838898]
[92.50000000 78.31280518]
[92.50000000 63.31280136]
[92.50000000 48.31280136]
[92.50000000 33.31280136]
[92.50000000 18.31280136]
[81.60544586 7.17967749]
[81.81912994 -8.03245544]
[92.50000000 -18.35013771]
[78.76927948 -27.96561050]
[73.41799927 -43.67790604]
[78.32748413 -59.36184311]
[91.41835785 -69.02352905]
[90.76406860 -84.00924683]
[90.10977936 -98.99497223]
[89.45548248 -113.98069763]
[80.19268036 -127.51334381]
[87.52392578 -142.18252563]
[103.90746307 -142.89784241]
[112.48931885 -128.92344666]
[104.44120789 -114.63498688]
[105.09549713 -99.64926147]
[105.74978638 -84.66354370]
[106.40408325 -69.67781830]
[118.30753326 -63.26033401]
[125.47470093 -51.66396713]
[125.89842224 -37.92875671]
[119.35646057 -25.71999359]
[107.50000000 -18.35013771]
[118.18087006 -8.03245544]
[118.39455414 7.17967749]
[107.50000000 18.31280136]
[107.50000000 33.31280136]
[107.50000000 48.31280136]
[107.50000000 63.31280136]
[107.50000000 78.31280518]
[120.74504089 90.19042969]
[121.52106476 107.96419525]
[109.36162567 120.95100403]
[110.66896057 135.89392090]
[111.97629547 150.83683777]
[123.79970551 160.97808838]
[124.91266632 176.15095520]
[115.17168427 187.36027527]
[116.47901917 202.30319214]
[117.78635406 217.24610901]
[129.60977173 227.38734436]
[130.72271729 242.56021118]
[120.98174286 253.76953125]
[122.28907776 268.71246338]
[135.20155334 277.53298950]
[139.37355042 292.60379028]
[132.83518982 306.80883789]
[118.67366791 313.44097900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[7 63]
[8 62]
[9 61]
[12 58]
[13 57]
[14 56]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[26 46]
[30 41]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
