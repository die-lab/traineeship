%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGCUAGUUUGGUUCUGGCUGUUUGCUUGGCUUUGCCCAGGUUUGCACAUGAUAGUUUAGGCGUGCUAG\
) } def
/len { sequence length } bind def

/coor [
[81.35889435 304.78326416]
[84.38764954 285.63967896]
[85.04193878 270.65396118]
[85.69623566 255.66822815]
[86.35052490 240.68251038]
[87.00481415 225.69677734]
[76.78415680 214.92301941]
[77.23422241 199.71604919]
[88.60402679 189.06874084]
[89.25832367 174.08300781]
[89.91261292 159.09729004]
[90.56690216 144.11157227]
[91.22119141 129.12583923]
[91.87548065 114.14012146]
[84.45020294 104.91472626]
[85.22473145 93.09766388]
[93.79064941 84.92038727]
[95.09798431 69.97747040]
[96.40531921 55.03454971]
[82.66226959 40.80971909]
[83.29473877 21.33285332]
[97.49952698 8.42261791]
[96.84523773 -6.56310511]
[96.19094086 -21.54882812]
[84.82114410 -32.19614410]
[84.37107086 -47.40311813]
[94.59172821 -58.17687225]
[93.93743896 -73.16259766]
[93.28314972 -88.14832306]
[92.62886047 -103.13404083]
[91.97456360 -118.11976624]
[91.32027435 -133.10548401]
[79.50027466 -143.59658813]
[78.64400482 -159.37765503]
[89.25947571 -171.08609009]
[105.04872894 -171.77545166]
[116.64426422 -161.03678894]
[117.16666412 -145.24113464]
[106.30599976 -133.75978088]
[106.96028900 -118.77405548]
[107.61457825 -103.78833008]
[108.26887512 -88.80261230]
[108.92316437 -73.81688690]
[109.57745361 -58.83116531]
[120.69821167 -48.98919678]
[121.57523346 -33.80086136]
[111.17666626 -22.20311928]
[111.83095551 -7.21739578]
[112.48525238 7.76832771]
[122.10065460 12.69151211]
[128.71958923 21.33285332]
[131.00257874 32.06010818]
[128.43769836 42.80831909]
[121.45329285 51.47727203]
[111.34823608 56.34188461]
[110.04090118 71.28480530]
[108.73356628 86.22772980]
[116.27307892 101.06659698]
[106.86120605 114.79441071]
[106.20691681 129.78013611]
[105.55262756 144.76585388]
[104.89833832 159.75158691]
[104.24404144 174.73730469]
[103.58975220 189.72302246]
[113.98831940 201.32077026]
[113.11129761 216.50910950]
[101.99053955 226.35107422]
[101.33625031 241.33679199]
[100.68195343 256.32250977]
[100.02766418 271.30822754]
[99.37337494 286.29397583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[17 57]
[18 56]
[19 55]
[22 49]
[23 48]
[24 47]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
