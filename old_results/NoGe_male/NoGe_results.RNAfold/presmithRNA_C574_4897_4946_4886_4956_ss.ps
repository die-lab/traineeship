%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUGCGCCCGGUUUUUGAGUGUGAGCUUAAGUUGGAGAAGAAGGAACUCGGCAAAUUAGUGACUCC\
) } def
/len { sequence length } bind def

/coor [
[92.32103729 107.50000000]
[77.32103729 107.50000000]
[66.18791199 118.39455414]
[50.97578049 118.18087006]
[40.65810013 107.50000000]
[25.65809822 107.50000000]
[10.65809822 107.50000000]
[-4.34190130 107.50000000]
[-19.34190178 107.50000000]
[-34.34189987 107.50000000]
[-49.34189987 107.50000000]
[-64.34190369 107.50000000]
[-78.14207458 115.23729706]
[-90.86934662 107.50000000]
[-105.86934662 107.50000000]
[-120.86934662 107.50000000]
[-136.70848083 113.54634094]
[-146.90322876 100.00000000]
[-136.70848083 86.45365906]
[-120.86934662 92.50000000]
[-105.86934662 92.50000000]
[-90.86934662 92.50000000]
[-78.14207458 84.76270294]
[-64.34190369 92.50000000]
[-49.34189987 92.50000000]
[-34.34189987 92.50000000]
[-19.34190178 92.50000000]
[-4.34190130 92.50000000]
[10.65809822 92.50000000]
[25.65809822 92.50000000]
[40.65810013 92.50000000]
[50.97578049 81.81912994]
[66.18791199 81.60544586]
[77.32103729 92.50000000]
[92.32103729 92.50000000]
[106.52498627 87.67840576]
[118.42529297 78.54698944]
[130.32559204 69.41556549]
[142.22589111 60.28414536]
[147.33111572 52.32299042]
[154.85034180 51.02751923]
[167.13761902 42.42387009]
[166.42309570 27.01306343]
[174.17347717 13.67383194]
[187.91564941 6.66267586]
[203.26452637 8.21683025]
[215.32234192 17.84037018]
[220.24150085 32.46245956]
[216.45230103 47.41724014]
[205.16386414 57.93270111]
[189.97830200 60.65339279]
[175.74125671 54.71115112]
[163.45397949 63.31480026]
[151.35731506 72.18444061]
[139.45701599 81.31586456]
[127.55670929 90.44728851]
[115.65641022 99.57870483]
[130.49752808 101.75613403]
[143.65043640 108.96731567]
[153.46728516 120.30880737]
[158.71820068 134.35971069]
[158.74534607 149.35968018]
[153.54528809 163.42948914]
[143.76951599 174.80641174]
[130.64279175 182.06512451]
[115.80964661 184.29623413]
[101.12843323 181.22019958]
[88.43845367 173.22242737]
[79.32955170 161.30488586]
[74.94292450 146.96063232]
[75.82812500 131.98677063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[36 57]
[37 56]
[38 55]
[39 54]
[41 53]
[42 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
