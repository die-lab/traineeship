%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUGAGUUUGUAAGGCGGUGGAUUGUAGCUCUAUUUACGGGGGUUCCUCCCUCCUGAUUUUCAGGCAA\
) } def
/len { sequence length } bind def

/coor [
[79.90937042 324.18518066]
[85.95571136 308.34603882]
[85.95571136 293.34603882]
[78.21841431 280.61877441]
[85.95571136 266.81860352]
[85.95571136 251.81858826]
[85.95571136 236.81858826]
[85.95571136 221.81858826]
[85.95571136 206.81858826]
[74.10585022 201.53865051]
[65.18082428 192.05836487]
[60.59143066 179.82283020]
[61.08374405 166.71662903]
[66.61805725 154.77366638]
[76.36940002 145.86148071]
[88.85026550 141.38923645]
[90.15760040 126.44631195]
[91.46493530 111.50339508]
[85.73056030 98.75158691]
[93.59214783 87.18927002]
[94.89948273 72.24635315]
[86.67843628 55.93423843]
[96.93106842 41.85966873]
[97.58535767 26.87394714]
[98.23965454 11.88822365]
[95.79624939 8.00664997]
[94.79666901 3.94667912]
[95.12210846 0.17915304]
[96.51432800 -2.91138363]
[98.61569977 -5.06437397]
[101.01834106 -6.16519403]
[104.90062714 -20.65408134]
[108.78290558 -35.14296722]
[112.66519165 -49.63185501]
[116.54747772 -64.12074280]
[107.43051910 -76.82566833]
[108.66463470 -92.41447449]
[119.66710663 -103.52661133]
[135.24290466 -104.91526794]
[148.03762817 -95.92475891]
[152.00997925 -80.80012512]
[145.28434753 -66.68276215]
[131.03636169 -60.23845673]
[127.15408325 -45.74956894]
[123.27179718 -31.26068306]
[119.38951111 -16.77179527]
[115.50722504 -2.28290820]
[113.22537231 12.54251480]
[112.57108307 27.52823830]
[111.91679382 42.51396179]
[119.94126892 51.82587433]
[119.32172394 64.50824738]
[109.84239960 73.55368805]
[108.53506470 88.49660492]
[114.26943970 101.24841309]
[106.40785217 112.81072998]
[105.10051727 127.75364685]
[103.79318237 142.69656372]
[118.25421906 152.19042969]
[126.04647064 167.53770447]
[125.18656921 184.64141846]
[115.98806000 198.98358154]
[100.95571136 206.81858826]
[100.95571136 221.81858826]
[100.95571136 236.81858826]
[100.95571136 251.81858826]
[100.95571136 266.81860352]
[108.69301605 280.61877441]
[100.95571136 293.34603882]
[100.95571136 308.34603882]
[107.00205231 324.18518066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[16 58]
[17 57]
[18 56]
[20 54]
[21 53]
[23 50]
[24 49]
[25 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
