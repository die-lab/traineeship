%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGUAAAUAUGCGGUGGCGCGGGCUUCAGUUUGAGCGGCUCCCCCUUUUCGUCUGGUCUGUUAAGAUUA\
) } def
/len { sequence length } bind def

/coor [
[118.56289673 143.33538818]
[104.58683777 148.78237915]
[91.13885498 142.13769531]
[86.97431946 127.72740173]
[94.80420685 114.93362427]
[83.74504852 125.06748199]
[72.68589020 135.20133972]
[68.27330017 150.99566650]
[52.32361984 154.80877686]
[41.24451447 142.71806335]
[46.43321991 127.16140747]
[62.55203629 124.14217377]
[73.61119843 114.00832367]
[84.67035675 103.87446594]
[87.59671021 89.16268921]
[81.25743866 75.56806946]
[68.41285706 66.33079529]
[70.04645538 51.52604294]
[63.70718002 37.93142319]
[50.86260223 28.69414520]
[52.49620056 13.88939571]
[46.15692520 0.29477882]
[34.15555573 -4.96303558]
[29.23574257 -16.66866875]
[33.59142303 -28.16353798]
[27.85117149 -42.02173233]
[22.11091995 -55.87992477]
[16.37066841 -69.73812103]
[1.67533338 -75.55384064]
[-4.52674150 -90.09033966]
[1.44402587 -104.72336578]
[16.04528427 -110.77140808]
[30.61436844 -104.64626312]
[36.50769424 -89.98188019]
[30.22886276 -75.47837067]
[35.96911240 -61.62017441]
[41.70936584 -47.76198196]
[47.44961548 -33.90378952]
[61.89772797 -24.18462753]
[59.75154114 -6.04449511]
[66.09081268 7.55012178]
[78.48197174 15.81502342]
[77.30179596 31.59215164]
[83.64107513 45.18676758]
[96.03222656 53.45166779]
[94.85205841 69.22879791]
[101.19132996 82.82341766]
[102.60764313 67.89042664]
[111.55474854 55.85094070]
[125.44454193 50.18758392]
[140.25915527 52.53858185]
[151.71321106 62.22386932]
[156.49340820 76.44180298]
[153.21699524 91.07960510]
[142.83174133 101.90302277]
[128.34194946 105.78121185]
[138.47581482 116.84037018]
[148.60966492 127.89952850]
[158.74351501 138.95869446]
[168.87736511 150.01785278]
[179.01121521 161.07701111]
[194.80555725 165.48960876]
[198.61866760 181.43928528]
[186.52793884 192.51838684]
[170.97129822 187.32968140]
[167.95205688 171.21086121]
[157.81820679 160.15170288]
[147.68435669 149.09254456]
[137.55050659 138.03338623]
[127.41664886 126.97422028]
[117.28279877 115.91506195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[15 47]
[16 46]
[18 44]
[19 43]
[21 41]
[22 40]
[25 38]
[26 37]
[27 36]
[28 35]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
