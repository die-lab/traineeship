%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGGGUUACGUUUCUUUAGUUUUUGGUGGUCUUGUUGGAAUGUGGGCCCUAAAUCGGAUUUGAUAGUA\
) } def
/len { sequence length } bind def

/coor [
[169.29631042 215.06774902]
[161.23681641 202.41687012]
[144.97167969 202.01109314]
[131.95413208 191.97953796]
[127.32544708 176.03941345]
[133.05778503 160.28726196]
[124.45413208 147.99996948]
[115.85048676 135.71269226]
[107.24684143 123.42541504]
[98.64319611 111.13813019]
[89.77355194 99.04146576]
[80.64212799 87.14116669]
[71.51071167 75.24086761]
[62.37928772 63.34056473]
[53.24786377 51.44026566]
[44.11644363 39.53996277]
[34.98502350 27.63966370]
[18.23818207 28.36992836]
[4.42768526 19.16217804]
[-1.22513485 3.73057318]
[3.27889323 -11.90377617]
[-6.36292076 -23.39444160]
[-16.25310898 -34.67203903]
[-26.38696098 -45.73120117]
[-42.18515396 -46.17009354]
[-52.98497391 -57.70869827]
[-52.37907791 -73.50136566]
[-40.72693634 -84.17858887]
[-24.94155312 -83.40576172]
[-14.38811970 -71.64138031]
[-15.32780075 -55.86505127]
[-5.19394827 -44.80589294]
[1.86664021 -41.91366959]
[5.12774563 -33.03625488]
[14.76955986 -21.54558945]
[28.11992073 -23.70062447]
[40.86543655 -18.86370277]
[49.56306458 -8.22476768]
[51.80520248 5.44358635]
[46.88532257 18.50824356]
[56.01674271 30.40854263]
[65.14816284 42.30884171]
[74.27958679 54.20914459]
[83.41101074 66.10944366]
[92.54242706 78.00974274]
[101.67385101 89.91004181]
[108.91545868 94.03993988]
[110.93047333 102.53448486]
[119.53412628 114.82176971]
[128.13777161 127.10904694]
[136.74140930 139.39633179]
[145.34506226 151.68360901]
[159.28448486 150.92005920]
[171.64599609 157.16857910]
[179.17710876 168.66284180]
[179.95750427 182.27294922]
[173.88768005 194.35737610]
[181.94717407 207.00825500]
[196.91105652 204.33418274]
[211.75813293 207.59497070]
[224.22433472 216.29338074]
[232.40864563 229.10296631]
[235.06303406 244.07035828]
[231.78271484 258.91311646]
[223.06790161 271.36788940]
[210.24757385 279.53533936]
[195.27670288 282.17001343]
[180.43826294 278.87017822]
[167.99497986 270.13900757]
[159.84440613 257.30792236]
[157.22940063 242.33360291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[21 35]
[22 34]
[23 32]
[24 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
