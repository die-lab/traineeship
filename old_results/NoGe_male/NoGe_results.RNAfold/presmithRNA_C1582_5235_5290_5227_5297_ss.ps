%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUGUAUUUAGGCUUGCUUUAAAAGGUUUGGUUGGGGUGACCGGAGAAGAUGUGGAUCUUCUUUUUUGU\
) } def
/len { sequence length } bind def

/coor [
[68.74478912 175.86709595]
[57.57923889 165.85058594]
[51.17583466 152.28605652]
[50.53824615 137.29962158]
[55.76640701 123.24023438]
[66.04085541 112.31156921]
[79.74896240 106.22708130]
[65.44320679 101.71649170]
[49.95510101 104.94589233]
[40.14353561 93.73954010]
[25.83778191 89.22895050]
[11.53202820 84.71836090]
[-2.77372575 80.20777893]
[-17.07947922 75.69718933]
[-31.38523483 71.18659973]
[-45.69098663 66.67601776]
[-59.99674225 62.16542816]
[-72.38967896 71.50324249]
[-87.90495300 71.73964691]
[-100.57662964 62.78373337]
[-105.53218079 48.07924271]
[-100.86610413 33.28034592]
[-88.37260437 24.07752037]
[-72.85567474 24.00944138]
[-60.28190613 33.10228729]
[-55.48615646 47.85967255]
[-41.18040085 52.37025833]
[-26.87464714 56.88084793]
[-12.56889343 61.39143372]
[1.73686123 65.90202332]
[16.04261589 70.41260529]
[30.34836960 74.92319489]
[44.65412521 79.43378448]
[59.11899185 75.88175201]
[69.95379639 87.41073608]
[84.25955200 91.92132568]
[97.85417175 85.58205414]
[103.59442139 71.72386169]
[100.91860962 55.54448700]
[113.76244354 45.34801102]
[128.91328430 51.62369537]
[130.78523254 67.91564941]
[117.45261383 77.46411133]
[111.71236420 91.32230377]
[119.21236420 104.31268311]
[134.08403015 106.27057648]
[148.95570374 108.22846985]
[163.82737732 110.18636322]
[178.69905090 112.14425659]
[193.57072449 114.10214996]
[208.44239807 116.06004333]
[223.31407166 118.01793671]
[238.18574524 119.97583008]
[253.12126160 113.20366669]
[266.29452515 122.97080994]
[264.15402222 139.22966003]
[248.90168762 145.25450134]
[236.22784424 134.84750366]
[221.35618591 132.88960266]
[206.48451233 130.93171692]
[191.61283875 128.97381592]
[176.74116516 127.01593018]
[161.86949158 125.05803680]
[146.99781799 123.10014343]
[132.12614441 121.14225006]
[117.25447083 119.18435669]
[124.28406525 132.43519592]
[125.62051392 147.37553406]
[121.05432129 161.66365051]
[111.30120850 173.05999756]
[97.88986969 179.77832031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 36]
[8 35]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[37 44]
[38 43]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
