%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUGAUAAAACAUGUUUUUUUUAGGGUAUAGGUGAUAGAGAUGUGUUGAUGGUUUUAAGUACUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[77.17145538 170.97328186]
[62.20613861 171.99270630]
[47.83598328 167.69171143]
[35.89150238 158.61814880]
[27.89422035 145.92785645]
[24.86285591 131.23735046]
[27.18355179 116.41796112]
[34.56069183 103.35742188]
[46.05455399 93.71941376]
[60.20101166 88.73166656]
[75.19805908 89.02952576]
[89.13330078 94.57379913]
[82.79402161 80.97917938]
[76.45475006 67.38455963]
[70.11547852 53.78994370]
[63.77620316 40.19532776]
[57.43692780 26.60071182]
[51.09765625 13.00609493]
[44.75838089 -0.58852208]
[38.41910934 -14.18313885]
[32.07983398 -27.77775574]
[25.74056053 -41.37237167]
[12.89597988 -50.60965347]
[14.52957726 -65.41439819]
[8.19030380 -79.00901794]
[1.85102975 -92.60363770]
[-13.44972897 -94.57602692]
[-25.24046898 -104.52499390]
[-29.75880623 -119.27586365]
[-25.56295776 -134.12168884]
[-13.99180222 -144.32521057]
[1.26234579 -146.63052368]
[15.33194351 -140.30203247]
[23.72743416 -127.35910034]
[23.76984596 -111.93180084]
[15.44564629 -98.94290924]
[21.78491974 -85.34828949]
[28.12419510 -71.75367737]
[40.51534653 -63.48877335]
[39.33517838 -47.71164703]
[45.67444992 -34.11703110]
[52.01372528 -20.52241325]
[58.35299683 -6.92779589]
[64.69227600 6.66682100]
[71.03154755 20.26143837]
[77.37081909 33.85605621]
[83.71009064 47.45067215]
[90.04936981 61.04528809]
[96.38864136 74.63990784]
[102.72791290 88.23451996]
[108.81480408 91.81930542]
[111.83407593 98.17215729]
[124.82446289 105.67215729]
[137.81483459 113.17215729]
[150.80522156 120.67215729]
[163.79560852 128.17214966]
[178.42726135 122.65412140]
[193.16548157 127.88086700]
[201.05133057 141.38447571]
[198.36135864 156.78895569]
[186.36567688 166.82078552]
[170.72827148 166.74324036]
[158.83267212 156.59294128]
[156.29560852 141.16253662]
[143.30522156 133.66253662]
[130.31483459 126.16253662]
[117.32446289 118.66253662]
[104.33407593 111.16253662]
[108.64298248 125.53032684]
[107.63178253 140.49620056]
[101.42929840 154.15376282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[24 38]
[25 37]
[26 36]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
