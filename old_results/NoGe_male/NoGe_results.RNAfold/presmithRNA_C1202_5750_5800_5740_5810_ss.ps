%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUAGUAUAUGUUUUCCUUUUUUGGGGUUGUUGUACAAGCGGUUGGGCUGCUUUUGGCUGUUGCUUUUU\
) } def
/len { sequence length } bind def

/coor [
[35.26157761 147.49374390]
[32.05024338 132.84153748]
[35.10564423 118.15601349]
[43.89447403 106.00049591]
[56.88266373 98.49670410]
[71.80316162 96.95439911]
[86.05109406 101.64246368]
[72.19290161 95.90221405]
[58.33470535 90.16195679]
[44.47651291 84.42170715]
[30.61832047 78.68145752]
[18.42148399 87.91099548]
[3.34206748 89.78396606]
[-10.55782032 83.89673615]
[-19.58423424 71.92260742]
[-21.39296150 57.13767624]
[-35.25115585 51.39742661]
[-49.10934830 45.65717697]
[-62.96754074 39.91692352]
[-77.47105408 46.19575882]
[-92.13543701 40.30242920]
[-98.26058197 25.73334694]
[-92.21253967 11.13208675]
[-77.57951355 5.16131973]
[-63.04301453 11.36339474]
[-57.22729111 26.05873108]
[-43.36909485 31.79898262]
[-29.51090431 37.53923416]
[-15.65271091 43.27948380]
[-3.91922426 34.10392761]
[10.93040371 32.01957321]
[24.92201042 37.68537903]
[34.26037598 49.67252731]
[36.35857391 64.82326508]
[50.21676636 70.56351471]
[64.07495880 76.30376434]
[77.93315125 82.04402161]
[91.79134369 87.78427124]
[106.70218658 86.15126801]
[118.98947144 77.54762268]
[131.27674866 68.94397736]
[143.56402588 60.34032822]
[155.85131836 51.73667908]
[168.13859558 43.13303375]
[180.42587280 34.52938843]
[189.93249512 20.49156380]
[206.05340576 25.74060440]
[205.47221375 42.68458557]
[189.02952576 46.81666946]
[176.74223328 55.42031479]
[164.45495605 64.02396393]
[152.16767883 72.62760925]
[139.88040161 81.23125458]
[127.59311676 89.83489990]
[115.30583954 98.43854523]
[114.81531525 105.92249298]
[113.83426666 120.89037323]
[113.34374237 128.37431335]
[124.40290070 138.50816345]
[135.46206665 148.64202881]
[151.58088684 151.66125488]
[156.76957703 167.21791077]
[145.69047546 179.30862427]
[129.74079895 175.49551392]
[125.32820892 159.70118713]
[114.26905060 149.56732178]
[103.20989227 139.43347168]
[97.36165619 153.24644470]
[86.38022614 163.46447754]
[72.18239594 168.30406189]
[57.24634552 166.92044067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[16 29]
[17 28]
[18 27]
[19 26]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
