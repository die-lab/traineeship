%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUGGGCUUUAUCUGUGACUUUGUAUGGUGUUUGAUAAUGCUAGUAUUAGUAUUUCUCUCUUGUUGUUA\
) } def
/len { sequence length } bind def

/coor [
[125.13752747 217.83515930]
[119.38445282 203.94007874]
[116.13182831 189.25703430]
[115.47848511 174.23225403]
[117.44428253 159.32229614]
[121.96949005 144.98027039]
[128.91658020 131.64201355]
[117.01627350 122.51058960]
[105.11597443 113.37917328]
[91.28013611 111.36395264]
[85.75260162 98.52113342]
[73.85230255 89.38970947]
[61.95200348 80.25828552]
[50.05170059 71.12686920]
[38.15140152 61.99544525]
[23.98138046 67.75372314]
[8.93102264 65.66003418]
[-2.97151065 56.37585068]
[-8.59122372 42.47351837]
[-6.51169968 27.72424126]
[-18.41200066 18.59281921]
[-30.31229973 9.46139812]
[-45.94669724 11.77250195]
[-58.58610153 2.28456116]
[-60.73177719 -13.37339592]
[-51.11073685 -25.91178131]
[-35.43096924 -27.89179420]
[-22.99500465 -18.13872719]
[-21.18087769 -2.43890166]
[-9.28057861 6.69251966]
[2.61972189 15.82394123]
[16.32820892 9.99788189]
[31.21131706 11.82791996]
[43.25975418 20.92196083]
[49.17742157 34.91760254]
[47.28282166 50.09514618]
[59.18312454 59.22656631]
[71.08341980 68.35798645]
[82.98372650 77.48941040]
[94.88402557 86.62082672]
[108.71986389 88.63604736]
[114.24739838 101.47886658]
[126.14769745 110.61029053]
[138.04800415 119.74171448]
[149.13372803 109.57914734]
[161.81584167 101.49614716]
[175.70896912 95.73834991]
[190.39089966 92.48072815]
[205.41546631 91.82227325]
[220.32609558 93.78300476]
[234.66964722 98.30332184]
[248.01026917 105.24587250]
[259.94253540 114.39967346]
[270.10385132 125.48655701]
[278.18542480 138.16960144]
[283.94161987 152.06336975]
[287.19760132 166.74566650]
[287.85433960 181.77030945]
[285.89190674 196.68070984]
[281.36996460 211.02375793]
[274.42590332 224.36358643]
[265.27075195 236.29481506]
[254.18272400 246.45487976]
[241.49876404 254.53500366]
[227.60433960 260.28964233]
[212.92166138 263.54394531]
[197.89695740 264.19897461]
[182.98677063 262.23486328]
[168.64424133 257.71130371]
[155.30519104 250.76571655]
[143.37500000 241.60920715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[20 31]
[21 30]
[22 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
