%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCUGGCUAGUUUGGUUCUGGCUGUUUGCUUGGCUUUGCCCAGGUUUGCACAUGAUAGUUUAGGCGUGC\
) } def
/len { sequence length } bind def

/coor [
[81.49900818 110.00041962]
[66.62733459 111.95831299]
[51.75566483 113.91620636]
[41.52285385 127.91657257]
[24.68206787 130.29400635]
[11.50100327 120.08175659]
[-3.27111316 122.68647766]
[-18.04323006 125.29119873]
[-32.81534576 127.89591980]
[-47.58746338 130.50064087]
[-62.35957718 133.10536194]
[-77.13169098 135.71008301]
[-84.79327393 149.34219360]
[-99.44309235 154.81182861]
[-114.16395569 149.53639221]
[-122.00511932 136.00679016]
[-119.26422882 120.61128235]
[-107.23545074 110.61916351]
[-91.59839630 110.74839783]
[-79.73641968 120.93797302]
[-64.96430206 118.33325195]
[-50.19218445 115.72853088]
[-35.42006683 113.12380219]
[-20.64795303 110.51908112]
[-5.87583590 107.91436005]
[8.89628029 105.30963898]
[14.85887909 93.68289948]
[26.65017509 87.61058807]
[39.96690369 89.56604004]
[49.79777145 99.04453278]
[64.66944122 97.08663940]
[79.54111481 95.12874603]
[87.71105957 79.01889038]
[107.55694580 73.45530701]
[110.16166687 58.68318939]
[112.76638794 43.91107178]
[109.56233978 27.26263428]
[124.67317963 19.57505989]
[136.24342346 31.96722984]
[127.53850555 46.51579285]
[124.93378448 61.28791046]
[122.32905579 76.06002808]
[130.66261292 88.53207397]
[145.30705261 91.77866364]
[160.45475769 87.21166992]
[171.20568848 97.52025604]
[185.85012817 100.76684570]
[200.49456787 104.01344299]
[215.13900757 107.26004028]
[229.78344727 110.50662994]
[244.93116760 105.93964386]
[255.68208313 116.24822235]
[270.32653809 119.49481201]
[283.51937866 110.79286194]
[298.98434448 114.05021667]
[307.54632568 127.33434296]
[304.12567139 142.76400757]
[290.75177002 151.18505859]
[275.35913086 147.60144043]
[267.07992554 134.13925171]
[252.43550110 130.89265442]
[238.33525085 135.69186401]
[226.53684998 125.15106964]
[211.89241028 121.90447998]
[197.24797058 118.65788269]
[182.60353088 115.41128540]
[167.95909119 112.16469574]
[153.85885620 116.96390533]
[142.06045532 106.42310333]
[127.41601562 103.17651367]
[114.59566498 120.79973602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[34 42]
[35 41]
[36 40]
[43 70]
[44 69]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
