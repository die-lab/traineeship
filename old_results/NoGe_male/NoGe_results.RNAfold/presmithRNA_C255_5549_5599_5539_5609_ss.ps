%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUGGAAAGGGAGUAGUACGAAAGGACCCUCUUUUUGGAUGGUGGUCUAUGGACUGUGUUAGCAAAU\
) } def
/len { sequence length } bind def

/coor [
[90.10808563 385.92260742]
[96.15442657 370.08346558]
[96.15442657 355.08346558]
[96.15442657 340.08346558]
[96.15442657 325.08346558]
[96.15442657 310.08346558]
[96.15442657 295.08346558]
[96.15442657 280.08346558]
[96.15442657 265.08346558]
[84.01600647 256.49295044]
[79.20669556 242.23342896]
[83.76944733 227.70639038]
[96.15442657 218.54568481]
[96.15442657 203.54568481]
[83.80845642 192.33821106]
[83.22539520 175.34043884]
[95.23616028 162.83193970]
[94.58186340 147.84622192]
[93.92757416 132.86050415]
[93.27328491 117.87477112]
[82.66167450 108.00866699]
[82.02965546 93.53293610]
[91.74098969 82.77951813]
[79.51726532 91.47322083]
[64.66519928 89.37178802]
[55.33317947 77.62813568]
[56.64109802 62.68526459]
[67.87139130 52.74139023]
[82.86269379 53.25209045]
[93.38961029 63.93571091]
[96.63620758 49.29127121]
[99.88279724 34.64683151]
[95.31581116 19.49911880]
[105.62438965 8.74819279]
[108.87098694 -5.89624739]
[112.11757660 -20.54068756]
[106.67290497 -36.00960922]
[117.55100250 -48.28148270]
[133.56143188 -44.73205948]
[138.23402405 -29.01267815]
[126.76201630 -17.29409409]
[123.51542664 -2.64965296]
[120.26882935 11.99478722]
[125.06803894 26.09502983]
[114.52723694 37.89342499]
[111.28064728 52.53786469]
[108.03404999 67.18230438]
[106.72671509 82.12522888]
[117.33832550 91.99133301]
[117.97034454 106.46706390]
[108.25901031 117.22048187]
[108.91329956 132.20620728]
[109.56758881 147.19192505]
[110.22187805 162.17765808]
[121.26348877 170.21324158]
[125.50165558 182.98809814]
[121.56912994 195.65470886]
[111.15442657 203.54568481]
[111.15442657 218.54568481]
[123.53940582 227.70639038]
[128.10215759 242.23342896]
[123.29284668 256.49295044]
[111.15442657 265.08346558]
[111.15442657 280.08346558]
[111.15442657 295.08346558]
[111.15442657 310.08346558]
[111.15442657 325.08346558]
[111.15442657 340.08346558]
[111.15442657 355.08346558]
[111.15442657 370.08346558]
[117.20076752 385.92260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[13 59]
[14 58]
[17 54]
[18 53]
[19 52]
[20 51]
[23 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
