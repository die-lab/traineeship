%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUUUUCUUUUUUGCUUCCUGUUGUUUGAAAUGAGGCCGGUGGAGGAAAAGGUGGAGACCGGGAUUAGA\
) } def
/len { sequence length } bind def

/coor [
[159.26367188 314.35882568]
[156.01707458 299.71438599]
[152.77047729 285.06994629]
[149.52388000 270.42550659]
[145.64160156 255.93659973]
[141.13101196 241.63084412]
[136.62042236 227.32510376]
[132.10983276 213.01934814]
[127.59925079 198.71359253]
[122.77765656 184.50964355]
[117.64735413 170.41424561]
[112.51705170 156.31886292]
[107.38674927 142.22346497]
[102.25644684 128.12808228]
[97.12614441 114.03269196]
[86.53989410 104.89907837]
[88.77846527 91.09761047]
[83.64816284 77.00222015]
[78.51786041 62.90683365]
[73.38755798 48.81144333]
[67.95098877 34.83132553]
[62.21073532 20.97313309]
[56.47048187 7.11494064]
[51.07345581 2.45783854]
[49.35625076 -3.38122845]
[50.89262009 -8.21011257]
[46.38203049 -22.51586723]
[41.87144470 -36.82162094]
[37.36085892 -51.12737656]
[23.22831726 -58.20175171]
[18.31678200 -73.22348022]
[25.54018021 -87.28044128]
[40.61299896 -92.03288269]
[54.59280014 -84.66127014]
[59.18561935 -69.53904724]
[51.66661072 -55.63796234]
[56.17720032 -41.33220673]
[60.68778610 -27.02645493]
[65.19837189 -12.72070026]
[70.32867432 1.37468934]
[76.06892395 15.23288250]
[81.80918121 29.09107590]
[87.45476532 34.22373962]
[87.48294830 43.68114090]
[92.61325073 57.77653122]
[97.74355316 71.87191772]
[102.87385559 85.96730804]
[113.46010590 95.10092163]
[111.22153473 108.90238953]
[116.35183716 122.99777985]
[121.48213959 137.09317017]
[126.61244202 151.18855286]
[131.74275208 165.28395081]
[136.87304688 179.37933350]
[142.93055725 186.64224243]
[141.90499878 194.20300293]
[146.41558838 208.50875854]
[150.92617798 222.81451416]
[155.43676758 237.12026978]
[159.94735718 251.42602539]
[164.91795349 256.53576660]
[166.11972046 262.50228882]
[164.16831970 267.17889404]
[167.41491699 281.82333374]
[170.66151428 296.46777344]
[173.90811157 311.11221313]
[187.37030029 319.39141846]
[190.95391846 334.78405762]
[182.53285217 348.15795898]
[167.10319519 351.57861328]
[153.81906128 343.01663208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[17 47]
[18 46]
[19 45]
[20 44]
[21 42]
[22 41]
[23 40]
[26 39]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
