%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACUAAGAUUUUUGGUUUCUUCGGUAUUGGUUUGUAGCCAUUUUUUAUAGGAGGGAGGGUGGCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[152.37052917 96.04144287]
[137.72608948 99.28803253]
[123.08164978 102.53462982]
[108.43720245 105.78122711]
[101.63381195 110.59897614]
[93.08355713 108.83525848]
[80.83660889 118.85138702]
[66.95912170 113.44169617]
[52.18700790 116.04641724]
[37.41489029 118.65114594]
[22.64277267 121.25586700]
[16.77746391 135.52476501]
[4.11582804 144.33877563]
[-11.30185032 144.88534546]
[-24.55584717 136.99008179]
[-31.41685867 123.17234039]
[-29.69556236 107.84130096]
[-19.94121742 95.88905334]
[-5.26640081 91.12950134]
[9.64620876 95.08142090]
[20.03805161 106.48374939]
[34.81016541 103.87902832]
[49.58228302 101.27430725]
[64.35440063 98.66957855]
[75.54474640 88.83975983]
[90.47883606 94.06314087]
[105.19061279 91.13678741]
[119.83505249 87.89019012]
[134.47949219 84.64359283]
[149.12393188 81.39700317]
[150.44332886 68.22440338]
[155.51296997 56.01488495]
[163.88879395 45.81021118]
[174.84515381 38.47777176]
[187.43766785 34.63683701]
[200.58459473 34.60626602]
[213.15974426 38.37807846]
[224.08903503 45.61903381]
[232.44213867 55.70004654]
[237.51168823 67.75083160]
[252.45460510 66.44349670]
[267.39752197 65.13616180]
[282.34045410 63.82882690]
[297.28335571 62.52148819]
[312.22628784 61.21415329]
[327.16921997 59.90681839]
[342.11212158 58.59947968]
[357.05505371 57.29214478]
[371.99798584 55.98480988]
[380.81851196 43.07233047]
[395.88928223 38.90032959]
[410.09436035 45.43869781]
[416.72650146 59.60021973]
[412.65423584 74.69824982]
[399.80035400 83.60397339]
[384.23406982 82.11236572]
[373.30529785 70.92772675]
[358.36239624 72.23506165]
[343.41946411 73.54240417]
[328.47653198 74.84973907]
[313.53363037 76.15707397]
[298.59069824 77.46440887]
[283.64779663 78.77174377]
[268.70486450 80.07907867]
[253.76194763 81.38642120]
[238.81903076 82.69375610]
[234.33256531 99.06488037]
[224.04328918 112.60839081]
[209.41595459 121.35440826]
[192.54850769 124.01898956]
[175.87127686 120.19258881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[6 26]
[8 24]
[9 23]
[10 22]
[11 21]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
