%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUUGUGCUGUUGCAUUAGUGCGUGGAUAGUGGGGGGUAGUAGUGAUAUGCUUUCGAACAGGGUGAUA\
) } def
/len { sequence length } bind def

/coor [
[89.44523621 241.42951965]
[88.13790131 226.48660278]
[79.32079315 214.48210144]
[85.82588196 200.06010437]
[84.51854706 185.11717224]
[83.21121216 170.17425537]
[81.90387726 155.23133850]
[80.59653473 140.28842163]
[79.28919983 125.34549713]
[70.15778351 113.44519806]
[56.06238937 108.31489563]
[41.96700287 103.18459320]
[27.87161255 98.05429077]
[13.77622318 92.92398834]
[-0.31916606 87.79368591]
[-9.77657032 87.76550293]
[-14.90923309 82.11991882]
[-28.76742554 76.37966919]
[-42.62561798 70.63941956]
[-57.12912750 76.91825104]
[-71.79351807 71.02492523]
[-77.91865540 56.45584106]
[-71.87062073 41.85457993]
[-57.23759079 35.88381195]
[-42.70109177 42.08588791]
[-36.88536835 56.78122330]
[-23.02717400 62.52147675]
[-9.16898155 68.26172638]
[4.81113625 73.69829559]
[18.90652466 78.82859802]
[33.00191498 83.95890045]
[47.09730530 89.08920288]
[61.19269180 94.21950531]
[75.28808594 99.34980774]
[89.60789490 80.64892578]
[110.18475342 83.71274567]
[122.47203827 75.10910034]
[134.75930786 66.50545502]
[147.04660034 57.90180969]
[159.33387756 49.29816437]
[171.62115479 40.69451523]
[183.90843201 32.09086990]
[183.19390869 16.68006134]
[190.94429016 3.34082985]
[204.68646240 -3.67032623]
[220.03535461 -2.11617160]
[232.09317017 7.50736856]
[237.01231384 22.12945747]
[233.22311401 37.08423996]
[221.93469238 47.59969711]
[206.74913025 50.32038879]
[192.51208496 44.37815094]
[180.22480774 52.98179626]
[167.93753052 61.58544540]
[155.65023804 70.18908691]
[143.36296082 78.79273987]
[131.07568359 87.39638519]
[118.78839874 96.00003052]
[118.83763123 109.38603210]
[109.67494202 120.73761749]
[94.23212433 124.03816223]
[95.53945923 138.98107910]
[96.84679413 153.92399597]
[98.15412903 168.86692810]
[99.46146393 183.80984497]
[100.76880646 198.75276184]
[109.67942810 211.82606506]
[103.08082581 225.17926025]
[104.38816071 240.12217712]
[111.79196167 255.37406921]
[99.18569946 266.71066284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
