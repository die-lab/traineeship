%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAUUACGUUGAUGGUGUAAAAUAAGGAAAGCCUUGUUUCCUGAAGUCAGAAUGUCUUUGAUUCUUUUUG\
) } def
/len { sequence length } bind def

/coor [
[121.08843994 237.74980164]
[131.47084045 226.21786499]
[128.22424316 211.57342529]
[124.97764587 196.92898560]
[121.73104858 182.28454590]
[118.48445892 167.64010620]
[113.97386932 153.33435059]
[108.23361969 139.47616577]
[102.49337006 125.61796570]
[96.75311279 111.75977325]
[90.41384125 98.16515350]
[83.48760986 84.85999298]
[76.56138611 71.55483246]
[69.63515472 58.24966812]
[54.83086395 53.40501022]
[47.99621964 39.81301880]
[52.70609283 25.72924423]
[45.77986526 12.42408180]
[30.97557259 7.57942438]
[24.14092827 -6.01256943]
[28.85080147 -20.09634209]
[21.92457390 -33.40150452]
[14.99834442 -46.70666885]
[8.07211494 -60.01182938]
[1.14588559 -73.31699371]
[-5.78034353 -86.62215424]
[-12.70657253 -99.92731476]
[-19.63280106 -113.23248291]
[-33.74689865 -121.58258820]
[-33.30199432 -137.97570801]
[-18.75577354 -145.54798889]
[-5.07213831 -136.50971985]
[-6.32763958 -120.15870667]
[0.59858972 -106.85354614]
[7.52481890 -93.54838562]
[14.45104790 -80.24322510]
[21.37727737 -66.93805695]
[28.30350685 -53.63289642]
[35.22973633 -40.32773590]
[42.15596390 -27.02257156]
[56.39418793 -22.80255508]
[63.60790634 -9.40789413]
[59.08502579 5.49785280]
[66.01125336 18.80301476]
[80.24948120 23.02303314]
[87.46319580 36.41769409]
[82.94031525 51.32344055]
[89.86654663 64.62860107]
[96.79277802 77.93376160]
[103.71900177 91.23892975]
[108.54845428 94.05622101]
[111.29392242 99.48260498]
[110.61130524 106.01952362]
[116.35156250 119.87771606]
[122.09181213 133.73590088]
[127.83206177 147.59410095]
[132.02572632 150.49360657]
[134.59999084 154.28776550]
[135.47804260 158.27206421]
[134.85166931 161.80352783]
[133.12889099 164.39350891]
[136.37548828 179.03794861]
[139.62208557 193.68238831]
[142.86868286 208.32682800]
[146.11528015 222.97126770]
[160.39852905 229.03495789]
[168.36090088 242.35337830]
[166.94068909 257.80532837]
[156.68400574 269.44921875]
[141.53474426 272.80770874]
[127.31810760 266.58944702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 56]
[8 55]
[9 54]
[10 53]
[11 50]
[12 49]
[13 48]
[14 47]
[17 44]
[18 43]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
