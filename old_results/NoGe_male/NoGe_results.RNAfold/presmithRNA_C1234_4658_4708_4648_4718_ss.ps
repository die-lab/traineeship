%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAAGAGGCGGUGUUCUUUAUUCUUUUCCUGCUGGGGACAAGCUCAGCUGGUUGCUAAAAAUGUUAUUU\
) } def
/len { sequence length } bind def

/coor [
[81.63755798 135.77435303]
[85.98688507 121.41873932]
[93.91630554 108.68842316]
[79.14418793 111.29314423]
[64.37207031 113.89786530]
[49.59995270 116.50258636]
[34.82783890 119.10730743]
[20.05572128 121.71203613]
[5.28360510 124.31675720]
[-4.32877731 138.75015259]
[-21.04983330 141.85989380]
[-34.66380692 132.23231506]
[-49.30824661 135.47891235]
[-61.02682877 146.95091248]
[-76.74620819 142.27832031]
[-80.29563904 126.26789856]
[-68.02375793 115.38980103]
[-52.55484009 120.83447266]
[-37.91040039 117.58788300]
[-32.46062851 105.71212769]
[-20.94542503 99.13126373]
[-7.55607367 100.50398254]
[2.67888236 109.54463959]
[17.45099831 106.93991852]
[32.22311401 104.33519745]
[46.99523163 101.73046875]
[61.76734924 99.12574768]
[76.53946686 96.52102661]
[91.31157684 93.91630554]
[103.40824890 85.04666138]
[110.33448029 71.74149323]
[109.84362030 55.92790604]
[122.58348846 48.21136475]
[129.50971985 34.90620422]
[136.43594360 21.60103989]
[143.36218262 8.29587841]
[150.28840637 -5.00928450]
[157.21463013 -18.31444740]
[152.22375488 -33.31000137]
[159.37274170 -47.40494919]
[174.42022705 -52.23700333]
[188.43881226 -44.93939590]
[193.11149597 -29.84166527]
[185.66609192 -15.90102863]
[170.51979065 -11.38821793]
[163.59356689 1.91694486]
[156.66734314 15.22210693]
[149.74110413 28.52726936]
[142.81488037 41.83243179]
[135.88865662 55.13759613]
[136.87492371 69.99951172]
[123.63964081 78.66772461]
[116.71340942 91.97288513]
[131.24107361 88.23829651]
[146.24011230 88.40763855]
[160.67974854 92.46928406]
[173.56762695 100.14408875]
[184.01802063 110.90462494]
[191.31277466 124.01136780]
[194.95051575 138.56356812]
[194.68128967 153.56115723]
[190.52355957 167.97341919]
[182.76309204 180.80989075]
[171.93319702 191.18840027]
[158.77815247 198.39569092]
[144.20204163 201.93644714]
[129.20658875 201.56732178]
[114.82233429 197.31370544]
[102.03783417 189.46791077]
[91.73168182 178.56913757]
[84.61217499 165.36637878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[12 19]
[13 18]
[30 53]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
