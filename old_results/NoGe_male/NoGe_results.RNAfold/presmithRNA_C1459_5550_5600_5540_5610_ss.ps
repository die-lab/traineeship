%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGGAAAGGGAGUAGUACGAAAGGACCCUCUUUUUGGAUGGUGGUCUAUGGACUGUGUUAGCAAAUU\
) } def
/len { sequence length } bind def

/coor [
[119.70838165 369.39089966]
[118.40104675 354.44796753]
[117.09371185 339.50503540]
[115.78637695 324.56213379]
[114.47904205 309.61920166]
[113.17170715 294.67626953]
[111.86436462 279.73336792]
[110.55702972 264.79043579]
[97.71609497 257.29055786]
[91.68228149 243.50444031]
[94.96155548 228.63500977]
[106.50099945 218.42974854]
[105.19365692 203.48683167]
[91.91787720 193.39801025]
[89.85558319 176.51574707]
[100.73044586 163.00804138]
[98.77256012 148.13636780]
[96.81466675 133.26469421]
[94.85677338 118.39302826]
[83.42565918 109.48932648]
[81.53439331 95.12376404]
[90.27155304 83.56486511]
[78.85205078 93.29085541]
[63.87334824 92.49185944]
[53.55331421 81.60623932]
[53.55390167 66.60623932]
[63.87478638 55.72141647]
[78.85355377 54.92359543]
[90.27155304 64.64907837]
[92.22944641 49.77740860]
[94.18733978 34.90573502]
[88.31752014 20.21370316]
[97.64987183 8.60523605]
[99.60775757 -6.26643705]
[101.56565094 -21.13811111]
[94.79349518 -36.07363510]
[104.56063843 -49.24689865]
[120.81948853 -47.10638046]
[126.84432983 -31.85406113]
[116.43732452 -19.18021774]
[114.47943115 -4.30854416]
[112.52153778 10.56312847]
[118.53140259 24.19143677]
[109.05901337 36.86362839]
[107.10112000 51.73529816]
[105.14322662 66.60697174]
[105.14322662 81.60697174]
[116.57434082 90.51067352]
[118.46560669 104.87623596]
[109.72844696 116.43513489]
[111.68634033 131.30680847]
[113.64422607 146.17848206]
[115.60211945 161.05015564]
[127.30205536 168.09283447]
[132.63749695 180.44969177]
[129.82391357 193.41084290]
[120.13658142 202.17948914]
[121.44391632 217.12240601]
[134.58016968 225.16883850]
[140.39167786 239.24291992]
[136.84346008 253.86735535]
[125.49995422 263.48309326]
[126.80728912 278.42602539]
[128.11462402 293.36895752]
[129.42196655 308.31185913]
[130.72929382 323.25479126]
[132.03663635 338.19772339]
[133.34396362 353.14062500]
[134.65130615 368.08355713]
[142.05511475 383.33544922]
[129.44885254 394.67202759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[12 58]
[13 57]
[16 53]
[17 52]
[18 51]
[19 50]
[22 47]
[29 46]
[30 45]
[31 44]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
