%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUUUCUUCCUGUUGGGUCUCCUUCGGUGCUUAGUCCUUUUUUGGUUGUGGUGGAAUCUGUUAGUUUGU\
) } def
/len { sequence length } bind def

/coor [
[59.02087402 353.68283081]
[44.29330444 357.20098877]
[29.22161293 355.74401855]
[15.44065571 349.46994019]
[4.44529247 339.05932617]
[-2.57178330 325.64144897]
[-4.84941196 310.67178345]
[-2.14053321 295.77410889]
[5.26101398 282.56442261]
[16.55236626 272.47561646]
[30.50872040 266.60205078]
[45.61619568 265.58081055]
[49.49848175 251.09193420]
[53.38076782 236.60304260]
[49.20116806 222.30688477]
[60.24657440 210.97949219]
[64.12886047 196.49061584]
[68.01114655 182.00172424]
[71.89343262 167.51283264]
[75.77571869 153.02394104]
[74.42134094 145.51512146]
[80.15628815 137.99490356]
[84.66687012 123.68914795]
[89.17745972 109.38339233]
[86.33901215 95.69270325]
[96.51678467 86.10602570]
[101.02737427 71.80027008]
[105.53795624 57.49451447]
[98.49543762 43.60060883]
[103.27360535 29.15679359]
[116.56272125 22.52844620]
[121.07330322 8.22269249]
[125.58389282 -6.08306170]
[122.35449219 -21.57117081]
[133.56085205 -31.38273430]
[138.07144165 -45.68848801]
[130.55242920 -59.58957291]
[135.14524841 -74.71179199]
[149.12504578 -82.08340454]
[164.19786072 -77.33096313]
[171.42126465 -63.27400970]
[166.50973511 -48.25227737]
[152.37719727 -41.17790222]
[147.86660767 -26.87214851]
[151.41864014 -12.40728188]
[139.88964844 -1.57247460]
[135.37905884 12.73327923]
[130.86846924 27.03903389]
[137.95240784 40.09098053]
[133.58183289 54.66330719]
[119.84371185 62.00510025]
[115.33312988 76.31085205]
[110.82254028 90.61660767]
[113.66098785 104.30729675]
[103.48321533 113.89397430]
[98.97262573 128.19973755]
[94.46204376 142.50549316]
[90.26460266 156.90623474]
[86.38231659 171.39512634]
[82.50003052 185.88400269]
[78.61774445 200.37289429]
[74.73546600 214.86178589]
[78.63737488 230.19429016]
[67.86965179 240.48532104]
[63.98736954 254.97421265]
[60.10508347 269.46310425]
[72.67793274 277.90124512]
[81.82769775 289.96609497]
[86.56188965 304.34893799]
[86.36697388 319.48962402]
[81.26409912 333.74581909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 66]
[13 65]
[14 64]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[22 57]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
