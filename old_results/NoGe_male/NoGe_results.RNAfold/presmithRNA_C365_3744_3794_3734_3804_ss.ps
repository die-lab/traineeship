%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGGGUGAAAUCUGUAAAAUUCUUUUUCUUUUUUGCUUCCUGUUGUUUGAAAUGAGGCCGGUGGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[7.16580391 169.04754639]
[-2.05696654 175.13385010]
[-12.91811562 176.65748596]
[-23.30213165 173.39323425]
[-31.21707344 166.04153442]
[-45.52282715 170.55210876]
[-59.82858276 175.06269836]
[-74.13433838 179.57328796]
[-76.26406097 194.68708801]
[-84.74765015 207.37533569]
[-97.90068054 215.11875916]
[-113.11161041 216.37989807]
[-127.36029053 210.90835571]
[-137.81764221 199.79049683]
[-142.40734863 185.23381042]
[-140.21812439 170.12850952]
[-131.68463135 157.47377014]
[-118.50121307 149.78221130]
[-103.28543854 148.58097839]
[-89.05841064 154.10859680]
[-78.64492035 165.26753235]
[-64.33917236 160.75694275]
[-50.03341675 156.24636841]
[-35.72766113 151.73577881]
[-28.45433044 133.97207642]
[-10.36838245 126.71627045]
[7.69898510 134.76533508]
[21.29360199 128.42605591]
[34.88821793 122.08678436]
[48.48283386 115.74751282]
[62.07745361 109.40824127]
[75.67206573 103.06896973]
[89.26668549 96.72969055]
[102.71977997 90.09535980]
[116.02494049 83.16913605]
[124.69315338 69.93385315]
[139.55506897 70.92012024]
[152.86022949 63.99389267]
[166.16539001 57.06766510]
[179.47055054 50.14143372]
[192.77572632 43.21520615]
[196.94471741 37.43282318]
[202.61190796 35.21324158]
[207.55632019 36.32290268]
[221.41450500 30.58264923]
[235.27270508 24.84239769]
[241.08842468 10.14706230]
[255.62492371 3.94498706]
[270.25796509 9.91575432]
[276.30599976 24.51701355]
[270.18084717 39.08609772]
[255.51646423 44.97942352]
[241.01295471 38.70059204]
[227.15475464 44.44084167]
[213.29656982 50.18109512]
[199.70195007 56.52036667]
[186.39678955 63.44659805]
[173.09162903 70.37282562]
[159.78646851 77.29905701]
[146.48129272 84.22528076]
[138.76475525 96.96515656]
[122.95117188 96.47429657]
[109.64600372 103.40052795]
[104.32135773 109.81496429]
[95.60595703 110.32431030]
[82.01134491 116.66358185]
[68.41672516 123.00285339]
[54.82210922 129.34213257]
[41.22749329 135.68141174]
[27.63287544 142.02067566]
[14.03825855 148.35995483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[7 22]
[8 21]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
