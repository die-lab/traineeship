%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGGAUUAGAUACUCCGUUAUUCUUUUCUUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGGCUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[139.98841858 182.31758118]
[140.59159851 167.21763611]
[146.33518982 153.20919800]
[135.27603149 143.07534790]
[124.21687317 132.94149780]
[113.15770721 122.80764008]
[102.09854889 112.67378998]
[101.16287994 127.64457703]
[91.86470032 139.41503906]
[77.51721191 143.79106140]
[63.23279953 139.21334839]
[54.10137939 127.31304169]
[53.37672043 112.33055878]
[61.31703568 99.60454559]
[75.09297943 93.66962433]
[89.79582214 96.64055634]
[82.86959076 83.33539581]
[75.94335938 70.03022766]
[69.01713562 56.72506714]
[62.09090424 43.41990662]
[48.85562134 34.75168991]
[49.84189224 19.88977623]
[42.91566467 6.58461332]
[29.68038368 -2.08360147]
[30.66665268 -16.94551659]
[23.74042320 -30.25067902]
[8.37446308 -32.41097641]
[-2.76365519 -43.21477127]
[-5.39109707 -58.50778198]
[1.50244212 -72.40953064]
[15.26625633 -79.57452393]
[30.60787773 -77.24765778]
[41.62813950 -66.32367706]
[44.08952713 -51.00306320]
[37.04558563 -37.17691040]
[43.97181320 -23.87174606]
[56.71168518 -16.15520668]
[56.22082520 -0.34161600]
[63.14705658 12.96354675]
[75.88692474 20.68008614]
[75.39606476 36.49367523]
[82.32229614 49.79883957]
[89.24851990 63.10400009]
[96.17475128 76.40916443]
[103.10098267 89.71432495]
[112.23240662 101.61462402]
[123.29156494 111.74848175]
[134.35072327 121.88233185]
[145.40988159 132.01618958]
[156.46903992 142.15003967]
[169.92359924 135.20738220]
[184.91349792 133.29045105]
[199.62713623 136.61148071]
[212.29290771 144.75077820]
[221.39257812 156.70977783]
[225.84321594 171.03340149]
[225.12611389 185.98715210]
[219.34709167 199.76715088]
[230.40625000 209.90100098]
[241.46540833 220.03485107]
[257.58422852 223.05409241]
[262.77291870 238.61073303]
[251.69381714 250.70146179]
[235.74414062 246.88835144]
[231.33155823 231.09400940]
[220.27238464 220.96015930]
[209.21322632 210.82630920]
[195.98934937 217.78434753]
[181.15499878 219.80203247]
[166.49798584 216.61671448]
[153.79139709 208.59396362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[22 39]
[23 38]
[25 36]
[26 35]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
