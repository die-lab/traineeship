%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGCCAGGUUGGUUUCUAUCUUUUUUAUUUUGUUGGAAAGGGAGUAGUACGAAAGGACCCUCUUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[88.03019714 120.74760437]
[80.52341461 115.59134674]
[75.23461151 107.73132324]
[63.74394226 117.37313843]
[52.25327682 127.01495361]
[40.76260757 136.65676880]
[29.27194214 146.29858398]
[17.78127670 155.94039917]
[9.53430939 170.75335693]
[-6.98274517 166.92932129]
[-7.88052940 149.99916077]
[8.13946247 144.44972229]
[19.63012886 134.80792236]
[31.12079620 125.16609955]
[42.61146164 115.52428436]
[54.10212708 105.88246918]
[65.59279633 96.24066162]
[70.41439056 82.03670502]
[67.16779327 67.39226532]
[63.92119980 52.74782562]
[60.67460632 38.10338593]
[56.79232025 23.61450005]
[52.28173065 9.30874443]
[47.77114487 -4.99700928]
[43.26055908 -19.30276299]
[38.74996948 -33.60851669]
[34.23938370 -47.91427231]
[29.72879791 -62.22002792]
[25.21821022 -76.52577972]
[11.08566761 -83.60015869]
[6.17413330 -98.62188721]
[13.39753246 -112.67884827]
[28.47035027 -117.43128967]
[42.45015335 -110.05966949]
[47.04296875 -94.93745422]
[39.52396393 -81.03636932]
[44.03454971 -66.73061371]
[48.54513931 -52.42485809]
[53.05572510 -38.11910629]
[57.56631088 -23.81335068]
[62.07690048 -9.50759602]
[66.58748627 4.79815769]
[71.09807587 19.10391235]
[75.12632751 22.17827606]
[77.06882477 27.94631004]
[75.31904602 34.85679245]
[78.56563568 49.50123215]
[81.81223297 64.14567566]
[85.05883026 78.79011536]
[104.73279572 76.18090820]
[119.11142731 87.88970184]
[120.33965302 105.08617401]
[132.62693787 113.68981934]
[144.91421509 122.29346466]
[157.20149231 130.89710999]
[169.48878479 139.50076294]
[181.77606201 148.10440063]
[194.06333923 156.70805359]
[206.35061646 165.31169128]
[222.79331970 169.44377136]
[223.37451172 186.38775635]
[207.25358582 191.63679504]
[197.74697876 177.59898376]
[185.45968628 168.99533081]
[173.17240906 160.39167786]
[160.88513184 151.78804016]
[148.59785461 143.18438721]
[136.31057739 134.58074951]
[124.02329254 125.97709656]
[111.73600769 117.37345123]
[104.82785034 121.42435455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[18 49]
[19 48]
[20 47]
[21 46]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
