%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUAAUCAUCACAGGACCAAGAAGGAAGCCUUUGGGCACCUUGGGAUGAUUUAUGCUAUGUUGGCUAUU\
) } def
/len { sequence length } bind def

/coor [
[143.60575867 232.77424622]
[155.93548584 224.23152161]
[170.90113831 225.25119019]
[162.84164429 212.60032654]
[149.47772217 206.02349854]
[148.58847046 190.22731018]
[140.52897644 177.57643127]
[132.46948242 164.92556763]
[124.40998077 152.27468872]
[116.35048676 139.62380981]
[108.29099274 126.97294617]
[100.23149872 114.32207489]
[87.91930389 107.69625092]
[87.11763000 93.73741913]
[79.05813599 81.08654785]
[70.99864197 68.43567657]
[62.93914795 55.78480530]
[44.72309494 47.66706467]
[43.94955826 28.53866577]
[34.81813812 16.63836670]
[21.96324921 14.10275555]
[14.62649155 3.73943520]
[16.39098167 -8.42570210]
[7.78733444 -20.71298409]
[-0.81631219 -33.00026321]
[-9.41995907 -45.28754425]
[-18.02360535 -57.57482529]
[-32.06142807 -67.08144379]
[-26.81238937 -83.20236206]
[-9.86840630 -82.62117004]
[-5.73632479 -66.17847443]
[2.86732197 -53.89118958]
[11.47096825 -41.60390854]
[20.07461548 -29.31662941]
[28.67826080 -17.02934837]
[44.88750458 -10.66771412]
[46.71843719 7.50694513]
[55.84985733 19.40724564]
[66.43952179 19.89546585]
[75.08728027 26.40583420]
[78.62823486 36.87098694]
[75.59001923 47.72531128]
[83.64951324 60.37618256]
[91.70900726 73.02705383]
[99.76850128 85.67792511]
[112.08069611 92.30374908]
[112.88237000 106.26258087]
[120.94186401 118.91345215]
[129.00135803 131.56431580]
[137.06085205 144.21519470]
[145.12034607 156.86607361]
[153.17984009 169.51693726]
[161.23933411 182.16781616]
[175.17973328 189.64950562]
[175.49252319 204.54083252]
[183.55201721 217.19169617]
[193.44219971 228.46929932]
[204.93287659 238.11111450]
[216.42353821 247.75292969]
[227.91419983 257.39474487]
[243.93418884 262.94418335]
[243.03640747 279.87432861]
[226.51934814 283.69836426]
[218.27238464 268.88540649]
[206.78172302 259.24359131]
[195.29106140 249.60177612]
[183.80038452 239.95996094]
[182.85806274 254.93034363]
[172.77926636 266.03970337]
[157.97100830 268.43038940]
[144.90829468 261.05709839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[14 45]
[15 44]
[16 43]
[17 42]
[19 38]
[20 37]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
