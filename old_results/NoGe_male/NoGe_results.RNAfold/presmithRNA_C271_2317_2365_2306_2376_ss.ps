%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAAUAAUGAUGGAUUGUCAGUCCUUUGUUGCUUAGUGGAGCGUCUCUUGAUGCCACAGCUUGCUCCUU\
) } def
/len { sequence length } bind def

/coor [
[71.95367432 192.05088806]
[57.01792145 190.66406250]
[43.82542419 183.52557373]
[34.49404526 171.78140259]
[30.52180290 157.31692505]
[32.54638290 142.45417786]
[40.24277115 129.57917786]
[52.37737274 120.75793457]
[37.60525513 118.15320587]
[22.83313751 115.54848480]
[8.06102180 112.94376373]
[-6.71109438 110.33904266]
[-21.64517975 115.56241608]
[-32.83552551 105.73259735]
[-47.60764313 103.12787628]
[-62.37976074 100.52315521]
[-77.15187836 97.91842651]
[-91.92399597 95.31370544]
[-108.57242584 98.51775360]
[-116.26000214 83.40691376]
[-103.86783600 71.83666992]
[-89.31926727 80.54158783]
[-74.54714966 83.14631653]
[-59.77503586 85.75103760]
[-45.00292206 88.35575867]
[-30.23080444 90.96047974]
[-16.35332108 85.55079651]
[-4.10637188 95.56692505]
[10.66574478 98.17164612]
[25.43786049 100.77636719]
[40.20997620 103.38109589]
[54.98209381 105.98581696]
[69.89293671 104.35281372]
[83.75112915 98.61255646]
[88.97412109 87.98414612]
[100.01133728 83.69200897]
[111.04257965 87.99949646]
[125.13796997 82.86919403]
[139.11808777 77.43262482]
[152.97628784 71.69237518]
[159.09278870 57.36665344]
[173.22872925 51.74263763]
[186.84841919 57.66207123]
[200.70661926 51.92182159]
[214.56480408 46.18156815]
[228.42300415 40.44131851]
[242.28118896 34.70106506]
[251.82965088 21.36843872]
[268.12161255 23.24040222]
[274.39727783 38.39123917]
[264.20080566 51.23506927]
[248.02143860 48.55925751]
[234.16325378 54.29951096]
[220.30505371 60.03976059]
[206.44686890 65.78001404]
[192.58866882 71.52026367]
[187.14376831 85.33650970]
[173.17137146 91.35535431]
[158.71653748 85.55056763]
[144.85833740 91.29081726]
[139.72567749 96.93640137]
[130.26828003 96.96458435]
[116.17288208 102.09488678]
[105.91063690 115.19918060]
[89.49138641 112.47075653]
[75.63318634 118.21100616]
[89.38766479 124.19551849]
[99.68890381 135.09893799]
[104.88318634 149.17086792]
[104.13664246 164.15228271]
[97.56912994 177.63812256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[33 66]
[34 65]
[37 63]
[38 62]
[39 60]
[40 59]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
