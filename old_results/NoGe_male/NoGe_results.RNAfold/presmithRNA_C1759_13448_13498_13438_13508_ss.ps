%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGGGUUCUGGGUAGGAGCCGGCUUGAGGCAUCUGAUUGUUGCUCAGAGGGGGCGCGCGCGUGCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[86.40906525 120.72301483]
[76.69336700 111.43358612]
[72.94489288 97.88067627]
[58.84950638 103.01097870]
[48.52789688 115.00160217]
[33.92186356 112.08390045]
[19.82647324 117.21420288]
[5.73108387 122.34450531]
[-8.36430550 127.47480774]
[-22.45969391 132.60510254]
[-36.55508423 137.73541260]
[-44.61103821 151.60917664]
[-60.50126648 153.81829834]
[-72.03614044 142.66812134]
[-70.36710358 126.71212769]
[-56.77448654 118.19037628]
[-41.68538666 123.64002228]
[-27.58999634 118.50971985]
[-13.49460793 113.37941742]
[0.60078174 108.24911499]
[14.69617081 103.11881256]
[28.79156113 97.98851013]
[38.10497284 86.36484528]
[53.71920395 88.91558838]
[67.81459045 83.78528595]
[77.20344543 72.08702087]
[79.16133881 57.21534729]
[81.11923218 42.34367752]
[83.07712555 27.47200203]
[85.03501892 12.60033035]
[83.01557159 3.36100388]
[87.41642761 -2.87192249]
[90.02114868 -17.64403915]
[84.79776764 -32.57812500]
[94.62758636 -43.76847076]
[86.64054108 -57.68201065]
[92.67250061 -72.54791260]
[108.09626007 -76.96232605]
[121.08003998 -67.53889465]
[121.66378784 -51.50646591]
[109.39970398 -41.16374969]
[114.80939484 -27.28626442]
[104.79326630 -15.03931618]
[102.18853760 -0.26719972]
[99.90669250 14.55822277]
[97.94879913 29.42989540]
[95.99090576 44.30156708]
[94.03301239 59.17324066]
[92.07511902 74.04491425]
[104.10207367 74.12751007]
[114.48381805 79.31303406]
[121.25997162 88.20849609]
[123.33612823 98.76639557]
[120.64936829 108.74909210]
[131.70852661 118.88294983]
[142.76768494 129.01679993]
[153.82684326 139.15065002]
[164.88600159 149.28450012]
[175.94515991 159.41836548]
[187.00431824 169.55221558]
[203.12313843 172.57144165]
[208.31184387 188.12809753]
[197.23274231 200.21881104]
[181.28306580 196.40571594]
[176.87046814 180.61137390]
[165.81130981 170.47752380]
[154.75215149 160.34367371]
[143.69299316 150.20980835]
[132.63383484 140.07595825]
[121.57466888 129.94210815]
[110.51551056 119.80825806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[32 44]
[33 43]
[35 41]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
