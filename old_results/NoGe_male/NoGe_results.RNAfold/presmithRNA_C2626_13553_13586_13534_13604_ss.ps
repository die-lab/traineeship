%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGAUUACGUUGAUGGUGUAAAAUAAGGAAAGCCUUGUUUCCUGAAGUCAGAAUGUCUUUGAUUCUUUUU\
) } def
/len { sequence length } bind def

/coor [
[88.42784119 119.65135193]
[80.92784119 132.64173889]
[73.42784119 145.63211060]
[76.17450714 161.43829346]
[65.42188263 173.34461975]
[49.41846466 172.21757507]
[40.44070816 158.92173767]
[45.37557602 143.65652466]
[60.43746185 138.13211060]
[67.93746185 125.14173126]
[75.43746185 112.15135193]
[81.41975403 98.43602753]
[91.99485779 94.19564819]
[86.25460815 80.33745575]
[80.51435852 66.47926331]
[66.18863678 60.36276245]
[60.56462479 46.22681046]
[66.48405457 32.60712433]
[60.74380493 18.74892998]
[46.41809082 12.63242912]
[40.79407120 -1.50352132]
[46.71350479 -15.12320900]
[40.97325516 -28.98140144]
[35.23300552 -42.83959579]
[29.49275208 -56.69778824]
[23.75250053 -70.55598450]
[18.01224899 -84.41417694]
[12.27199745 -98.27236938]
[6.53174639 -112.13056183]
[-6.80087996 -121.67902374]
[-4.92891788 -137.97097778]
[10.22191906 -144.24665833]
[23.06574821 -134.05018616]
[20.38993835 -117.87081146]
[26.13018990 -104.01261902]
[31.87044144 -90.15442657]
[37.61069489 -76.29623413]
[43.35094452 -62.43803787]
[49.09119797 -48.57984543]
[54.83144760 -34.72165298]
[60.57170105 -20.86346054]
[74.38794708 -15.41855907]
[80.40679169 -1.44615233]
[74.60199738 13.00867844]
[80.34224701 26.86687088]
[94.15849304 32.31177521]
[100.17734528 46.28417969]
[94.37255096 60.73900986]
[100.11280060 74.59720612]
[105.85305023 88.45539856]
[116.22574615 99.29085541]
[129.82035828 105.63012695]
[143.41497803 111.96940613]
[157.00959778 118.30867767]
[170.60421753 124.64794922]
[184.69926453 117.87568665]
[199.83694458 121.79801941]
[208.86970520 134.56294250]
[207.53254700 150.14324951]
[196.45684814 161.18240356]
[180.87220764 162.46804810]
[168.13720703 153.39312744]
[164.26493835 138.24256897]
[150.67031860 131.90328979]
[137.07571411 125.56401825]
[123.48109436 119.22474670]
[109.88647461 112.88547516]
[120.76100922 123.21719360]
[120.46768188 138.21432495]
[109.19745636 148.11291504]
[94.28787231 146.46844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[13 50]
[14 49]
[15 48]
[18 45]
[19 44]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
