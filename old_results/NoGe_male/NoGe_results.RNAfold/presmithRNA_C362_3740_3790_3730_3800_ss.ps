%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUGGUGGGUGAAAUCUGUAAAAUUCUUUUUCUUUUUUGCUUCCUGUUGUUUGAAAUGAGGCCGGUGGA\
) } def
/len { sequence length } bind def

/coor [
[104.73680878 152.20370483]
[91.47195435 159.20681763]
[76.47463989 158.92291260]
[63.48434067 151.42277527]
[55.74008942 138.57650757]
[55.17285919 123.58724213]
[61.92408752 110.19243622]
[74.31040192 101.73198700]
[89.24273682 100.31535339]
[78.18357849 90.18149567]
[67.12442017 80.04764557]
[56.06525803 69.91378784]
[45.00609970 59.77993774]
[33.94694138 49.64608383]
[22.88777924 39.51222992]
[11.82861996 29.37837791]
[-1.66099513 31.50395012]
[-13.69102097 25.46759987]
[-19.86694908 13.73024178]
[-18.08240318 0.78617305]
[-26.64181328 -3.23624063]
[-28.90765762 -10.52203465]
[-39.04151154 -21.58119583]
[-49.17536545 -32.64035416]
[-59.30921555 -43.69951630]
[-75.10355377 -48.11210632]
[-78.91666412 -64.06178284]
[-66.82594299 -75.14089203]
[-51.26929092 -69.95218658]
[-48.25005722 -53.83336639]
[-38.11620331 -42.77420807]
[-27.98235130 -31.71504784]
[-17.84849739 -20.65588760]
[-7.47580194 -9.82042885]
[9.17899895 -10.62546253]
[21.61052704 0.98149127]
[21.96247292 18.31921768]
[33.02163315 28.45307159]
[44.08079147 38.58692551]
[55.13995361 48.72077560]
[66.19911194 58.85462952]
[77.25827026 68.98848724]
[88.31743622 79.12233734]
[99.37659454 89.25618744]
[112.36697388 96.75618744]
[126.67272949 101.26677704]
[138.01875305 91.00933075]
[152.87753296 87.82923126]
[167.23764038 92.48260498]
[177.27331543 103.62446594]
[180.36375427 118.19549561]
[194.66950989 122.70607758]
[208.97526550 127.21666718]
[223.28102112 131.72724915]
[237.18209839 124.20825195]
[252.30432129 128.80107117]
[259.67593384 142.78086853]
[254.92349243 157.85368347]
[240.86654663 165.07708740]
[225.84480286 160.16555786]
[218.77043152 146.03300476]
[204.46467590 141.52241516]
[190.15892029 137.01184082]
[175.85316467 132.50125122]
[164.96403503 142.66453552]
[150.35258484 146.03518677]
[135.92041016 141.61038208]
[125.57283020 130.48274231]
[122.16213989 115.57253265]
[107.85638428 111.06194305]
[114.09582520 124.70266724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[20 34]
[22 33]
[23 32]
[24 31]
[25 30]
[45 70]
[46 69]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
