%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAACUUGGGGCCUUCAAAGUCUCAGAUGUCUUUUUGUCAAGGCCCGAUGGCUCUUUGGUCUCAGUGGG\
) } def
/len { sequence length } bind def

/coor [
[53.16632843 378.54119873]
[59.21266556 362.70205688]
[59.21266556 347.70205688]
[59.21266556 332.70205688]
[56.68356323 329.82574463]
[55.60519028 325.46432495]
[56.71572113 320.40942383]
[60.32204056 315.77627563]
[62.27993393 300.90460205]
[64.23782349 286.03292847]
[66.19571686 271.16128540]
[68.15361023 256.28961182]
[70.11150360 241.41792297]
[72.06939697 226.54624939]
[74.02729034 211.67457581]
[62.54674530 203.97462463]
[55.52857590 191.98759460]
[54.42235184 178.07431030]
[59.50660324 165.00439453]
[69.82173920 155.40501404]
[83.35057831 151.23278809]
[85.95529938 136.46067810]
[88.56002045 121.68856049]
[91.16474152 106.91644287]
[93.44659424 92.09101868]
[95.40448761 77.21935272]
[89.53466797 62.52731705]
[98.86701202 50.91884995]
[96.52160645 44.18716812]
[97.95399475 38.27178574]
[101.69896698 34.85803223]
[104.94556427 20.21359253]
[108.19216156 5.56915283]
[111.43875122 -9.07528687]
[114.68534851 -23.71972656]
[105.98339844 -36.91258621]
[109.24074554 -52.37755585]
[122.52487183 -60.93953705]
[137.95452881 -57.51886368]
[146.37559509 -44.14495850]
[142.79197693 -28.75232124]
[129.32978821 -20.47313309]
[126.08319092 -5.82869291]
[122.83660126 8.81574726]
[119.59000397 23.46018791]
[116.34340668 38.10462570]
[113.73868561 52.87674332]
[119.74855042 66.50505066]
[110.27616119 79.17723846]
[108.31826782 94.04891205]
[110.51857758 102.08978271]
[105.93685913 109.52116394]
[103.33213806 124.29328156]
[100.72741699 139.06539917]
[98.12269592 153.83750916]
[110.81302643 164.20066833]
[116.59862518 179.43005371]
[114.01965332 195.42196655]
[103.85697174 207.91654968]
[88.89896393 213.63247681]
[86.94107056 228.50415039]
[84.98317719 243.37582397]
[83.02528381 258.24749756]
[81.06739044 273.11917114]
[79.10949707 287.99084473]
[77.15160370 302.86251831]
[75.19371033 317.73419189]
[74.21266937 332.70205688]
[74.21266937 347.70205688]
[74.21266937 362.70205688]
[80.25900269 378.54119873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[21 55]
[22 54]
[23 53]
[24 52]
[25 50]
[26 49]
[28 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
