%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAAGAUGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAUUCGAAUCAGAGGAAUCUGUCCUGUAA\
) } def
/len { sequence length } bind def

/coor [
[87.18828583 153.33644104]
[73.68408966 148.12887573]
[62.01201630 139.57057190]
[52.98468399 128.25732422]
[47.23057938 114.97679901]
[45.15030289 100.65358734]
[46.88868713 86.28486633]
[52.32470322 72.87100220]
[40.42440414 63.73957825]
[28.52410316 54.60815811]
[16.62380219 45.47673798]
[4.72350264 36.34531403]
[-7.17679739 27.21389389]
[-16.66753578 31.49007034]
[-27.01249123 31.82220078]
[-36.64690781 28.20529747]
[-44.13075638 21.22828484]
[-48.36392593 11.97860241]
[-48.74782562 1.87287545]
[-45.26964188 -7.55999804]
[-55.64233780 -18.39545822]
[-66.24893951 -29.00205994]
[-76.85554504 -39.60866165]
[-87.46214294 -50.21526337]
[-103.44063568 -51.65313339]
[-112.15827942 -65.12095642]
[-106.92765045 -80.28736877]
[-91.76123810 -85.51799774]
[-78.29341125 -76.80035400]
[-76.85554504 -60.82186508]
[-66.24893951 -50.21526337]
[-55.64233780 -39.60866165]
[-45.03573608 -29.00205994]
[-37.85571289 -26.42056847]
[-34.21048355 -17.69385147]
[-14.11439228 -18.99829292]
[1.07457483 -5.35834837]
[1.95462394 15.31359386]
[13.85492420 24.44501495]
[25.75522423 33.57643509]
[37.65552521 42.70785904]
[49.55582428 51.83927917]
[61.45612335 60.97069931]
[73.85711670 51.77691269]
[88.32865906 46.40245819]
[103.72459412 45.27300644]
[118.82553101 48.47800446]
[132.43545532 55.76361847]
[143.47645569 66.55281067]
[151.07405090 79.99107361]
[154.62652588 95.01406097]
[153.85249329 110.43194580]
[148.81327820 125.02361298]
[164.55564880 126.60103607]
[170.54327393 140.23912048]
[182.83056641 148.84277344]
[195.11784363 157.44642639]
[207.40512085 166.05006409]
[223.39054871 164.69145203]
[234.31440735 176.44087219]
[231.79687500 192.28515625]
[217.76914978 200.06994629]
[202.99214172 193.82341003]
[198.80148315 178.33734131]
[186.51419067 169.73370361]
[174.22691345 161.13005066]
[161.93963623 152.52641296]
[147.07612610 151.56437683]
[140.20962524 137.31089783]
[129.05123901 146.52894592]
[115.87028503 152.50762939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[20 35]
[21 33]
[22 32]
[23 31]
[24 30]
[53 69]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
