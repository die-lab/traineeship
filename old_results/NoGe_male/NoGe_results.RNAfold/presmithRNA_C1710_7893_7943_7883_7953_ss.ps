%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGCAUAUCCUGUUUCUUCAUGAGACGGGCUCGGGGAACCCUCUUGGUCUCAAUAGUGACAGGGAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[79.67273712 332.34173584]
[65.05377197 328.26123047]
[52.89837265 319.17218018]
[44.85046387 306.30380249]
[41.99845505 291.39639282]
[44.72805405 276.46609497]
[52.67010880 263.53210449]
[64.75051880 254.34362793]
[79.33551025 250.14334106]
[80.64284515 235.20042419]
[81.95018005 220.25749207]
[83.25752258 205.31457520]
[84.56485748 190.37165833]
[85.87219238 175.42874146]
[87.17952728 160.48580933]
[80.58092499 147.13262939]
[89.49154663 134.05931091]
[90.79888153 119.11639404]
[81.44877625 110.29316711]
[78.91060638 97.69033813]
[84.11636353 85.93560028]
[95.15453339 79.34525299]
[97.11242676 64.47357941]
[99.07032013 49.60190582]
[101.02821350 34.73023224]
[102.98610687 19.85856056]
[104.94399261 4.98688793]
[99.07417297 -9.70514297]
[108.40652466 -21.31361008]
[110.36441803 -36.18528366]
[100.88592529 -46.01615143]
[98.93047333 -59.33287811]
[105.00278473 -71.12417603]
[116.62952423 -77.08677673]
[119.23424530 -91.85889435]
[121.83896637 -106.63100433]
[118.63491821 -123.27944183]
[133.74575806 -130.96702576]
[145.31599426 -118.57485199]
[136.61108398 -104.02628326]
[134.00636292 -89.25416565]
[131.40164185 -74.48204803]
[141.61387634 -61.30098724]
[139.23645020 -44.46020126]
[125.23609161 -34.22739029]
[123.27819824 -19.35571861]
[129.28805542 -5.72740889]
[119.81566620 6.94478035]
[117.85777283 21.81645393]
[115.89988708 36.68812561]
[113.94199371 51.55979919]
[111.98410034 66.43147278]
[110.02620697 81.30314636]
[120.34891510 93.99844360]
[118.56758881 110.26361084]
[105.74180603 120.42372894]
[104.43447113 135.36665344]
[110.93955994 149.78866577]
[102.12245178 161.79315186]
[100.81510925 176.73606873]
[99.50777435 191.67900085]
[98.20043945 206.62191772]
[96.89310455 221.56483459]
[95.58576965 236.50775146]
[94.27843475 251.45066833]
[107.91246796 258.11981201]
[118.21379089 269.26644897]
[123.78922272 283.38305664]
[123.88473511 298.56051636]
[118.48741150 312.74618530]
[108.32719421 324.02157593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[17 57]
[18 56]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[29 46]
[30 45]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
