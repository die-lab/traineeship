%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCCUGCUAACCCGUUGGUUACUCCUGUUCAUAUCCAGCCUGAGUGGUACUUCUUGUUUGCGUAUGCUA\
) } def
/len { sequence length } bind def

/coor [
[91.68369293 280.08752441]
[99.73179626 265.79907227]
[99.07750702 250.81335449]
[86.57592773 242.76049805]
[81.14920807 228.72430420]
[85.07395172 214.01206970]
[97.04756165 204.31987000]
[96.39326477 189.33413696]
[95.73897552 174.34841919]
[87.45388794 161.97074890]
[94.58186340 147.84622192]
[93.92757416 132.86050415]
[93.27328491 117.87477112]
[82.66167450 108.00866699]
[82.02965546 93.53293610]
[91.74098969 82.77951813]
[80.37118530 72.13220215]
[79.92111969 56.92522812]
[90.14177704 46.15147018]
[79.86190796 31.05197525]
[88.18972778 15.75957870]
[86.88239288 0.81665838]
[85.57505798 -14.12626171]
[84.26771545 -29.06918335]
[82.96038055 -44.01210403]
[81.65304565 -58.95502472]
[79.37119293 -73.78044891]
[76.12460327 -88.42488861]
[72.87800598 -103.06932831]
[58.59475708 -109.13301849]
[50.63238907 -122.45143890]
[52.05259705 -137.90338135]
[62.30928040 -149.54727173]
[77.45854187 -152.90577698]
[91.67517090 -146.68750000]
[99.49259186 -133.28347778]
[97.90484619 -117.84785461]
[87.52244568 -106.31591797]
[90.76904297 -91.67147827]
[94.01563263 -77.02703857]
[97.10733795 -74.76628876]
[99.10413361 -70.74166870]
[99.11400604 -65.56622314]
[96.59597015 -60.26235962]
[97.90330505 -45.31943893]
[99.21063995 -30.37651825]
[100.51797485 -15.43359852]
[101.82530975 -0.49067777]
[103.13264465 14.45224285]
[112.30392456 22.63708687]
[113.34505463 35.29182816]
[105.12750244 45.49718094]
[116.24826050 55.33914948]
[117.12528229 70.52748108]
[106.72671509 82.12522888]
[117.33832550 91.99133301]
[117.97034454 106.46706390]
[108.25901031 117.22048187]
[108.91329956 132.20620728]
[109.56758881 147.19192505]
[117.89948273 160.64146423]
[110.72470093 173.69412231]
[111.37899017 188.67985535]
[112.03327942 203.66557312]
[124.80605316 212.27732849]
[129.99812317 226.59152222]
[125.81538391 241.04727173]
[114.06323242 250.15907288]
[114.71752167 265.14477539]
[123.98032379 278.67742920]
[116.64907837 293.34661865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[7 64]
[8 63]
[9 62]
[11 60]
[12 59]
[13 58]
[16 55]
[19 52]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
