%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAUUGUUGGGGCUUGGGUAUUAAAAGAUGGCUUAAAACCCAAAGGACUUGGCGGUGCUGUCAUUCGAA\
) } def
/len { sequence length } bind def

/coor [
[91.54217529 211.79415894]
[91.54217529 196.79415894]
[91.54217529 181.79415894]
[91.54217529 166.79415894]
[91.54217529 151.79415894]
[83.80487061 139.06689453]
[91.54217529 125.26671600]
[91.54217529 110.26671600]
[85.80192566 96.40852356]
[75.19532013 85.80192566]
[64.58872223 75.19532013]
[53.98211670 64.58872223]
[43.37551498 53.98211670]
[27.79959488 53.81342316]
[17.19408798 42.90572357]
[17.45090294 28.05750465]
[6.84430075 17.45090294]
[-3.76230097 6.84430075]
[-14.36890221 -3.76230097]
[-24.97550392 -14.36890221]
[-35.58210754 -24.97550392]
[-46.41756439 -35.34820175]
[-57.47672653 -45.48205185]
[-68.53588867 -55.61590576]
[-84.65470123 -58.63513947]
[-89.84340668 -74.19178772]
[-78.76430511 -86.28250885]
[-62.81462479 -82.46940613]
[-58.40203094 -66.67506409]
[-47.34287262 -56.54121399]
[-36.28371429 -46.40736008]
[-28.99791908 -44.14151382]
[-24.97550392 -35.58210754]
[-14.36890221 -24.97550392]
[-3.76230097 -14.36890221]
[6.84430075 -3.76230097]
[17.45090294 6.84430075]
[28.05750465 17.45090294]
[42.90572357 17.19408798]
[53.81342316 27.79959488]
[53.98211670 43.37551498]
[64.58872223 53.98211670]
[75.19532013 64.58872223]
[85.80192566 75.19532013]
[96.40852356 85.80192566]
[110.38864136 91.23849487]
[125.37436676 90.58420563]
[138.82391357 82.25231171]
[151.87655640 89.42709351]
[166.86228943 88.77280426]
[181.84800720 88.11850739]
[195.38066101 78.85570526]
[210.04983521 86.18695068]
[210.76515198 102.57048798]
[196.79075623 111.15234375]
[182.50230408 103.10423279]
[167.51657104 103.75852203]
[152.53085327 104.41281128]
[140.15318298 112.69790649]
[126.02865601 105.56992340]
[111.04293060 106.22421265]
[109.75277710 107.83287811]
[108.23690796 109.19039154]
[106.54217529 110.26671600]
[106.54217529 125.26671600]
[114.27947235 139.06689453]
[106.54217529 151.79415894]
[106.54217529 166.79415894]
[106.54217529 181.79415894]
[106.54217529 196.79415894]
[106.54217529 211.79415894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[7 65]
[8 64]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[24 29]
[46 61]
[47 60]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
