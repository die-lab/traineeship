%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACGUUAGUUUGUGGGGCUAGAGAUGCUUUUAGUUGGAGUGCUGUACAGUGGUGGCUUGAUGGUCUUU\
) } def
/len { sequence length } bind def

/coor [
[9.23404408 255.17628479]
[-1.95707536 259.20782471]
[-13.55974674 257.21096802]
[-23.69359970 268.27011108]
[-33.82745361 279.32928467]
[-43.96130753 290.38842773]
[-46.98053741 306.50726318]
[-62.53718948 311.69595337]
[-74.62790680 300.61685181]
[-70.81480408 284.66717529]
[-55.02046585 280.25457764]
[-44.88661194 269.19543457]
[-34.75275803 258.13626099]
[-24.61890602 247.07710266]
[-26.70055199 229.12736511]
[-15.04712105 214.91291809]
[3.58169246 213.38342285]
[12.71311378 201.48312378]
[21.84453583 189.58282471]
[30.97595596 177.68252563]
[40.10737991 165.78222656]
[49.23880005 153.88192749]
[58.37022018 141.98162842]
[56.17752075 127.29395294]
[65.26855469 115.09527588]
[80.68920135 112.89495850]
[89.82062531 100.99465942]
[91.93553162 92.93090820]
[99.61911011 88.78599548]
[109.26092529 77.29533386]
[118.90274048 65.80466461]
[121.84620667 50.25967789]
[135.95425415 45.48346329]
[145.59606934 33.99279404]
[155.23788452 22.50212860]
[158.49899292 13.62471390]
[165.55957031 10.73249245]
[175.69342041 -0.32666728]
[185.82728577 -11.38582706]
[181.13230896 -26.00953484]
[184.39389038 -41.01812363]
[194.73466492 -52.37435532]
[209.37301636 -57.02346420]
[224.37130737 -53.71485901]
[235.69506836 -43.33854294]
[240.29826355 -28.68568802]
[236.94267273 -13.69784260]
[226.53089905 -2.40665960]
[211.86369324 2.15058875]
[196.88644409 -1.25197423]
[186.75259399 9.80718613]
[176.61872864 20.86634636]
[166.72854614 32.14394379]
[157.08673096 43.63460922]
[147.44491577 55.12527466]
[145.19110107 69.84837341]
[130.39340210 75.44647980]
[120.75159454 86.93714142]
[111.10977936 98.42781067]
[101.72092438 110.12607574]
[92.58950806 122.02637482]
[94.45531464 137.49105835]
[85.02523041 149.42958069]
[70.27052307 151.11303711]
[61.13909912 163.01333618]
[52.00767899 174.91365051]
[42.87625504 186.81394958]
[33.74483490 198.71424866]
[24.61341476 210.61454773]
[15.48199272 222.51484680]
[19.38029671 234.13941956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[26 61]
[27 60]
[29 59]
[30 58]
[31 57]
[33 55]
[34 54]
[35 53]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
