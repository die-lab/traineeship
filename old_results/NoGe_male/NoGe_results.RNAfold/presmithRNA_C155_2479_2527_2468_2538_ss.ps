%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGCUGAGGGUGUUUGUUGCGAGGCUAGGGGAGGGGGUGUUUGGUGUUGGUAACUGGUUUUUUUUGGUU\
) } def
/len { sequence length } bind def

/coor [
[75.15584564 386.29638672]
[58.89699173 384.15585327]
[52.87214661 368.90353394]
[63.27915192 356.22970581]
[65.23704529 341.35803223]
[67.19493866 326.48635864]
[69.15283203 311.61468506]
[71.11072540 296.74301147]
[73.06861877 281.87133789]
[75.02651215 266.99966431]
[76.98440552 252.12799072]
[78.94229126 237.25631714]
[65.50927734 228.87419128]
[56.98244858 215.46432495]
[55.07596588 199.62992859]
[60.21304321 184.47038269]
[71.43329620 172.97463989]
[86.57183075 167.43185425]
[87.87916565 152.48893738]
[89.18650055 137.54600525]
[90.49383545 122.60308838]
[91.80117035 107.66017151]
[92.78221893 92.69228363]
[93.43650818 77.70655823]
[86.30853271 63.58202744]
[94.59362030 51.20436478]
[95.24790955 36.21864319]
[95.90220642 21.23291969]
[96.55649567 6.24719572]
[97.21078491 -8.73852730]
[97.86507416 -23.72425079]
[90.73709869 -37.84878540]
[99.02218628 -50.22644806]
[88.16152191 -61.70780182]
[88.68392181 -77.50345612]
[100.27945709 -88.24212646]
[116.06870270 -87.55274963]
[126.68418121 -75.84432983]
[125.82791138 -60.06325150]
[114.00791168 -49.57215500]
[121.18269348 -36.51950073]
[112.85079956 -23.06995964]
[112.19651031 -8.08423710]
[111.54222107 6.90148640]
[110.88792419 21.88720894]
[110.23363495 36.87293243]
[109.57934570 51.85865784]
[116.75412750 64.91130829]
[108.42223358 78.36085510]
[107.76794434 93.34657288]
[110.66069031 101.16506958]
[106.74409485 108.96750641]
[105.43675995 123.91042328]
[104.12942505 138.85334778]
[102.82208252 153.79626465]
[101.51474762 168.73918152]
[114.06479645 175.58924866]
[122.98266602 186.70907593]
[126.91969299 200.36315918]
[125.30122375 214.43702698]
[118.41024017 226.76467896]
[107.33855438 235.46188354]
[93.81396484 239.21420288]
[91.85607147 254.08587646]
[89.89818573 268.95755005]
[87.94029236 283.82922363]
[85.98239899 298.70089722]
[84.02450562 313.57257080]
[82.06661224 328.44424438]
[80.10871887 343.31591797]
[78.15082550 358.18759155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 50]
[24 49]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
