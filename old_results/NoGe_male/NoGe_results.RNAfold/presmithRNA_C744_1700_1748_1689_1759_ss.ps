%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Mar 30 18:23:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUAUUUUGAUUGUUAGGCUUGUCGGGUACGCUGCUUUUACGUUGAUGCGUGGGUCUUUUAGGAGGCGGU\
) } def
/len { sequence length } bind def

/coor [
[123.21144104 120.86463928]
[114.54364777 127.61496735]
[104.07380676 130.94363403]
[93.09919739 130.43818665]
[82.97963715 126.16125488]
[74.96900940 118.64278412]
[70.05987549 108.81436157]
[55.07415009 109.46865082]
[40.08842850 110.12294006]
[25.10270500 110.77722931]
[10.11698055 111.43152618]
[-4.86874247 112.08581543]
[-19.96823883 122.36568451]
[-35.26063538 114.03786469]
[-50.20355606 115.34519958]
[-65.45544434 122.74900055]
[-76.79204559 110.14273834]
[-67.81672668 95.75942230]
[-51.51089096 100.40227509]
[-36.56797028 99.09494019]
[-28.38312721 89.92366791]
[-15.72838783 88.88253021]
[-5.52303314 97.10009003]
[9.46269035 96.44580078]
[24.44841385 95.79151154]
[39.43413544 95.13721466]
[54.41986084 94.48292542]
[69.40558624 93.82863617]
[78.69535828 77.19174957]
[95.92619324 69.05637360]
[114.67549133 72.45487213]
[127.95467377 86.12049866]
[142.59910583 82.87390900]
[157.24354553 79.62731171]
[171.88798523 76.38072205]
[186.53242493 73.13412476]
[201.17686462 69.88753510]
[215.82130432 66.64093781]
[230.46574402 63.39434433]
[245.11019897 60.14774704]
[248.66960144 45.34599304]
[258.26354980 33.60533142]
[271.94766235 27.22056389]
[286.98513794 27.40953064]
[300.39401245 34.08119583]
[309.53860474 45.86431122]
[324.18304443 42.61771774]
[338.82748413 39.37112427]
[347.10668945 25.90893364]
[362.49932861 22.32531738]
[375.87322998 30.74637413]
[379.29388428 46.17604065]
[370.73190308 59.46016312]
[355.26693726 62.71751404]
[342.07409668 54.01556396]
[327.42965698 57.26215744]
[312.78521729 60.50875092]
[309.47714233 75.05255890]
[300.14413452 86.76597595]
[286.59542847 93.29235077]
[271.49508667 93.28894043]
[257.83819580 86.70286560]
[248.35678101 74.79219055]
[233.71234131 78.03878021]
[219.06790161 81.28537750]
[204.42346191 84.53197479]
[189.77902222 87.77856445]
[175.13458252 91.02516174]
[160.49014282 94.27175140]
[145.84570312 97.51834869]
[131.20126343 100.76494598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[14 20]
[15 19]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
