%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGUCAGCUAAUUAAGCUACCGGGCCCAUACCCCGAACAUGAUGGUUAAAGUCCCUCCUUCAUCAAUG\
) } def
/len { sequence length } bind def

/coor [
[82.77045441 135.72462463]
[73.91581726 130.43374634]
[66.64054108 122.96928406]
[61.47211838 113.79277802]
[58.80540848 103.49198914]
[44.49965668 108.00257874]
[30.19390106 112.51316833]
[22.67368126 118.24810791]
[15.16485119 116.89373016]
[0.67596400 120.77601624]
[-13.81292343 124.65830231]
[-28.30181122 128.54058838]
[-37.53628922 141.65943909]
[-53.55858612 142.47521973]
[-64.07776642 130.36215210]
[-61.02442169 114.61234283]
[-46.74080658 107.30769348]
[-32.18409729 114.05170441]
[-17.69520950 110.16941833]
[-3.20632172 106.28713226]
[11.28256607 102.40484619]
[25.68331337 98.20741272]
[39.98906708 93.69682312]
[54.29482269 89.18623352]
[60.03507233 75.32804108]
[53.10884476 62.02288055]
[46.18261337 48.71772003]
[31.03632545 44.20490646]
[23.59091187 30.26427078]
[28.26360703 15.16654015]
[42.28218079 7.86893177]
[57.32966614 12.70098686]
[64.47865295 26.79593468]
[59.48777771 41.79148865]
[66.41400909 55.09665298]
[73.34023285 68.40181732]
[85.84010315 61.97877121]
[99.51509094 60.20056152]
[112.72722626 63.10084534]
[123.95386505 70.16331482]
[131.96313477 80.40296173]
[135.94847107 92.50000000]
[150.94847107 92.50000000]
[165.94847107 92.50000000]
[180.94847107 92.50000000]
[194.74864197 84.76270294]
[207.47592163 92.50000000]
[222.47592163 92.50000000]
[229.53221130 78.91812134]
[242.09867859 70.18070221]
[257.28765869 68.29554749]
[271.60879517 73.69583893]
[281.77124023 85.14063263]
[285.43972778 100.00000000]
[281.77124023 114.85936737]
[271.60879517 126.30416107]
[257.28765869 131.70445251]
[242.09867859 129.81929016]
[229.53221130 121.08187866]
[222.47592163 107.50000000]
[207.47592163 107.50000000]
[194.74864197 115.23729706]
[180.94847107 107.50000000]
[165.94847107 107.50000000]
[150.94847107 107.50000000]
[135.94847107 107.50000000]
[133.20051575 116.65204620]
[128.13771057 124.88391876]
[121.05220795 131.61442566]
[112.38088226 136.35191345]
[102.67851257 138.72991943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[7 22]
[9 21]
[10 20]
[11 19]
[12 18]
[25 36]
[26 35]
[27 34]
[42 66]
[43 65]
[44 64]
[45 63]
[47 61]
[48 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
