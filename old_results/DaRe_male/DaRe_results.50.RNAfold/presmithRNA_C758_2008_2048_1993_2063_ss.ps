%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCUCACUUACACCGAGAAAACAUCCGUGCAAAUCGGAUCGUCCUGAGCUAAAUAGCUAGCUUAACCA\
) } def
/len { sequence length } bind def

/coor [
[94.90661621 137.57920837]
[87.53635406 135.81616211]
[80.66380310 132.62286377]
[74.56340027 128.12683105]
[69.47875977 122.50762177]
[55.88414001 128.84689331]
[42.28952408 135.18617249]
[28.69490623 141.52545166]
[26.72251511 156.82620239]
[16.77354622 168.61694336]
[2.02267551 173.13528442]
[-12.82314587 168.93943787]
[-23.02667046 157.36827087]
[-25.33198929 142.11413574]
[-19.00348663 128.04452515]
[-6.06056261 119.64904022]
[9.36674213 119.60662842]
[22.35563087 127.93083191]
[35.95024872 121.59155273]
[49.54486465 115.25228119]
[63.13948059 108.91300964]
[63.30768585 90.41806793]
[72.20391083 74.20238495]
[87.71201324 64.12319946]
[85.75411987 49.25152588]
[83.47226715 34.42610550]
[80.86754608 19.65398788]
[78.26282501 4.88187122]
[75.65810394 -9.89024544]
[73.05337524 -24.66236115]
[59.42127609 -32.32394028]
[53.95164490 -46.97375488]
[59.22708130 -61.69461823]
[72.75668335 -69.53578186]
[88.15218353 -66.79489899]
[98.14430237 -54.76611328]
[98.01506805 -39.12906647]
[87.82549286 -27.26708412]
[90.43021393 -12.49496746]
[93.03494263 2.27714849]
[95.63966370 17.04926491]
[98.24438477 31.82138062]
[102.64523315 38.05430603]
[100.62579346 47.29363251]
[102.58368683 62.16530609]
[121.55358124 68.79771423]
[134.47099304 84.19208527]
[137.70855713 104.02548981]
[152.01431274 108.53607941]
[166.32005310 113.04666901]
[180.62580872 117.55725098]
[194.93156433 122.06784058]
[209.23731995 126.57843018]
[223.54307556 131.08901978]
[237.44416809 123.57000732]
[252.56637573 128.16282654]
[259.93798828 142.14262390]
[255.18556213 157.21543884]
[241.12860107 164.43884277]
[226.10687256 159.52731323]
[219.03248596 145.39477539]
[204.72673035 140.88418579]
[190.42097473 136.37359619]
[176.11523438 131.86300659]
[161.80947876 127.35241699]
[147.50372314 122.84183502]
[133.19796753 118.33124542]
[128.89027405 124.56606293]
[123.42891693 129.81988525]
[117.03196716 133.88290405]
[109.95487976 136.59289551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[24 45]
[25 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
