%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUACUAGAAGACGCCUCACUAAGAUGCUAAAAUUGGAUAGCGUUGACCUUUUAAGUCAAAACUUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[48.22970200 217.93820190]
[43.58242416 232.31108093]
[35.07295227 244.79168701]
[23.39110184 254.36827087]
[9.48387337 260.26452637]
[-5.52133608 262.00244141]
[-20.40812302 259.44113159]
[-33.96968079 252.78825378]
[-45.10663986 242.58311462]
[-52.91616821 229.65299988]
[-56.76519012 215.04609680]
[-56.34167862 199.94651794]
[-51.67996597 185.57832336]
[-43.15795517 173.10626221]
[-31.46649361 163.54141235]
[-17.55334854 157.65914917]
[-2.54640031 155.93630981]
[12.33780670 158.51255798]
[25.89267540 165.17906189]
[36.02652740 154.11990356]
[46.16038132 143.06074524]
[56.29423523 132.00157166]
[66.42808533 120.94242096]
[76.56194305 109.88325500]
[86.69579315 98.82409668]
[91.82609558 84.72870636]
[91.17180634 69.74298859]
[90.51751709 54.75726318]
[89.86322021 39.77153778]
[89.20893097 24.78581429]
[88.55464172 9.80009174]
[75.54133606 1.34826183]
[70.01264954 -13.15047264]
[74.09448242 -28.12105179]
[86.21728516 -37.80698395]
[101.71959686 -38.48382950]
[114.64044952 -29.89132690]
[120.01152802 -15.33347034]
[115.76753235 -0.40805179]
[103.54036713 9.14580059]
[104.19465637 24.13152313]
[104.84894562 39.11724854]
[105.50323486 54.10297012]
[106.15753174 69.08869171]
[106.81182098 84.07441711]
[118.08941650 93.96460724]
[133.03233337 92.65726471]
[147.97525024 91.34992981]
[162.91818237 90.04259491]
[171.73872375 77.13011932]
[186.80949402 72.95811462]
[201.01455688 79.49648285]
[207.64669800 93.65800476]
[203.57443237 108.75604248]
[190.72056580 117.66175842]
[175.15428162 116.17015839]
[164.22550964 104.98551941]
[149.28259277 106.29285431]
[134.33967590 107.60018921]
[119.39675140 108.90752411]
[113.06079865 112.84236145]
[106.61418152 113.78497314]
[101.23519135 112.19994354]
[97.75495148 108.95794678]
[87.62110138 120.01711273]
[77.48725128 131.07626343]
[67.35339355 142.13543701]
[57.21953964 153.19459534]
[47.08568954 164.25375366]
[36.95183563 175.31291199]
[44.77434921 188.23516846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[46 60]
[47 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
