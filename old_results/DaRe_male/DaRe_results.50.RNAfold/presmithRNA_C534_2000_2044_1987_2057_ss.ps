%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUAAGCAUCUCACUUACACCGAGAAAACAUCCGUGCAAAUCGGAUCGUCCUGAGCUAAAUAGCUAGCU\
) } def
/len { sequence length } bind def

/coor [
[98.10387421 193.76712036]
[87.10140228 204.87925720]
[71.52559662 206.26791382]
[58.73088455 197.27740479]
[54.75852966 182.15277100]
[61.48416138 168.03541565]
[75.73213959 161.59111023]
[79.61442566 147.10221863]
[83.49671173 132.61332703]
[70.05903625 120.96488953]
[63.70903778 104.35359955]
[48.76611710 103.04626465]
[33.82319641 101.73892975]
[18.88027763 100.43159485]
[9.52175713 112.69624329]
[-4.98967314 117.93283844]
[-20.02346992 114.47039795]
[-30.78240395 103.41378021]
[-33.83333588 88.29109955]
[-28.20273018 73.92796326]
[-15.68728542 64.90758514]
[-0.28063953 64.10833740]
[13.10100460 71.78525543]
[20.18761253 85.48867035]
[35.13053513 86.79600525]
[50.07345200 88.10334778]
[65.01637268 89.41068268]
[74.05548096 74.25374603]
[89.14263916 65.09863281]
[106.76080322 64.07954407]
[112.50105286 50.22134781]
[117.93762207 36.24123001]
[123.06792450 22.14584160]
[128.19822693 8.05045223]
[133.32852173 -6.04493761]
[138.45883179 -20.14032745]
[130.48387146 -33.59149933]
[133.07194519 -49.01342773]
[145.00103760 -59.12435150]
[160.63859558 -59.15019989]
[172.60104370 -49.07876587]
[175.24008179 -33.66547775]
[167.30964661 -20.18801498]
[152.55421448 -15.01002502]
[147.42391968 -0.91463536]
[142.29360962 13.18075371]
[137.16331482 27.27614403]
[132.03300476 41.37153244]
[132.72779846 48.96982956]
[126.35924530 55.96160126]
[120.61899567 69.81979370]
[128.24610901 76.80204773]
[133.61256409 85.64093018]
[136.28887939 95.62903595]
[136.06082153 105.96696472]
[132.94667053 115.82733154]
[144.84696960 124.95874786]
[156.74726868 134.09017944]
[168.64756775 143.22158813]
[184.96820068 144.82449341]
[191.49301147 159.86972046]
[181.50984192 172.88003540]
[165.28852844 170.47154236]
[159.51615906 155.12188721]
[147.61585999 145.99047852]
[135.71556091 136.85905457]
[123.81525421 127.72763062]
[111.74898529 134.61140442]
[97.98560333 136.49562073]
[94.10331726 150.98449707]
[90.22103119 165.47338867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 71]
[8 70]
[9 69]
[11 27]
[12 26]
[13 25]
[14 24]
[30 51]
[31 50]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
