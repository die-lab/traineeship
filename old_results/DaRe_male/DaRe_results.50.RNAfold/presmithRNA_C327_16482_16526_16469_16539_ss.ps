%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Feb 20 13:29:02 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAUCGGUCUUGUAAUCCGAAGAUCGGAGGUUAGACCCCUCCCUAGCGCUAAAUUACCAGAAAAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[109.73403168 120.50659180]
[103.05541229 122.49302673]
[96.08889771 122.36012268]
[89.49090576 120.12039948]
[83.88309479 115.98490143]
[79.79385376 110.34326935]
[77.60846710 103.72708130]
[77.53285980 96.75971222]
[64.22769928 89.83348083]
[50.92253876 82.90725708]
[37.61737442 75.98102570]
[24.31221199 69.05479431]
[12.76633263 77.24806213]
[-1.12882483 79.58787537]
[-14.59298134 75.66501617]
[-24.95770836 66.31752014]
[-30.19526100 53.45239639]
[-29.31513596 39.65682983]
[-42.30551910 32.15682983]
[-55.29589844 24.65682793]
[-68.28627777 17.15682793]
[-81.27665710 9.65682888]
[-98.01692200 6.97354650]
[-100.07266998 -9.85530472]
[-84.47058105 -16.48940277]
[-73.77665710 -3.33355212]
[-60.78627777 4.16644764]
[-47.79589844 11.66644764]
[-34.80551910 19.16644859]
[-21.81513596 26.66644859]
[-8.17452621 18.27910042]
[7.92473364 17.82271767]
[22.18194580 25.51194191]
[30.74217987 39.37302780]
[31.23844147 55.74963379]
[44.54360580 62.67586136]
[57.84876633 69.60208893]
[71.15393066 76.52832031]
[84.45909119 83.45455170]
[107.29654694 78.50506592]
[122.40166473 96.33432007]
[137.17378235 98.93904114]
[151.94589233 101.54376221]
[166.87997437 96.32038116]
[178.07032776 106.15020752]
[192.84243774 108.75492859]
[202.15919495 98.35835266]
[215.31846619 94.03581238]
[228.77143860 96.83818817]
[238.94706726 105.91015625]
[243.20004272 118.74715424]
[257.84448242 121.99375153]
[269.37640381 111.61135101]
[284.81204224 110.02360535]
[298.21606445 117.84102631]
[304.43432617 132.05766296]
[301.07583618 147.20690918]
[289.43194580 157.46360779]
[273.97998047 158.88380432]
[260.66156006 150.92144775]
[254.59788513 136.63818359]
[239.95344543 133.39160156]
[228.16532898 144.60585022]
[211.86715698 146.71726990]
[197.32279968 138.71887207]
[190.23771667 123.52704620]
[175.46560669 120.92232513]
[161.58811951 126.33200836]
[149.34117126 116.31587982]
[134.56906128 113.71115875]
[119.79693604 111.10643768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[41 71]
[42 70]
[43 69]
[45 67]
[46 66]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
