%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 27 19:44:17 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAGGUACAAGAUUUAAUUUACAUCAAGCAAACCAAUAAAAGUGAUUAAACUAGUAAAAGAUAAACCUCUACCUUCGGUUGGGGCGACCACGGAGUAAAAAACAACCUCCAAGCGGAACGGGCACAGCCCUAAAACCAAGAGAAACAUCU\
) } def
/len { sequence length } bind def

/coor [
[97.75658417 185.99995422]
[94.21299744 178.59957886]
[93.91722870 170.30538940]
[96.99386597 162.49566650]
[103.00081635 156.49830627]
[100.22664642 141.75706482]
[97.45248413 127.01583099]
[84.81087494 118.94181824]
[70.26986694 122.62409973]
[58.79137421 133.51237488]
[44.55415726 129.13619995]
[30.01315308 132.81848145]
[22.40510559 137.98968506]
[15.13356876 136.42329407]
[0.51956880 139.80427551]
[-14.09443092 143.18525696]
[-28.70843124 146.56623840]
[-43.32242966 149.94720459]
[-57.93642807 153.32818604]
[-72.55043030 156.70916748]
[-80.26372528 161.72203064]
[-87.50133514 160.00569153]
[-102.18209076 163.08392334]
[-103.56280518 178.13667297]
[-109.32059479 192.11305237]
[-118.94347382 203.77030945]
[-131.57579041 212.07186890]
[-146.09428406 216.27958679]
[-161.20797729 216.01930237]
[-175.57296753 211.31416321]
[-187.91194153 202.58253479]
[-197.12771606 190.60084534]
[-202.40083313 176.43449402]
[-203.26240540 161.34313965]
[-199.63583374 146.66868591]
[-191.84358215 133.71598816]
[-180.57855225 123.63679504]
[-166.84239197 117.32733154]
[-151.85652161 115.34863281]
[-136.95347595 117.87664795]
[-123.45844269 124.68658447]
[-112.57135773 135.17289734]
[-105.26031494 148.40318298]
[-90.57956696 145.32495117]
[-75.93140411 142.09516907]
[-61.31740952 138.71418762]
[-46.70340729 135.33320618]
[-32.08940887 131.95223999]
[-17.47540855 128.57125854]
[-2.86140943 125.19027710]
[11.75259018 121.80929565]
[26.33086967 118.27748108]
[40.87187576 114.59519958]
[51.31029892 103.97029877]
[66.58758545 108.08309174]
[81.12859344 104.40081024]
[66.60227966 100.66098785]
[51.61236572 100.11101532]
[39.11127853 91.82109070]
[32.77161789 78.22665405]
[34.45586395 63.32150650]
[43.66921616 51.48452759]
[57.70495224 46.19320297]
[72.43962097 49.00203323]
[83.54443359 59.08583450]
[87.75699615 73.48141479]
[94.94837952 86.64514923]
[94.94837952 71.64514923]
[94.94837952 56.64514923]
[94.94837952 41.64514923]
[87.21107483 27.84497833]
[94.94837952 15.11770630]
[94.94837952 0.11770675]
[94.94837952 -14.88229370]
[88.90203857 -30.72142601]
[102.44837952 -40.91617966]
[115.99471283 -30.72142601]
[109.94837952 -14.88229370]
[109.94837952 0.11770675]
[109.94837952 15.11770630]
[117.68567657 27.84497833]
[109.94837952 41.64514923]
[109.94837952 56.64514923]
[109.94837952 71.64514923]
[109.94837952 86.64514923]
[116.83669281 77.43972778]
[123.74124146 68.24645233]
[130.66201782 59.06533813]
[137.59899902 49.89641953]
[151.07485962 43.30846786]
[160.07461548 30.29636002]
[174.90687561 31.65770531]
[188.24371338 24.79265976]
[201.43582153 17.65345001]
[214.62792969 10.51423836]
[227.82003784 3.37502718]
[227.56158447 -11.92829895]
[234.45492554 -25.59360504]
[246.91598511 -34.48070526]
[262.08132935 -36.54740524]
[276.46603394 -31.31879807]
[286.76464844 -19.99637604]
[290.61059570 -5.18194771]
[287.12011719 9.72023773]
[277.09527588 21.28576660]
[262.83975220 26.85696793]
[247.62931824 25.15361786]
[234.95924377 16.56713295]
[221.76713562 23.70634460]
[208.57502747 30.84555626]
[195.38291931 37.98476791]
[193.17356873 42.28372574]
[188.20819092 45.20851517]
[181.49482727 45.13357162]
[173.45895386 57.67446518]
[157.66281128 56.78433228]
[144.18695068 63.37228394]
[144.03195190 70.87068176]
[156.86471558 78.63728333]
[143.72193909 85.86747742]
[143.56694031 93.36587524]
[156.75904846 100.50508881]
[169.95115662 107.64429474]
[183.14326477 114.78350830]
[199.95109558 117.00450134]
[202.46977234 133.77032471]
[187.05641174 140.83180237]
[176.00404358 127.97561646]
[162.81193542 120.83640289]
[149.61982727 113.69718933]
[136.42773438 106.55798340]
[130.36923218 110.97890472]
[139.21087646 123.09604645]
[127.09359741 131.93751526]
[118.25222015 119.82074738]
[112.19371796 124.24166107]
[114.96788025 138.98289490]
[117.74205017 153.72413635]
[133.63090515 169.48016357]
[126.00434113 189.71166992]
[129.98635864 204.17346191]
[133.96836853 218.63525391]
[147.83149719 226.22402954]
[152.18788147 241.41604614]
[144.45297241 255.19815063]
[129.21574402 259.39367676]
[115.51617432 251.51348877]
[111.48197937 236.23275757]
[119.50656891 222.61726379]
[115.52455902 208.15547180]
[111.54254150 193.69367981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[7 136]
[8 56]
[9 55]
[11 53]
[12 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[22 44]
[23 43]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
[89 117]
[90 116]
[92 114]
[93 111]
[94 110]
[95 109]
[96 108]
[121 131]
[122 130]
[123 129]
[124 128]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
