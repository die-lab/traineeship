%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUAGCUUAAAAUAAAGCACGGCACUGAAGCUGCCAAGAUGGGCCCUAAUAAGCUCCGCAUGCACAAAGG\
) } def
/len { sequence length } bind def

/coor [
[198.52732849 319.55416870]
[191.60110474 306.24899292]
[184.67488098 292.94384766]
[171.93501282 285.22729492]
[172.42585754 269.41372681]
[165.49963379 256.10855103]
[158.57341003 242.80339050]
[151.64717102 229.49822998]
[144.72094727 216.19305420]
[137.79472351 202.88789368]
[127.45071411 200.56822205]
[120.06484985 192.65509033]
[118.39494324 181.73403931]
[123.27183533 171.57220459]
[117.53158569 157.71401978]
[103.71533966 152.26910400]
[97.69649506 138.29670715]
[103.50128937 123.84187317]
[97.76103210 109.98368073]
[84.30492401 112.17356873]
[70.52000427 99.09239960]
[60.38615036 88.03324127]
[50.25229645 76.97408295]
[40.11844254 65.91492462]
[24.32024956 65.47602844]
[13.52042961 53.93741989]
[14.12632561 38.14475250]
[25.77846909 27.46752930]
[41.56385040 28.24036026]
[52.11728287 40.00473785]
[51.17760086 55.78106689]
[61.31145477 66.84022522]
[71.44531250 77.89939117]
[81.57916260 88.95854950]
[96.14929199 85.39325714]
[100.03157806 70.90437317]
[103.91386414 56.41548538]
[102.17301941 39.55115128]
[117.89637756 33.20982361]
[128.34252930 46.56325150]
[118.40274811 60.29777145]
[114.52046967 74.78665924]
[110.63818359 89.27554321]
[111.61922455 104.24343109]
[117.35948181 118.10162354]
[131.68519592 124.21812439]
[137.30921936 138.35408020]
[131.38978577 151.97375488]
[137.13003540 165.83195496]
[153.65971375 176.98954773]
[151.09988403 195.96166992]
[158.02610779 209.26683044]
[164.95234680 222.57199097]
[171.87857056 235.87715149]
[178.80479431 249.18232727]
[185.73103333 262.48748779]
[198.96630859 271.15570068]
[197.98004150 286.01760864]
[204.90626526 299.32278442]
[211.83248901 312.62792969]
[227.08650208 312.10083008]
[241.05514526 318.25222778]
[250.96493530 329.86080933]
[254.84825134 344.62164307]
[251.93409729 359.60400391]
[242.80105591 371.83306885]
[229.26249695 378.88079834]
[214.00653076 379.34783936]
[200.06222534 373.14144897]
[190.19824219 361.49395752]
[186.37306213 346.71792603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[14 49]
[15 48]
[18 45]
[19 44]
[21 34]
[22 33]
[23 32]
[24 31]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
