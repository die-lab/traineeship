%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Feb 16 19:23:01 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 20.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAAAGUAAAAUUUUAGAUCGUGACUCUAAAGAUAGGGGUUAAAGCCCCCUCACUCACCGAGGAAGAGUA\
) } def
/len { sequence length } bind def

/coor [
[-6.24675655 180.10372925]
[-17.73742294 189.74552917]
[-29.22809029 199.38734436]
[-40.71875763 209.02915955]
[-52.20942307 218.67097473]
[-63.70008850 228.31278992]
[-75.19075775 237.95460510]
[-86.68141937 247.59642029]
[-94.92839050 262.40939331]
[-111.44544220 258.58535767]
[-112.34323120 241.65518188]
[-96.32323456 236.10575867]
[-84.83257294 226.46394348]
[-73.34190369 216.82212830]
[-61.85123825 207.18031311]
[-50.36056900 197.53849792]
[-38.86990356 187.89668274]
[-27.37923622 178.25486755]
[-15.88857079 168.61305237]
[-17.83623505 157.98759460]
[-15.00995159 147.47592163]
[-7.88923788 139.13436890]
[2.19928813 134.62612915]
[13.32867050 134.88990784]
[23.33959198 139.94540405]
[35.99046326 131.88591003]
[48.64133453 123.82640839]
[61.29220581 115.76691437]
[73.94307709 107.70742035]
[72.10176849 100.37268066]
[72.34014130 92.61592865]
[74.74732208 85.03016663]
[79.24274445 78.22406769]
[85.57477570 72.77339935]
[93.33318329 69.17292786]
[101.97511292 67.79296875]
[110.86289215 68.84410095]
[119.31105042 72.35342407]
[128.44247437 60.45312119]
[137.57389832 48.55282211]
[146.70532227 36.65251923]
[148.30821228 20.33189774]
[163.35343933 13.80708694]
[176.36375427 23.79025459]
[173.95526123 40.01157379]
[158.60562134 45.78394318]
[149.47419739 57.68424225]
[140.34277344 69.58454132]
[131.21134949 81.48484039]
[136.03294373 95.68879700]
[150.52183533 99.57108307]
[165.01071167 103.45336914]
[179.49960327 107.33565521]
[192.20452881 98.21868896]
[207.79333496 99.45280457]
[218.90547180 110.45527649]
[220.29412842 126.03108215]
[211.30361938 138.82579041]
[196.17898560 142.79815674]
[182.06163025 136.07252502]
[175.61732483 121.82453918]
[161.12843323 117.94225311]
[146.63954163 114.05996704]
[132.15066528 110.17768097]
[108.12571716 129.34373474]
[82.00257111 120.35829163]
[69.35169983 128.41778564]
[56.70082855 136.47727966]
[44.04995728 144.53677368]
[31.39908600 152.59626770]
[28.48000908 172.15888977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[38 49]
[39 48]
[40 47]
[41 46]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
